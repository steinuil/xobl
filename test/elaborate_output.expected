Elaboratetree.Extension {name = "BigRequests"; file_name = "bigreq";
  query_name = "BIG-REQUESTS"; multiword = true; version = (0, 0);
  imports = [];
  declarations =
  [Elaboratetree.Request {name = "Enable"; opcode = 0;
     combine_adjacent = true; fields = [];
     reply =
     (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
              serialize = false};
             Elaboratetree.Field {name = "maximum_request_length";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card32);
                 ft_allowed = None }}
             ])}
    ]}
Elaboratetree.Extension {name = "Composite"; file_name = "composite";
  query_name = "Composite"; multiword = false; version = (0, 4);
  imports = ["xproto"; "xfixes"];
  declarations =
  [Elaboratetree.Enum {name = "Redirect";
     items = [("Automatic", 0L); ("Manual", 1L)]};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "client_major_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "client_minor_version";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "RedirectWindow"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "update";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "composite";
                       id_name = "Redirect" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "RedirectSubwindows"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "update";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "composite";
                       id_name = "Redirect" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "UnredirectWindow"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "update";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "composite";
                       id_name = "Redirect" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "UnredirectSubwindows"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "update";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "composite";
                       id_name = "Redirect" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateRegionFromBorderClip"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "region";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "NameWindowPixmap"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "pixmap";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetOverlayWindow"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "overlay_win";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "WINDOW"
                       });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "ReleaseOverlayWindow"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply = None}
    ]}
Elaboratetree.Extension {name = "Damage"; file_name = "damage";
  query_name = "DAMAGE"; multiword = false; version = (1, 1);
  imports = ["xproto"; "xfixes"];
  declarations =
  [Elaboratetree.Type_alias {name = "DAMAGE";
     type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Enum {name = "ReportLevel";
      items =
      [("RawRectangles", 0L); ("DeltaRectangles", 1L); ("BoundingBox", 2L);
        ("NonEmpty", 3L)]};
    Elaboratetree.Error {name = "BadDamage"; number = 0; fields = []};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "client_major_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "client_minor_version";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "Create"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "damage";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "damage"; id_name = "DAMAGE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "level";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "damage";
                       id_name = "ReportLevel" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "Destroy"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "damage";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "damage"; id_name = "DAMAGE" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "Subtract"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "damage";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "damage"; id_name = "DAMAGE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "repair";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xfixes"; id_name = "Region"
                       }))
            }};
        Elaboratetree.Field {name = "parts";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xfixes"; id_name = "Region"
                       }))
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "Add"; opcode = 4; combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "region";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Event {name = "Notify"; number = 0; is_generic = false;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "level";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "damage";
                      id_name = "ReportLevel" }))
           }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "damage";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "damage"; id_name = "DAMAGE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "area";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "RECTANGLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "geometry";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "RECTANGLE" });
            ft_allowed = None }}
        ]}
    ]}
Elaboratetree.Extension {name = "DPMS"; file_name = "dpms";
  query_name = "DPMS"; multiword = false; version = (0, 0); imports = [];
  declarations =
  [Elaboratetree.Request {name = "GetVersion"; opcode = 0;
     combine_adjacent = true;
     fields =
     [Elaboratetree.Field {name = "client_major_version";
        type_ =
        { Elaboratetree.ft_type =
          (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
          }};
       Elaboratetree.Field {name = "client_minor_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }}
       ];
     reply =
     (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
              serialize = false};
             Elaboratetree.Field {name = "server_major_version";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card16);
                 ft_allowed = None }};
             Elaboratetree.Field {name = "server_minor_version";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card16);
                 ft_allowed = None }}
             ])};
    Elaboratetree.Request {name = "Capable"; opcode = 1;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "capable";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "GetTimeouts"; opcode = 2;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "standby_timeout";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "suspend_timeout";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "off_timeout";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 18);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "SetTimeouts"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "standby_timeout";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field {name = "suspend_timeout";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "off_timeout";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "Enable"; opcode = 4;
      combine_adjacent = true; fields = []; reply = None};
    Elaboratetree.Request {name = "Disable"; opcode = 5;
      combine_adjacent = true; fields = []; reply = None};
    Elaboratetree.Enum {name = "DPMSMode";
      items = [("On", 0L); ("Standby", 1L); ("Suspend", 2L); ("Off", 3L)]};
    Elaboratetree.Request {name = "ForceLevel"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "power_level";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "dpms"; id_name = "DPMSMode"
                      }))
           }}
        ];
      reply = None};
    Elaboratetree.Request {name = "Info"; opcode = 7;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "power_level";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "dpms";
                             id_name = "DPMSMode" }))
                  }};
              Elaboratetree.Field {name = "state";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 21);
                serialize = false}
              ])}
    ]}
Elaboratetree.Extension {name = "DRI2"; file_name = "dri2";
  query_name = "DRI2"; multiword = false; version = (1, 4);
  imports = ["xproto"];
  declarations =
  [Elaboratetree.Enum {name = "Attachment";
     items =
     [("BufferFrontLeft", 0L); ("BufferBackLeft", 1L);
       ("BufferFrontRight", 2L); ("BufferBackRight", 3L);
       ("BufferDepth", 4L); ("BufferStencil", 5L); ("BufferAccum", 6L);
       ("BufferFakeFrontLeft", 7L); ("BufferFakeFrontRight", 8L);
       ("BufferDepthStencil", 9L); ("BufferHiz", 10L)]};
    Elaboratetree.Enum {name = "DriverType";
      items = [("DRI", 0L); ("VDPAU", 1L)]};
    Elaboratetree.Enum {name = "EventType";
      items =
      [("ExchangeComplete", 1L); ("BlitComplete", 2L); ("FlipComplete", 3L)]};
    Elaboratetree.Struct {name = "DRI2Buffer";
      fields =
      [Elaboratetree.Field {name = "attachment";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "dri2";
                      id_name = "Attachment" }))
           }};
        Elaboratetree.Field {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pitch";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "cpp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "AttachFormat";
      fields =
      [Elaboratetree.Field {name = "attachment";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "dri2";
                      id_name = "Attachment" }))
           }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "major_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "minor_version";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "Connect"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "driver_type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "dri2";
                       id_name = "DriverType" }))
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "driver_name_length";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "driver_name_length")};
              Elaboratetree.Field_list_length {name = "device_name_length";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "device_name_length")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "driver_name";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "driver_name_length"};
              Elaboratetree.Field_list {name = "alignment_pad";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Void);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Sub,
                         (Elaboratetree.Binop (Parsetree.Bit_and,
                            (Elaboratetree.Binop (Parsetree.Add,
                               (Elaboratetree.Field_ref "driver_name_length"),
                               (Elaboratetree.Expr_value 3L))),
                            (Elaboratetree.Unop (Parsetree.Bit_not,
                               (Elaboratetree.Expr_value 3L)))
                            )),
                         (Elaboratetree.Field_ref "driver_name_length"))))};
              Elaboratetree.Field_list_simple {name = "device_name";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "device_name_length"}
              ])};
    Elaboratetree.Request {name = "Authenticate"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "magic";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "authenticated";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "CreateDrawable"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "DestroyDrawable"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetBuffers"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "count";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "count")};
        Elaboratetree.Field_list_simple {name = "attachments";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "count"}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "count";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "count")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "buffers";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "dri2";
                       id_name = "DRI2Buffer" });
                  ft_allowed = None };
                length = "count"}
              ])};
    Elaboratetree.Request {name = "CopyRegion"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "region";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "dest";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "src";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false}
              ])};
    Elaboratetree.Request {name = "GetBuffersWithFormat"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "count";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "count")};
        Elaboratetree.Field_list_simple {name = "attachments";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "dri2"; id_name = "AttachFormat" });
            ft_allowed = None };
          length = "count"}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "count";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "count")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "buffers";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "dri2";
                       id_name = "DRI2Buffer" });
                  ft_allowed = None };
                length = "count"}
              ])};
    Elaboratetree.Request {name = "SwapBuffers"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target_msc_hi";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "target_msc_lo";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "divisor_hi";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "divisor_lo";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "remainder_hi";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "remainder_lo";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "swap_hi";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "swap_lo";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "GetMSC"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "ust_hi";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "ust_lo";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "msc_hi";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "msc_lo";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "sbc_hi";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "sbc_lo";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "WaitMSC"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target_msc_hi";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "target_msc_lo";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "divisor_hi";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "divisor_lo";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "remainder_hi";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "remainder_lo";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "ust_hi";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "ust_lo";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "msc_hi";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "msc_lo";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "sbc_hi";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "sbc_lo";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "WaitSBC"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target_sbc_hi";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "target_sbc_lo";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "ust_hi";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "ust_lo";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "msc_hi";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "msc_lo";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "sbc_hi";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "sbc_lo";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "SwapInterval"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "interval";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetParam"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "param";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "is_param_recognized";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Bool);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "value_hi";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "value_lo";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Event {name = "BufferSwapComplete"; number = 0;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
         serialize = false};
        Elaboratetree.Field {name = "event_type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "dri2";
                       id_name = "EventType" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "ust_hi";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "ust_lo";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "msc_hi";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "msc_lo";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "sbc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Event {name = "InvalidateBuffers"; number = 1;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
         serialize = false};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }}
        ]}
    ]}
Elaboratetree.Extension {name = "DRI3"; file_name = "dri3";
  query_name = "DRI3"; multiword = false; version = (1, 2);
  imports = ["xproto"];
  declarations =
  [Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
     combine_adjacent = true;
     fields =
     [Elaboratetree.Field {name = "major_version";
        type_ =
        { Elaboratetree.ft_type =
          (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
          }};
       Elaboratetree.Field {name = "minor_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
       ];
     reply =
     (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
              serialize = false};
             Elaboratetree.Field {name = "major_version";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card32);
                 ft_allowed = None }};
             Elaboratetree.Field {name = "minor_version";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card32);
                 ft_allowed = None }}
             ])};
    Elaboratetree.Request {name = "Open"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "provider";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "nfd";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              (Elaboratetree.Field_file_descriptor "device_fd");
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "PixmapFromBuffer"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "pixmap";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "size";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "stride";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "depth";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "bpp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        (Elaboratetree.Field_file_descriptor "pixmap_fd")];
      reply = None};
    Elaboratetree.Request {name = "BufferFromPixmap"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "pixmap";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "nfd";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "size";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "stride";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "depth";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "bpp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None }};
              (Elaboratetree.Field_file_descriptor "pixmap_fd");
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "FenceFromFD"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "fence";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "initially_triggered";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        (Elaboratetree.Field_file_descriptor "fence_fd")];
      reply = None};
    Elaboratetree.Request {name = "FDFromFence"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "fence";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "nfd";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              (Elaboratetree.Field_file_descriptor "fence_fd");
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "GetSupportedModifiers"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "depth";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "bpp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_window_modifiers";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_window_modifiers")};
              Elaboratetree.Field_list_length {name = "num_screen_modifiers";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_screen_modifiers")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "window_modifiers";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card64);
                  ft_allowed = None };
                length = "num_window_modifiers"};
              Elaboratetree.Field_list_simple {name = "screen_modifiers";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card64);
                  ft_allowed = None };
                length = "num_screen_modifiers"}
              ])};
    Elaboratetree.Request {name = "PixmapFromBuffers"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "pixmap";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_buffers";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
          expr = (Elaboratetree.Field_ref "num_buffers")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "stride0";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "offset0";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "stride1";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "offset1";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "stride2";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "offset2";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "stride3";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "offset3";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "depth";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "bpp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "modifier";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Elaboratetree.Field_list_simple {name = "buffers";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Fd); ft_allowed = None };
          length = "num_buffers"}
        ];
      reply = None};
    Elaboratetree.Request {name = "BuffersFromPixmap"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "pixmap";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_list_length {name = "nfd";
               type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
               expr = (Elaboratetree.Field_ref "nfd")};
              Elaboratetree.Field {name = "width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field {name = "modifier";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card64);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "depth";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "bpp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 6);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "strides";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = "nfd"};
              Elaboratetree.Field_list_simple {name = "offsets";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = "nfd"};
              Elaboratetree.Field_list_simple {name = "buffers";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Fd);
                  ft_allowed = None };
                length = "nfd"}
              ])}
    ]}
Elaboratetree.Extension {name = "GenericEvent"; file_name = "ge";
  query_name = "Generic Event Extension"; multiword = false;
  version = (1, 0); imports = [];
  declarations =
  [Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
     combine_adjacent = true;
     fields =
     [Elaboratetree.Field {name = "client_major_version";
        type_ =
        { Elaboratetree.ft_type =
          (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
          }};
       Elaboratetree.Field {name = "client_minor_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }}
       ];
     reply =
     (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
              serialize = false};
             Elaboratetree.Field {name = "major_version";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card16);
                 ft_allowed = None }};
             Elaboratetree.Field {name = "minor_version";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card16);
                 ft_allowed = None }};
             Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
               serialize = false}
             ])}
    ]}
Elaboratetree.Extension {name = "Glx"; file_name = "glx"; query_name = "GLX";
  multiword = false; version = (1, 4); imports = ["xproto"];
  declarations =
  [Elaboratetree.Type_alias {name = "PIXMAP";
     type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "CONTEXT";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "PBUFFER";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "WINDOW";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "FBCONFIG";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "DRAWABLE";
      type_ =
      (Elaboratetree.Type_union
         [{ Elaboratetree.id_module = "xproto"; id_name = "WINDOW" };
           { Elaboratetree.id_module = "glx"; id_name = "PBUFFER" };
           { Elaboratetree.id_module = "glx"; id_name = "PIXMAP" };
           { Elaboratetree.id_module = "glx"; id_name = "WINDOW" }])};
    Elaboratetree.Type_alias {name = "FLOAT32";
      type_ = (Elaboratetree.Type_primitive Parsetree.Float)};
    Elaboratetree.Type_alias {name = "FLOAT64";
      type_ = (Elaboratetree.Type_primitive Parsetree.Double)};
    Elaboratetree.Type_alias {name = "BOOL32";
      type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
    Elaboratetree.Type_alias {name = "CONTEXT_TAG";
      type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
    Elaboratetree.Error {name = "Generic"; number = -1;
      fields =
      [Elaboratetree.Field {name = "bad_value";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "minor_opcode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "major_opcode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 21);
          serialize = false}
        ]};
    Elaboratetree.Error_copy {name = "BadContext";
      error = { Elaboratetree.id_module = "glx"; id_name = "Generic" };
      number = 0};
    Elaboratetree.Error_copy {name = "BadContextState";
      error = { Elaboratetree.id_module = "glx"; id_name = "Generic" };
      number = 1};
    Elaboratetree.Error_copy {name = "BadDrawable";
      error = { Elaboratetree.id_module = "glx"; id_name = "Generic" };
      number = 2};
    Elaboratetree.Error_copy {name = "BadPixmap";
      error = { Elaboratetree.id_module = "glx"; id_name = "Generic" };
      number = 3};
    Elaboratetree.Error_copy {name = "BadContextTag";
      error = { Elaboratetree.id_module = "glx"; id_name = "Generic" };
      number = 4};
    Elaboratetree.Error_copy {name = "BadCurrentWindow";
      error = { Elaboratetree.id_module = "glx"; id_name = "Generic" };
      number = 5};
    Elaboratetree.Error_copy {name = "BadRenderRequest";
      error = { Elaboratetree.id_module = "glx"; id_name = "Generic" };
      number = 6};
    Elaboratetree.Error_copy {name = "BadLargeRequest";
      error = { Elaboratetree.id_module = "glx"; id_name = "Generic" };
      number = 7};
    Elaboratetree.Error_copy {name = "UnsupportedPrivateRequest";
      error = { Elaboratetree.id_module = "glx"; id_name = "Generic" };
      number = 8};
    Elaboratetree.Error_copy {name = "BadFBConfig";
      error = { Elaboratetree.id_module = "glx"; id_name = "Generic" };
      number = 9};
    Elaboratetree.Error_copy {name = "BadPbuffer";
      error = { Elaboratetree.id_module = "glx"; id_name = "Generic" };
      number = 10};
    Elaboratetree.Error_copy {name = "BadCurrentDrawable";
      error = { Elaboratetree.id_module = "glx"; id_name = "Generic" };
      number = 11};
    Elaboratetree.Error_copy {name = "BadWindow";
      error = { Elaboratetree.id_module = "glx"; id_name = "Generic" };
      number = 12};
    Elaboratetree.Error_copy {name = "GLXBadProfileARB";
      error = { Elaboratetree.id_module = "glx"; id_name = "Generic" };
      number = 13};
    Elaboratetree.Event {name = "PbufferClobber"; number = 0;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
         serialize = false};
        Elaboratetree.Field {name = "event_type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "draw_type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "b_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "aux_buffer";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "count";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
          serialize = false}
        ]};
    Elaboratetree.Event {name = "BufferSwapComplete"; number = 1;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
         serialize = false};
        Elaboratetree.Field {name = "event_type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "ust_hi";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "ust_lo";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "msc_hi";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "msc_lo";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "sbc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Enum {name = "PBCET";
      items = [("Damaged", 32791L); ("Saved", 32792L)]};
    Elaboratetree.Enum {name = "PBCDT";
      items = [("Window", 32793L); ("Pbuffer", 32794L)]};
    Elaboratetree.Request {name = "Render"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field_list {name = "data";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
            };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "RenderLarge"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "request_num";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "request_total";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "data_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "data_len")};
        Elaboratetree.Field_list_simple {name = "data";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
            };
          length = "data_len"}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateContext"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "visual";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "VISUALID" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "screen";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "share_list";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "CONTEXT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "is_direct";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "DestroyContext"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "MakeCurrent"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "CONTEXT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "old_context_tag";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "context_tag";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx";
                       id_name = "CONTEXT_TAG" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "IsDirect"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "is_direct";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "major_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "minor_version";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "WaitGL"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "WaitX"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "CopyContext"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "src";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "dest";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "CONTEXT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_context_tag";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Mask {name = "GC";
      items =
      [("GL_CURRENT_BIT", 0); ("GL_POINT_BIT", 1); ("GL_LINE_BIT", 2);
        ("GL_POLYGON_BIT", 3); ("GL_POLYGON_STIPPLE_BIT", 4);
        ("GL_PIXEL_MODE_BIT", 5); ("GL_LIGHTING_BIT", 6); ("GL_FOG_BIT", 7);
        ("GL_DEPTH_BUFFER_BIT", 8); ("GL_ACCUM_BUFFER_BIT", 9);
        ("GL_STENCIL_BUFFER_BIT", 10); ("GL_VIEWPORT_BIT", 11);
        ("GL_TRANSFORM_BIT", 12); ("GL_ENABLE_BIT", 13);
        ("GL_COLOR_BUFFER_BIT", 14); ("GL_HINT_BIT", 15);
        ("GL_EVAL_BIT", 16); ("GL_LIST_BIT", 17); ("GL_TEXTURE_BIT", 18);
        ("GL_SCISSOR_BIT", 19)];
      additional_values = [("GL_ALL_ATTRIB_BITS", 16777215L)]};
    Elaboratetree.Request {name = "SwapBuffers"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "DRAWABLE" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "UseXFont"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "font";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "FONT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "first";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "count";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "list_base";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateGLXPixmap"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "visual";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "VISUALID" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "pixmap";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "glx_pixmap";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "PIXMAP" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetVisualConfigs"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "num_visuals";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "num_properties";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false};
              Elaboratetree.Field_list {name = "property_list";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = (Some (Elaboratetree.Field_ref "length"))}
              ])};
    Elaboratetree.Request {name = "DestroyGLXPixmap"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "glx_pixmap";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "PIXMAP" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "VendorPrivate"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "vendor_code";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "context_tag";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
            ft_allowed = None }};
        Elaboratetree.Field_list {name = "data";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
            };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "VendorPrivateWithReply"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "vendor_code";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "context_tag";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
            ft_allowed = None }};
        Elaboratetree.Field_list {name = "data";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
            };
          length = None}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "retval";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_list {name = "data1";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length = (Some (Elaboratetree.Expr_value 24L))};
              Elaboratetree.Field_list {name = "data2";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "length"),
                         (Elaboratetree.Expr_value 4L))))}
              ])};
    Elaboratetree.Request {name = "QueryExtensionsString"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field {name = "n";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "QueryServerString"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "str_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "str_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "string";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "str_len"}
              ])};
    Elaboratetree.Request {name = "ClientInfo"; opcode = 20;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "major_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "minor_version";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "str_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "str_len")};
        Elaboratetree.Field_list_simple {name = "string";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "str_len"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetFBConfigs"; opcode = 21;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "num_FB_configs";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "num_properties";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false};
              Elaboratetree.Field_list {name = "property_list";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = (Some (Elaboratetree.Field_ref "length"))}
              ])};
    Elaboratetree.Request {name = "CreatePixmap"; opcode = 22;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "fbconfig";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "FBCONFIG" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "pixmap";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "glx_pixmap";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "PIXMAP" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_attribs";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr =
          (Elaboratetree.Binop (Parsetree.Div,
             (Elaboratetree.Field_ref "num_attribs"),
             (Elaboratetree.Expr_value 2L)))};
        Elaboratetree.Field_list_simple {name = "attribs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_attribs"}
        ];
      reply = None};
    Elaboratetree.Request {name = "DestroyPixmap"; opcode = 23;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "glx_pixmap";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "PIXMAP" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateNewContext"; opcode = 24;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "fbconfig";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "FBCONFIG" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "screen";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "render_type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "share_list";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "CONTEXT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "is_direct";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "QueryContext"; opcode = 25;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_attribs";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr =
                (Elaboratetree.Binop (Parsetree.Div,
                   (Elaboratetree.Field_ref "num_attribs"),
                   (Elaboratetree.Expr_value 2L)))};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "attribs";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = "num_attribs"}
              ])};
    Elaboratetree.Request {name = "MakeContextCurrent"; opcode = 26;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "old_context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "read_drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "CONTEXT" });
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "context_tag";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx";
                       id_name = "CONTEXT_TAG" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "CreatePbuffer"; opcode = 27;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "fbconfig";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "FBCONFIG" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "pbuffer";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "PBUFFER" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_attribs";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr =
          (Elaboratetree.Binop (Parsetree.Div,
             (Elaboratetree.Field_ref "num_attribs"),
             (Elaboratetree.Expr_value 2L)))};
        Elaboratetree.Field_list_simple {name = "attribs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_attribs"}
        ];
      reply = None};
    Elaboratetree.Request {name = "DestroyPbuffer"; opcode = 28;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "pbuffer";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "PBUFFER" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetDrawableAttributes"; opcode = 29;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "DRAWABLE" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_attribs";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr =
                (Elaboratetree.Binop (Parsetree.Div,
                   (Elaboratetree.Field_ref "num_attribs"),
                   (Elaboratetree.Expr_value 2L)))};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "attribs";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = "num_attribs"}
              ])};
    Elaboratetree.Request {name = "ChangeDrawableAttributes"; opcode = 30;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_attribs";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr =
          (Elaboratetree.Binop (Parsetree.Div,
             (Elaboratetree.Field_ref "num_attribs"),
             (Elaboratetree.Expr_value 2L)))};
        Elaboratetree.Field_list_simple {name = "attribs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_attribs"}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateWindow"; opcode = 31;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "fbconfig";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "FBCONFIG" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "glx_window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_attribs";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr =
          (Elaboratetree.Binop (Parsetree.Div,
             (Elaboratetree.Field_ref "num_attribs"),
             (Elaboratetree.Expr_value 2L)))};
        Elaboratetree.Field_list_simple {name = "attribs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_attribs"}
        ];
      reply = None};
    Elaboratetree.Request {name = "DeleteWindow"; opcode = 32;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "glxwindow";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "SetClientInfoARB"; opcode = 33;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "major_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "minor_version";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_versions";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr =
          (Elaboratetree.Binop (Parsetree.Div,
             (Elaboratetree.Field_ref "num_versions"),
             (Elaboratetree.Expr_value 2L)))};
        Elaboratetree.Field_list_length {name = "gl_str_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "gl_str_len")};
        Elaboratetree.Field_list_length {name = "glx_str_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "glx_str_len")};
        Elaboratetree.Field_list_simple {name = "gl_versions";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_versions"};
        Elaboratetree.Field_list_simple {name = "gl_extension_string";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "gl_str_len"};
        Elaboratetree.Field_list_simple {name = "glx_extension_string";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "glx_str_len"}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateContextAttribsARB"; opcode = 34;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "fbconfig";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "FBCONFIG" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "screen";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "share_list";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "CONTEXT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "is_direct";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field_list_length {name = "num_attribs";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr =
          (Elaboratetree.Binop (Parsetree.Div,
             (Elaboratetree.Field_ref "num_attribs"),
             (Elaboratetree.Expr_value 2L)))};
        Elaboratetree.Field_list_simple {name = "attribs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_attribs"}
        ];
      reply = None};
    Elaboratetree.Request {name = "SetClientInfo2ARB"; opcode = 35;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "major_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "minor_version";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_versions";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr =
          (Elaboratetree.Binop (Parsetree.Div,
             (Elaboratetree.Field_ref "num_versions"),
             (Elaboratetree.Expr_value 3L)))};
        Elaboratetree.Field_list_length {name = "gl_str_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "gl_str_len")};
        Elaboratetree.Field_list_length {name = "glx_str_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "glx_str_len")};
        Elaboratetree.Field_list_simple {name = "gl_versions";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_versions"};
        Elaboratetree.Field_list_simple {name = "gl_extension_string";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "gl_str_len"};
        Elaboratetree.Field_list_simple {name = "glx_extension_string";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "glx_str_len"}
        ];
      reply = None};
    Elaboratetree.Request {name = "NewList"; opcode = 101;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "list";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "EndList"; opcode = 102;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "DeleteLists"; opcode = 103;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "list";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "range";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GenLists"; opcode = 104;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "range";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "ret_val";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "FeedbackBuffer"; opcode = 105;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "size";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "SelectBuffer"; opcode = 106;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "size";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "RenderMode"; opcode = 107;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "ret_val";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "new_mode";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Enum {name = "RM";
      items =
      [("GL_RENDER", 7168L); ("GL_FEEDBACK", 7169L); ("GL_SELECT", 7170L)]};
    Elaboratetree.Request {name = "Finish"; opcode = 108;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false}
              ])};
    Elaboratetree.Request {name = "PixelStoref"; opcode = 109;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "datum";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "PixelStorei"; opcode = 110;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "datum";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "ReadPixels"; opcode = 111;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "swap_bytes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field {name = "lsb_first";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                serialize = false};
              Elaboratetree.Field_list {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "length"),
                         (Elaboratetree.Expr_value 4L))))}
              ])};
    Elaboratetree.Request {name = "GetBooleanv"; opcode = 112;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 15);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetClipPlane"; opcode = 113;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "plane";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                serialize = false};
              Elaboratetree.Field_list {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT64" });
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Div,
                         (Elaboratetree.Field_ref "length"),
                         (Elaboratetree.Expr_value 2L))))}
              ])};
    Elaboratetree.Request {name = "GetDoublev"; opcode = 114;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT64" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT64" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetError"; opcode = 115;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "error";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "GetFloatv"; opcode = 116;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetIntegerv"; opcode = 117;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetLightfv"; opcode = 118;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "light";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetLightiv"; opcode = 119;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "light";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetMapdv"; opcode = 120;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "query";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT64" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT64" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetMapfv"; opcode = 121;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "query";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetMapiv"; opcode = 122;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "query";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetMaterialfv"; opcode = 123;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "face";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetMaterialiv"; opcode = 124;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "face";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetPixelMapfv"; opcode = 125;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "map";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetPixelMapuiv"; opcode = 126;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "map";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetPixelMapusv"; opcode = 127;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "map";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetPolygonStipple"; opcode = 128;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "lsb_first";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                serialize = false};
              Elaboratetree.Field_list {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "length"),
                         (Elaboratetree.Expr_value 4L))))}
              ])};
    Elaboratetree.Request {name = "GetString"; opcode = 129;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "string";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetTexEnvfv"; opcode = 130;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetTexEnviv"; opcode = 131;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetTexGendv"; opcode = 132;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "coord";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT64" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT64" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetTexGenfv"; opcode = 133;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "coord";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetTexGeniv"; opcode = 134;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "coord";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetTexImage"; opcode = 135;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "level";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "swap_bytes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field {name = "width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "depth";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "length"),
                         (Elaboratetree.Expr_value 4L))))}
              ])};
    Elaboratetree.Request {name = "GetTexParameterfv"; opcode = 136;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetTexParameteriv"; opcode = 137;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetTexLevelParameterfv"; opcode = 138;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "level";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetTexLevelParameteriv"; opcode = 139;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "level";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "IsEnabled"; opcode = 140;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "capability";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "ret_val";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "BOOL32" });
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "IsList"; opcode = 141;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "list";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "ret_val";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "BOOL32" });
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "Flush"; opcode = 142;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "AreTexturesResident"; opcode = 143;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "n";
          type_ = (Elaboratetree.Type_primitive Parsetree.Int32);
          expr = (Elaboratetree.Field_ref "n")};
        Elaboratetree.Field_list_simple {name = "textures";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "n"}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "ret_val";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "BOOL32" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "length"),
                         (Elaboratetree.Expr_value 4L))))}
              ])};
    Elaboratetree.Request {name = "DeleteTextures"; opcode = 144;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "n";
          type_ = (Elaboratetree.Type_primitive Parsetree.Int32);
          expr = (Elaboratetree.Field_ref "n")};
        Elaboratetree.Field_list_simple {name = "textures";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "n"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GenTextures"; opcode = 145;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "n";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                serialize = false};
              Elaboratetree.Field_list {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = (Some (Elaboratetree.Field_ref "length"))}
              ])};
    Elaboratetree.Request {name = "IsTexture"; opcode = 146;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "texture";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "ret_val";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "BOOL32" });
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "GetColorTable"; opcode = 147;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "swap_bytes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field {name = "width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "length"),
                         (Elaboratetree.Expr_value 4L))))}
              ])};
    Elaboratetree.Request {name = "GetColorTableParameterfv"; opcode = 148;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetColorTableParameteriv"; opcode = 149;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetConvolutionFilter"; opcode = 150;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "swap_bytes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field {name = "width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field_list {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "length"),
                         (Elaboratetree.Expr_value 4L))))}
              ])};
    Elaboratetree.Request {name = "GetConvolutionParameterfv"; opcode = 151;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetConvolutionParameteriv"; opcode = 152;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetSeparableFilter"; opcode = 153;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "swap_bytes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field {name = "row_w";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "col_h";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field_list {name = "rows_and_cols";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "length"),
                         (Elaboratetree.Expr_value 4L))))}
              ])};
    Elaboratetree.Request {name = "GetHistogram"; opcode = 154;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "swap_bytes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field {name = "reset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field {name = "width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "length"),
                         (Elaboratetree.Expr_value 4L))))}
              ])};
    Elaboratetree.Request {name = "GetHistogramParameterfv"; opcode = 155;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetHistogramParameteriv"; opcode = 156;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetMinmax"; opcode = 157;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "swap_bytes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field {name = "reset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                serialize = false};
              Elaboratetree.Field_list {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "length"),
                         (Elaboratetree.Expr_value 4L))))}
              ])};
    Elaboratetree.Request {name = "GetMinmaxParameterfv"; opcode = 158;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "FLOAT32" });
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetMinmaxParameteriv"; opcode = 159;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetCompressedTexImageARB"; opcode = 160;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "level";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field {name = "size";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "length"),
                         (Elaboratetree.Expr_value 4L))))}
              ])};
    Elaboratetree.Request {name = "DeleteQueriesARB"; opcode = 161;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "n";
          type_ = (Elaboratetree.Type_primitive Parsetree.Int32);
          expr = (Elaboratetree.Field_ref "n")};
        Elaboratetree.Field_list_simple {name = "ids";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "n"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GenQueriesARB"; opcode = 162;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "n";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                serialize = false};
              Elaboratetree.Field_list {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = (Some (Elaboratetree.Field_ref "length"))}
              ])};
    Elaboratetree.Request {name = "IsQueryARB"; opcode = 163;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "ret_val";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "glx"; id_name = "BOOL32" });
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "GetQueryivARB"; opcode = 164;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetQueryObjectivARB"; opcode = 165;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = "n"}
              ])};
    Elaboratetree.Request {name = "GetQueryObjectuivARB"; opcode = 166;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_tag";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "glx"; id_name = "CONTEXT_TAG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pname";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "n";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "n")};
              Elaboratetree.Field {name = "datum";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = "n"}
              ])}
    ]}
Elaboratetree.Extension {name = "Present"; file_name = "present";
  query_name = "Present"; multiword = false; version = (1, 2);
  imports = ["xproto"; "randr"; "xfixes"; "sync"];
  declarations =
  [Elaboratetree.Enum {name = "Event";
     items =
     [("ConfigureNotify", 0L); ("CompleteNotify", 1L); ("IdleNotify", 2L);
       ("RedirectNotify", 3L)]};
    Elaboratetree.Mask {name = "EventMask";
      items =
      [("ConfigureNotify", 0); ("CompleteNotify", 1); ("IdleNotify", 2);
        ("RedirectNotify", 3)];
      additional_values = [("NoEvent", 0L)]};
    Elaboratetree.Mask {name = "Option";
      items = [("Async", 0); ("Copy", 1); ("UST", 2); ("Suboptimal", 3)];
      additional_values = [("None", 0L)]};
    Elaboratetree.Mask {name = "Capability";
      items = [("Async", 0); ("Fence", 1); ("UST", 2)];
      additional_values = [("None", 0L)]};
    Elaboratetree.Enum {name = "CompleteKind";
      items = [("Pixmap", 0L); ("NotifyMSC", 1L)]};
    Elaboratetree.Enum {name = "CompleteMode";
      items =
      [("Copy", 0L); ("Flip", 1L); ("Skip", 2L); ("SuboptimalCopy", 3L)]};
    Elaboratetree.Struct {name = "Notify";
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "serial";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "major_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "minor_version";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "Pixmap"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "pixmap";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "serial";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "valid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "update";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "x_off";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y_off";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "target_crtc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "wait_fence";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "FENCE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "idle_fence";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "FENCE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "options";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
          serialize = false};
        Elaboratetree.Field {name = "target_msc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Elaboratetree.Field {name = "divisor";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Elaboratetree.Field {name = "remainder";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Elaboratetree.Field_list {name = "notifies";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "present"; id_name = "Notify" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "NotifyMSC"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "serial";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
          serialize = false};
        Elaboratetree.Field {name = "target_msc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Elaboratetree.Field {name = "divisor";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Elaboratetree.Field {name = "remainder";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Type_alias {name = "EVENT";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Request {name = "SelectInput"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "eid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "present"; id_name = "EVENT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "present";
                       id_name = "EventMask" }))
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "QueryCapabilities"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "target";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "capabilities";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Event {name = "Generic"; number = 0; is_generic = false;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "extension";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "length";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "evtype";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "present"; id_name = "EVENT" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Event {name = "ConfigureNotify"; number = 0;
      is_generic = true; is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
         serialize = false};
        Elaboratetree.Field {name = "event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "present"; id_name = "EVENT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "off_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "off_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "pixmap_width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pixmap_height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pixmap_flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Event {name = "CompleteNotify"; number = 1;
      is_generic = true; is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "kind";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "present";
                      id_name = "CompleteKind" }))
           }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "present";
                       id_name = "CompleteMode" }))
            }};
        Elaboratetree.Field {name = "event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "present"; id_name = "EVENT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "serial";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "ust";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Elaboratetree.Field {name = "msc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }}
        ]};
    Elaboratetree.Event {name = "IdleNotify"; number = 2; is_generic = true;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
         serialize = false};
        Elaboratetree.Field {name = "event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "present"; id_name = "EVENT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "serial";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pixmap";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "idle_fence";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "FENCE" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Event {name = "RedirectNotify"; number = 3;
      is_generic = true; is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "update_window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field {name = "event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "present"; id_name = "EVENT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event_window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "pixmap";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "serial";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "valid_region";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "update_region";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "valid_rect";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "RECTANGLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "update_rect";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "RECTANGLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "x_off";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y_off";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "target_crtc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "wait_fence";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "FENCE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "idle_fence";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "FENCE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "options";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
          serialize = false};
        Elaboratetree.Field {name = "target_msc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Elaboratetree.Field {name = "divisor";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Elaboratetree.Field {name = "remainder";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card64);
            ft_allowed = None }};
        Elaboratetree.Field_list {name = "notifies";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "present"; id_name = "Notify" });
            ft_allowed = None };
          length = None}
        ]}
    ]}
Elaboratetree.Extension {name = "RandR"; file_name = "randr";
  query_name = "RANDR"; multiword = false; version = (1, 6);
  imports = ["xproto"; "render"];
  declarations =
  [Elaboratetree.Type_alias {name = "MODE";
     type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "CRTC";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "OUTPUT";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "PROVIDER";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "LEASE";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Error {name = "BadOutput"; number = 0; fields = []};
    Elaboratetree.Error {name = "BadCrtc"; number = 1; fields = []};
    Elaboratetree.Error {name = "BadMode"; number = 2; fields = []};
    Elaboratetree.Error {name = "BadProvider"; number = 3; fields = []};
    Elaboratetree.Mask {name = "Rotation";
      items =
      [("Rotate_0", 0); ("Rotate_90", 1); ("Rotate_180", 2);
        ("Rotate_270", 3); ("Reflect_X", 4); ("Reflect_Y", 5)];
      additional_values = []};
    Elaboratetree.Struct {name = "ScreenSize";
      fields =
      [Elaboratetree.Field {name = "width";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "mwidth";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "mheight";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "RefreshRates";
      fields =
      [Elaboratetree.Field_list_length {name = "nRates";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
         expr = (Elaboratetree.Field_ref "nRates")};
        Elaboratetree.Field_list_simple {name = "rates";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length = "nRates"}
        ]};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "major_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "minor_version";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false}
              ])};
    Elaboratetree.Enum {name = "SetConfig";
      items =
      [("Success", 0L); ("InvalidConfigTime", 1L); ("InvalidTime", 2L);
        ("Failed", 3L)]};
    Elaboratetree.Request {name = "SetScreenConfig"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "config_timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "sizeID";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "rotation";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "randr";
                       id_name = "Rotation" }))
            }};
        Elaboratetree.Field {name = "rate";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "status";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed =
                 (Some (Elaboratetree.Allowed_enum
                          { Elaboratetree.id_module = "randr";
                            id_name = "SetConfig" }))
                 }};
              Elaboratetree.Field {name = "new_timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "config_timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "root";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "WINDOW"
                       });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "subpixel_order";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "render";
                             id_name = "SubPixel" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 10);
                serialize = false}
              ])};
    Elaboratetree.Mask {name = "NotifyMask";
      items =
      [("ScreenChange", 0); ("CrtcChange", 1); ("OutputChange", 2);
        ("OutputProperty", 3); ("ProviderChange", 4);
        ("ProviderProperty", 5); ("ResourceChange", 6); ("Lease", 7)];
      additional_values = []};
    Elaboratetree.Request {name = "SelectInput"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "enable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "randr";
                       id_name = "NotifyMask" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetScreenInfo"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "rotations";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed =
                 (Some (Elaboratetree.Allowed_mask
                          { Elaboratetree.id_module = "randr";
                            id_name = "Rotation" }))
                 }};
              Elaboratetree.Field {name = "root";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "WINDOW"
                       });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "config_timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "nSizes";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "nSizes")};
              Elaboratetree.Field {name = "sizeID";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "rotation";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_mask
                           { Elaboratetree.id_module = "randr";
                             id_name = "Rotation" }))
                  }};
              Elaboratetree.Field {name = "rate";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "nInfo";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "sizes";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr";
                       id_name = "ScreenSize" });
                  ft_allowed = None };
                length = "nSizes"};
              Elaboratetree.Field_list {name = "rates";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr";
                       id_name = "RefreshRates" });
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Sub,
                         (Elaboratetree.Field_ref "nInfo"),
                         (Elaboratetree.Field_ref "nSizes"))))}
              ])};
    Elaboratetree.Request {name = "GetScreenSizeRange"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "min_width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "min_height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "max_width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "max_height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "SetScreenSize"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "mm_width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "mm_height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Mask {name = "ModeFlag";
      items =
      [("HsyncPositive", 0); ("HsyncNegative", 1); ("VsyncPositive", 2);
        ("VsyncNegative", 3); ("Interlace", 4); ("DoubleScan", 5);
        ("Csync", 6); ("CsyncPositive", 7); ("CsyncNegative", 8);
        ("HskewPresent", 9); ("Bcast", 10); ("PixelMultiplex", 11);
        ("DoubleClock", 12); ("HalveClock", 13)];
      additional_values = []};
    Elaboratetree.Struct {name = "ModeInfo";
      fields =
      [Elaboratetree.Field {name = "id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "dot_clock";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hsync_start";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hsync_end";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "htotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hskew";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vsync_start";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vsync_end";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vtotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "name_len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "mode_flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "randr";
                       id_name = "ModeFlag" }))
            }}
        ]};
    Elaboratetree.Request {name = "GetScreenResources"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "config_timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "num_crtcs";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_crtcs")};
              Elaboratetree.Field_list_length {name = "num_outputs";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_outputs")};
              Elaboratetree.Field_list_length {name = "num_modes";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_modes")};
              Elaboratetree.Field_list_length {name = "names_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "names_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "crtcs";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
                  ft_allowed = None };
                length = "num_crtcs"};
              Elaboratetree.Field_list_simple {name = "outputs";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr"; id_name = "OUTPUT"
                       });
                  ft_allowed = None };
                length = "num_outputs"};
              Elaboratetree.Field_list_simple {name = "modes";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr";
                       id_name = "ModeInfo" });
                  ft_allowed = None };
                length = "num_modes"};
              Elaboratetree.Field_list_simple {name = "names";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length = "names_len"}
              ])};
    Elaboratetree.Enum {name = "Connection";
      items = [("Connected", 0L); ("Disconnected", 1L); ("Unknown", 2L)]};
    Elaboratetree.Request {name = "GetOutputInfo"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "output";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "OUTPUT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "config_timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "status";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed =
                 (Some (Elaboratetree.Allowed_enum
                          { Elaboratetree.id_module = "randr";
                            id_name = "SetConfig" }))
                 }};
              Elaboratetree.Field {name = "timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "crtc";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "mm_width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "mm_height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "connection";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "randr";
                             id_name = "Connection" }))
                  }};
              Elaboratetree.Field {name = "subpixel_order";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "render";
                             id_name = "SubPixel" }))
                  }};
              Elaboratetree.Field_list_length {name = "num_crtcs";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_crtcs")};
              Elaboratetree.Field_list_length {name = "num_modes";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_modes")};
              Elaboratetree.Field {name = "num_preferred";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "num_clones";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_clones")};
              Elaboratetree.Field_list_length {name = "name_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "name_len")};
              Elaboratetree.Field_list_simple {name = "crtcs";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
                  ft_allowed = None };
                length = "num_crtcs"};
              Elaboratetree.Field_list_simple {name = "modes";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr"; id_name = "MODE" });
                  ft_allowed = None };
                length = "num_modes"};
              Elaboratetree.Field_list_simple {name = "clones";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr"; id_name = "OUTPUT"
                       });
                  ft_allowed = None };
                length = "num_clones"};
              Elaboratetree.Field_list_simple {name = "name";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length = "name_len"}
              ])};
    Elaboratetree.Request {name = "ListOutputProperties"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "output";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "OUTPUT" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_atoms";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_atoms")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "atoms";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
                  ft_allowed = None };
                length = "num_atoms"}
              ])};
    Elaboratetree.Request {name = "QueryOutputProperty"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "output";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "OUTPUT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "pending";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "range";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "immutable";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 21);
                serialize = false};
              Elaboratetree.Field_list {name = "validValues";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = (Some (Elaboratetree.Field_ref "length"))}
              ])};
    Elaboratetree.Request {name = "ConfigureOutputProperty"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "output";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "OUTPUT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "pending";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field {name = "range";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list {name = "values";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "ChangeOutputProperty"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "output";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "OUTPUT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "PropMode" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "num_units";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_list {name = "data";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Void); ft_allowed = None
            };
          length =
          (Some (Elaboratetree.Binop (Parsetree.Div,
                   (Elaboratetree.Binop (Parsetree.Mul,
                      (Elaboratetree.Field_ref "num_units"),
                      (Elaboratetree.Field_ref "format"))),
                   (Elaboratetree.Expr_value 8L))))}
        ];
      reply = None};
    Elaboratetree.Request {name = "DeleteOutputProperty"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "output";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "OUTPUT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetOutputProperty"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "output";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "OUTPUT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "GetPropertyType" }))
            }};
        Elaboratetree.Field {name = "long_offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "long_length";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "delete";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field {name = "pending";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "format";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "type";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_alt_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "Atom" }))
                  }};
              Elaboratetree.Field {name = "bytes_after";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "num_items";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "num_items"),
                         (Elaboratetree.Binop (Parsetree.Div,
                            (Elaboratetree.Field_ref "format"),
                            (Elaboratetree.Expr_value 8L)))
                         )))}
              ])};
    Elaboratetree.Request {name = "CreateMode"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "mode_info";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "ModeInfo" });
            ft_allowed = None }};
        Elaboratetree.Field_list {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = None}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "mode";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr"; id_name = "MODE" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "DestroyMode"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "mode";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "MODE" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "AddOutputMode"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "output";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "OUTPUT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "MODE" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "DeleteOutputMode"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "output";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "OUTPUT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "MODE" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetCrtcInfo"; opcode = 20;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "crtc";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "config_timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "status";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed =
                 (Some (Elaboratetree.Allowed_enum
                          { Elaboratetree.id_module = "randr";
                            id_name = "SetConfig" }))
                 }};
              Elaboratetree.Field {name = "timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "x";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "y";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "mode";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr"; id_name = "MODE" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "rotation";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_mask
                           { Elaboratetree.id_module = "randr";
                             id_name = "Rotation" }))
                  }};
              Elaboratetree.Field {name = "rotations";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_mask
                           { Elaboratetree.id_module = "randr";
                             id_name = "Rotation" }))
                  }};
              Elaboratetree.Field_list_length {name = "num_outputs";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_outputs")};
              Elaboratetree.Field_list_length {name = "num_possible_outputs";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_possible_outputs")};
              Elaboratetree.Field_list_simple {name = "outputs";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr"; id_name = "OUTPUT"
                       });
                  ft_allowed = None };
                length = "num_outputs"};
              Elaboratetree.Field_list_simple {name = "possible";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr"; id_name = "OUTPUT"
                       });
                  ft_allowed = None };
                length = "num_possible_outputs"}
              ])};
    Elaboratetree.Request {name = "SetCrtcConfig"; opcode = 21;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "crtc";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "config_timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "MODE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "rotation";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "randr";
                       id_name = "Rotation" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list {name = "outputs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "OUTPUT" });
            ft_allowed = None };
          length = None}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "status";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed =
                 (Some (Elaboratetree.Allowed_enum
                          { Elaboratetree.id_module = "randr";
                            id_name = "SetConfig" }))
                 }};
              Elaboratetree.Field {name = "timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "GetCrtcGammaSize"; opcode = 22;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "crtc";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "size";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "GetCrtcGamma"; opcode = 23;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "crtc";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "size";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "size")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "red";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None };
                length = "size"};
              Elaboratetree.Field_list_simple {name = "green";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None };
                length = "size"};
              Elaboratetree.Field_list_simple {name = "blue";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None };
                length = "size"}
              ])};
    Elaboratetree.Request {name = "SetCrtcGamma"; opcode = 24;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "crtc";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "size";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "size")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "red";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length = "size"};
        Elaboratetree.Field_list_simple {name = "green";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length = "size"};
        Elaboratetree.Field_list_simple {name = "blue";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length = "size"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetScreenResourcesCurrent"; opcode = 25;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "config_timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "num_crtcs";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_crtcs")};
              Elaboratetree.Field_list_length {name = "num_outputs";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_outputs")};
              Elaboratetree.Field_list_length {name = "num_modes";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_modes")};
              Elaboratetree.Field_list_length {name = "names_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "names_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "crtcs";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
                  ft_allowed = None };
                length = "num_crtcs"};
              Elaboratetree.Field_list_simple {name = "outputs";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr"; id_name = "OUTPUT"
                       });
                  ft_allowed = None };
                length = "num_outputs"};
              Elaboratetree.Field_list_simple {name = "modes";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr";
                       id_name = "ModeInfo" });
                  ft_allowed = None };
                length = "num_modes"};
              Elaboratetree.Field_list_simple {name = "names";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length = "names_len"}
              ])};
    Elaboratetree.Mask {name = "Transform";
      items =
      [("Unit", 0); ("ScaleUp", 1); ("ScaleDown", 2); ("Projective", 3)];
      additional_values = []};
    Elaboratetree.Request {name = "SetCrtcTransform"; opcode = 26;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "crtc";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "transform";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "TRANSFORM" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "filter_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "filter_len")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "filter_name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "filter_len"};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
          serialize = false};
        Elaboratetree.Field_list {name = "filter_params";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetCrtcTransform"; opcode = 27;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "crtc";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "pending_transform";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "render";
                       id_name = "TRANSFORM" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "has_transforms";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
                serialize = false};
              Elaboratetree.Field {name = "current_transform";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "render";
                       id_name = "TRANSFORM" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_length {name = "pending_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "pending_len")};
              Elaboratetree.Field_list_length {name = "pending_nparams";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "pending_nparams")};
              Elaboratetree.Field_list_length {name = "current_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "current_len")};
              Elaboratetree.Field_list_length {name = "current_nparams";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "current_nparams")};
              Elaboratetree.Field_list_simple {name = "pending_filter_name";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "pending_len"};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "pending_params";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "render"; id_name = "FIXED"
                       });
                  ft_allowed = None };
                length = "pending_nparams"};
              Elaboratetree.Field_list_simple {name = "current_filter_name";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "current_len"};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "current_params";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "render"; id_name = "FIXED"
                       });
                  ft_allowed = None };
                length = "current_nparams"}
              ])};
    Elaboratetree.Request {name = "GetPanning"; opcode = 28;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "crtc";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "status";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed =
                 (Some (Elaboratetree.Allowed_enum
                          { Elaboratetree.id_module = "randr";
                            id_name = "SetConfig" }))
                 }};
              Elaboratetree.Field {name = "timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "left";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "top";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "track_left";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "track_top";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "track_width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "track_height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "border_left";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "border_top";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "border_right";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "border_bottom";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "SetPanning"; opcode = 29;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "crtc";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "left";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "top";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "track_left";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "track_top";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "track_width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "track_height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "border_left";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "border_top";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "border_right";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "border_bottom";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "status";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed =
                 (Some (Elaboratetree.Allowed_enum
                          { Elaboratetree.id_module = "randr";
                            id_name = "SetConfig" }))
                 }};
              Elaboratetree.Field {name = "timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "SetOutputPrimary"; opcode = 30;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "output";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "OUTPUT" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetOutputPrimary"; opcode = 31;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "output";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr"; id_name = "OUTPUT"
                       });
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "GetProviders"; opcode = 32;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "num_providers";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_providers")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 18);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "providers";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr";
                       id_name = "PROVIDER" });
                  ft_allowed = None };
                length = "num_providers"}
              ])};
    Elaboratetree.Mask {name = "ProviderCapability";
      items =
      [("SourceOutput", 0); ("SinkOutput", 1); ("SourceOffload", 2);
        ("SinkOffload", 3)];
      additional_values = []};
    Elaboratetree.Request {name = "GetProviderInfo"; opcode = 33;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "provider";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "PROVIDER" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "config_timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "status";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "capabilities";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_mask
                           { Elaboratetree.id_module = "randr";
                             id_name = "ProviderCapability" }))
                  }};
              Elaboratetree.Field_list_length {name = "num_crtcs";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_crtcs")};
              Elaboratetree.Field_list_length {name = "num_outputs";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_outputs")};
              Elaboratetree.Field_list_length {
                name = "num_associated_providers";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_associated_providers")};
              Elaboratetree.Field_list_length {name = "name_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "name_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "crtcs";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
                  ft_allowed = None };
                length = "num_crtcs"};
              Elaboratetree.Field_list_simple {name = "outputs";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr"; id_name = "OUTPUT"
                       });
                  ft_allowed = None };
                length = "num_outputs"};
              Elaboratetree.Field_list_simple {name = "associated_providers";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr";
                       id_name = "PROVIDER" });
                  ft_allowed = None };
                length = "num_associated_providers"};
              Elaboratetree.Field_list_simple {
                name = "associated_capability";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = "num_associated_providers"};
              Elaboratetree.Field_list_simple {name = "name";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "name_len"}
              ])};
    Elaboratetree.Request {name = "SetProviderOffloadSink"; opcode = 34;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "provider";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "PROVIDER" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "sink_provider";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "PROVIDER" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "config_timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "SetProviderOutputSource"; opcode = 35;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "provider";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "PROVIDER" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "source_provider";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "PROVIDER" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "config_timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "ListProviderProperties"; opcode = 36;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "provider";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "PROVIDER" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_atoms";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_atoms")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "atoms";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
                  ft_allowed = None };
                length = "num_atoms"}
              ])};
    Elaboratetree.Request {name = "QueryProviderProperty"; opcode = 37;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "provider";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "PROVIDER" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "pending";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "range";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "immutable";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 21);
                serialize = false};
              Elaboratetree.Field_list {name = "valid_values";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None };
                length = (Some (Elaboratetree.Field_ref "length"))}
              ])};
    Elaboratetree.Request {name = "ConfigureProviderProperty"; opcode = 38;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "provider";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "PROVIDER" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "pending";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field {name = "range";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list {name = "values";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "ChangeProviderProperty"; opcode = 39;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "provider";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "PROVIDER" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "num_items";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_list {name = "data";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Void); ft_allowed = None
            };
          length =
          (Some (Elaboratetree.Binop (Parsetree.Mul,
                   (Elaboratetree.Field_ref "num_items"),
                   (Elaboratetree.Binop (Parsetree.Div,
                      (Elaboratetree.Field_ref "format"),
                      (Elaboratetree.Expr_value 8L)))
                   )))}
        ];
      reply = None};
    Elaboratetree.Request {name = "DeleteProviderProperty"; opcode = 40;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "provider";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "PROVIDER" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetProviderProperty"; opcode = 41;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "provider";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "PROVIDER" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "long_offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "long_length";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "delete";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field {name = "pending";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "format";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "type";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "bytes_after";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "num_items";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Void);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "num_items"),
                         (Elaboratetree.Binop (Parsetree.Div,
                            (Elaboratetree.Field_ref "format"),
                            (Elaboratetree.Expr_value 8L)))
                         )))}
              ])};
    Elaboratetree.Event {name = "ScreenChangeNotify"; number = 0;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "rotation";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_mask
                    { Elaboratetree.id_module = "randr"; id_name = "Rotation"
                      }))
           }};
        Elaboratetree.Field {name = "timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "config_timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "root";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "request_window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "sizeID";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "subpixel_order";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "render";
                       id_name = "SubPixel" }))
            }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "mwidth";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "mheight";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Elaboratetree.Enum {name = "Notify";
      items =
      [("CrtcChange", 0L); ("OutputChange", 1L); ("OutputProperty", 2L);
        ("ProviderChange", 3L); ("ProviderProperty", 4L);
        ("ResourceChange", 5L); ("Lease", 6L)]};
    Elaboratetree.Struct {name = "CrtcChange";
      fields =
      [Elaboratetree.Field {name = "timestamp";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "crtc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "MODE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "rotation";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "randr";
                       id_name = "Rotation" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "OutputChange";
      fields =
      [Elaboratetree.Field {name = "timestamp";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "config_timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "output";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "OUTPUT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "crtc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "MODE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "rotation";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "randr";
                       id_name = "Rotation" }))
            }};
        Elaboratetree.Field {name = "connection";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "randr";
                       id_name = "Connection" }))
            }};
        Elaboratetree.Field {name = "subpixel_order";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "render";
                       id_name = "SubPixel" }))
            }}
        ]};
    Elaboratetree.Struct {name = "OutputProperty";
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "output";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "OUTPUT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "atom";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "status";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "Property" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 11);
          serialize = false}
        ]};
    Elaboratetree.Struct {name = "ProviderChange";
      fields =
      [Elaboratetree.Field {name = "timestamp";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "provider";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "PROVIDER" });
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
          serialize = false}
        ]};
    Elaboratetree.Struct {name = "ProviderProperty";
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "provider";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "PROVIDER" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "atom";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "state";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 11);
          serialize = false}
        ]};
    Elaboratetree.Struct {name = "ResourceChange";
      fields =
      [Elaboratetree.Field {name = "timestamp";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
          serialize = false}
        ]};
    Elaboratetree.Struct {name = "MonitorInfo";
      fields =
      [Elaboratetree.Field {name = "name";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "primary";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field {name = "automatic";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_list_length {name = "nOutput";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "nOutput")};
        Elaboratetree.Field {name = "x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "width_in_millimeters";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height_in_millimeters";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_list_simple {name = "outputs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "OUTPUT" });
            ft_allowed = None };
          length = "nOutput"}
        ]};
    Elaboratetree.Request {name = "GetMonitors"; opcode = 42;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "get_active";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "timestamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "nMonitors";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "nMonitors")};
              Elaboratetree.Field {name = "nOutputs";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "monitors";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "randr";
                       id_name = "MonitorInfo" });
                  ft_allowed = None };
                length = "nMonitors"}
              ])};
    Elaboratetree.Request {name = "SetMonitor"; opcode = 43;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "monitorinfo";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "MonitorInfo" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "DeleteMonitor"; opcode = 44;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateLease"; opcode = 45;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "lid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "LEASE" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_crtcs";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_crtcs")};
        Elaboratetree.Field_list_length {name = "num_outputs";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_outputs")};
        Elaboratetree.Field_list_simple {name = "crtcs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "CRTC" });
            ft_allowed = None };
          length = "num_crtcs"};
        Elaboratetree.Field_list_simple {name = "outputs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "OUTPUT" });
            ft_allowed = None };
          length = "num_outputs"}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "nfd";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              (Elaboratetree.Field_file_descriptor "master_fd");
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "FreeLease"; opcode = 46;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "lid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "randr"; id_name = "LEASE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "terminate";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
            }}
        ];
      reply = None};
    Elaboratetree.Struct {name = "LeaseNotify";
      fields =
      [Elaboratetree.Field {name = "timestamp";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "lease";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "randr"; id_name = "LEASE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "created";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 15);
          serialize = false}
        ]};
    Elaboratetree.Variant {name = "Notify";
      items =
      [{ Elaboratetree.vi_name = "CrtcChange"; vi_tag = 0L;
         vi_fields =
         [Elaboratetree.Field {name = "cc";
            type_ =
            { Elaboratetree.ft_type =
              (Elaboratetree.Type_ref
                 { Elaboratetree.id_module = "randr"; id_name = "CrtcChange"
                   });
              ft_allowed = None }}
           ]
         };
        { Elaboratetree.vi_name = "OutputChange"; vi_tag = 1L;
          vi_fields =
          [Elaboratetree.Field {name = "oc";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_ref
                  { Elaboratetree.id_module = "randr";
                    id_name = "OutputChange" });
               ft_allowed = None }}
            ]
          };
        { Elaboratetree.vi_name = "OutputProperty"; vi_tag = 2L;
          vi_fields =
          [Elaboratetree.Field {name = "op";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_ref
                  { Elaboratetree.id_module = "randr";
                    id_name = "OutputProperty" });
               ft_allowed = None }}
            ]
          };
        { Elaboratetree.vi_name = "ProviderChange"; vi_tag = 3L;
          vi_fields =
          [Elaboratetree.Field {name = "pc";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_ref
                  { Elaboratetree.id_module = "randr";
                    id_name = "ProviderChange" });
               ft_allowed = None }}
            ]
          };
        { Elaboratetree.vi_name = "ProviderProperty"; vi_tag = 4L;
          vi_fields =
          [Elaboratetree.Field {name = "pp";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_ref
                  { Elaboratetree.id_module = "randr";
                    id_name = "ProviderProperty" });
               ft_allowed = None }}
            ]
          };
        { Elaboratetree.vi_name = "ResourceChange"; vi_tag = 5L;
          vi_fields =
          [Elaboratetree.Field {name = "rc";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_ref
                  { Elaboratetree.id_module = "randr";
                    id_name = "ResourceChange" });
               ft_allowed = None }}
            ]
          };
        { Elaboratetree.vi_name = "Lease"; vi_tag = 6L;
          vi_fields =
          [Elaboratetree.Field {name = "lc";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_ref
                  { Elaboratetree.id_module = "randr";
                    id_name = "LeaseNotify" });
               ft_allowed = None }}
            ]
          }
        ]};
    Elaboratetree.Event {name = "Notify"; number = 1; is_generic = false;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field_variant_tag {variant = "u";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
        Elaboratetree.Field_variant {name = "u";
          variant = { Elaboratetree.id_module = "randr"; id_name = "Notify" }}
        ]}
    ]}
Elaboratetree.Extension {name = "Record"; file_name = "record";
  query_name = "RECORD"; multiword = false; version = (1, 13); imports = [];
  declarations =
  [Elaboratetree.Type_alias {name = "CONTEXT";
     type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Struct {name = "Range8";
      fields =
      [Elaboratetree.Field {name = "first";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "last";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }}
        ]};
    Elaboratetree.Struct {name = "Range16";
      fields =
      [Elaboratetree.Field {name = "first";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field {name = "last";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "ExtRange";
      fields =
      [Elaboratetree.Field {name = "major";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "record"; id_name = "Range8" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "minor";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "record"; id_name = "Range16" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "Range";
      fields =
      [Elaboratetree.Field {name = "core_requests";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "record"; id_name = "Range8" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "core_replies";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "record"; id_name = "Range8" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "ext_requests";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "record"; id_name = "ExtRange" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "ext_replies";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "record"; id_name = "ExtRange" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "delivered_events";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "record"; id_name = "Range8" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "device_events";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "record"; id_name = "Range8" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "errors";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "record"; id_name = "Range8" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "client_started";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field {name = "client_died";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }}
        ]};
    Elaboratetree.Type_alias {name = "ElementHeader";
      type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
    Elaboratetree.Mask {name = "HType";
      items =
      [("FromServerTime", 0); ("FromClientTime", 1);
        ("FromClientSequence", 2)];
      additional_values = []};
    Elaboratetree.Type_alias {name = "ClientSpec";
      type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
    Elaboratetree.Enum {name = "CS";
      items =
      [("CurrentClients", 1L); ("FutureClients", 2L); ("AllClients", 3L)]};
    Elaboratetree.Struct {name = "ClientInfo";
      fields =
      [Elaboratetree.Field {name = "client_resource";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "record"; id_name = "ClientSpec" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_ranges";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "num_ranges")};
        Elaboratetree.Field_list_simple {name = "ranges";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "record"; id_name = "Range" });
            ft_allowed = None };
          length = "num_ranges"}
        ]};
    Elaboratetree.Error {name = "BadContext"; number = 0;
      fields =
      [Elaboratetree.Field {name = "invalid_record";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ]};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "major_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field {name = "minor_version";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "CreateContext"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "record"; id_name = "CONTEXT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "element_header";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "record";
                 id_name = "ElementHeader" });
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field_list_length {name = "num_client_specs";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "num_client_specs")};
        Elaboratetree.Field_list_length {name = "num_ranges";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "num_ranges")};
        Elaboratetree.Field_list_simple {name = "client_specs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "record"; id_name = "ClientSpec" });
            ft_allowed = None };
          length = "num_client_specs"};
        Elaboratetree.Field_list_simple {name = "ranges";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "record"; id_name = "Range" });
            ft_allowed = None };
          length = "num_ranges"}
        ];
      reply = None};
    Elaboratetree.Request {name = "RegisterClients"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "record"; id_name = "CONTEXT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "element_header";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "record";
                 id_name = "ElementHeader" });
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field_list_length {name = "num_client_specs";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "num_client_specs")};
        Elaboratetree.Field_list_length {name = "num_ranges";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "num_ranges")};
        Elaboratetree.Field_list_simple {name = "client_specs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "record"; id_name = "ClientSpec" });
            ft_allowed = None };
          length = "num_client_specs"};
        Elaboratetree.Field_list_simple {name = "ranges";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "record"; id_name = "Range" });
            ft_allowed = None };
          length = "num_ranges"}
        ];
      reply = None};
    Elaboratetree.Request {name = "UnregisterClients"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "record"; id_name = "CONTEXT" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_client_specs";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "num_client_specs")};
        Elaboratetree.Field_list_simple {name = "client_specs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "record"; id_name = "ClientSpec" });
            ft_allowed = None };
          length = "num_client_specs"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetContext"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "record"; id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "enabled";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Bool);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "element_header";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "record";
                       id_name = "ElementHeader" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
                serialize = false};
              Elaboratetree.Field_list_length {
                name = "num_intercepted_clients";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_intercepted_clients")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "intercepted_clients";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "record";
                       id_name = "ClientInfo" });
                  ft_allowed = None };
                length = "num_intercepted_clients"}
              ])};
    Elaboratetree.Request {name = "EnableContext"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "record"; id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "category";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "element_header";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "record";
                       id_name = "ElementHeader" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "client_swapped";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                serialize = false};
              Elaboratetree.Field {name = "xid_base";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "server_time";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "rec_sequence_num";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field_list {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "length"),
                         (Elaboratetree.Expr_value 4L))))}
              ])};
    Elaboratetree.Request {name = "DisableContext"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "record"; id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "FreeContext"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "record"; id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply = None}
    ]}
Elaboratetree.Extension {name = "Render"; file_name = "render";
  query_name = "RENDER"; multiword = false; version = (0, 11);
  imports = ["xproto"];
  declarations =
  [Elaboratetree.Enum {name = "PictType";
     items = [("Indexed", 0L); ("Direct", 1L)]};
    Elaboratetree.Enum {name = "Picture"; items = [("None", 0L)]};
    Elaboratetree.Enum {name = "PictOp";
      items =
      [("Clear", 0L); ("Src", 1L); ("Dst", 2L); ("Over", 3L);
        ("OverReverse", 4L); ("In", 5L); ("InReverse", 6L); ("Out", 7L);
        ("OutReverse", 8L); ("Atop", 9L); ("AtopReverse", 10L); ("Xor", 11L);
        ("Add", 12L); ("Saturate", 13L); ("DisjointClear", 16L);
        ("DisjointSrc", 17L); ("DisjointDst", 18L); ("DisjointOver", 19L);
        ("DisjointOverReverse", 20L); ("DisjointIn", 21L);
        ("DisjointInReverse", 22L); ("DisjointOut", 23L);
        ("DisjointOutReverse", 24L); ("DisjointAtop", 25L);
        ("DisjointAtopReverse", 26L); ("DisjointXor", 27L);
        ("ConjointClear", 32L); ("ConjointSrc", 33L); ("ConjointDst", 34L);
        ("ConjointOver", 35L); ("ConjointOverReverse", 36L);
        ("ConjointIn", 37L); ("ConjointInReverse", 38L);
        ("ConjointOut", 39L); ("ConjointOutReverse", 40L);
        ("ConjointAtop", 41L); ("ConjointAtopReverse", 42L);
        ("ConjointXor", 43L); ("Multiply", 48L); ("Screen", 49L);
        ("Overlay", 50L); ("Darken", 51L); ("Lighten", 52L);
        ("ColorDodge", 53L); ("ColorBurn", 54L); ("HardLight", 55L);
        ("SoftLight", 56L); ("Difference", 57L); ("Exclusion", 58L);
        ("HSLHue", 59L); ("HSLSaturation", 60L); ("HSLColor", 61L);
        ("HSLLuminosity", 62L)]};
    Elaboratetree.Enum {name = "PolyEdge";
      items = [("Sharp", 0L); ("Smooth", 1L)]};
    Elaboratetree.Enum {name = "PolyMode";
      items = [("Precise", 0L); ("Imprecise", 1L)]};
    Elaboratetree.Mask {name = "CP";
      items =
      [("Repeat", 0); ("AlphaMap", 1); ("AlphaXOrigin", 2);
        ("AlphaYOrigin", 3); ("ClipXOrigin", 4); ("ClipYOrigin", 5);
        ("ClipMask", 6); ("GraphicsExposure", 7); ("SubwindowMode", 8);
        ("PolyEdge", 9); ("PolyMode", 10); ("Dither", 11);
        ("ComponentAlpha", 12)];
      additional_values = []};
    Elaboratetree.Enum {name = "SubPixel";
      items =
      [("Unknown", 0L); ("HorizontalRGB", 1L); ("HorizontalBGR", 2L);
        ("VerticalRGB", 3L); ("VerticalBGR", 4L); ("None", 5L)]};
    Elaboratetree.Enum {name = "Repeat";
      items = [("None", 0L); ("Normal", 1L); ("Pad", 2L); ("Reflect", 3L)]};
    Elaboratetree.Type_alias {name = "GLYPH";
      type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
    Elaboratetree.Type_alias {name = "GLYPHSET";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "PICTURE";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "PICTFORMAT";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "FIXED";
      type_ = (Elaboratetree.Type_primitive Parsetree.Int32)};
    Elaboratetree.Error {name = "PictFormat"; number = 0; fields = []};
    Elaboratetree.Error {name = "Picture"; number = 1; fields = []};
    Elaboratetree.Error {name = "PictOp"; number = 2; fields = []};
    Elaboratetree.Error {name = "GlyphSet"; number = 3; fields = []};
    Elaboratetree.Error {name = "Glyph"; number = 4; fields = []};
    Elaboratetree.Struct {name = "DIRECTFORMAT";
      fields =
      [Elaboratetree.Field {name = "red_shift";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field {name = "red_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "green_shift";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "green_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "blue_shift";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "blue_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "alpha_shift";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "alpha_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "PICTFORMINFO";
      fields =
      [Elaboratetree.Field {name = "id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "PICTFORMAT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "render";
                       id_name = "PictType" }))
            }};
        Elaboratetree.Field {name = "depth";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "direct";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "DIRECTFORMAT"
                 });
            ft_allowed = None }};
        Elaboratetree.Field {name = "colormap";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "PICTVISUAL";
      fields =
      [Elaboratetree.Field {name = "visual";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "VISUALID" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTFORMAT" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "PICTDEPTH";
      fields =
      [Elaboratetree.Field {name = "depth";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field_list_length {name = "num_visuals";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_visuals")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "visuals";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTVISUAL" });
            ft_allowed = None };
          length = "num_visuals"}
        ]};
    Elaboratetree.Struct {name = "PICTSCREEN";
      fields =
      [Elaboratetree.Field_list_length {name = "num_depths";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
         expr = (Elaboratetree.Field_ref "num_depths")};
        Elaboratetree.Field {name = "fallback";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Elaboratetree.Field_list_simple {name = "depths";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTDEPTH" });
            ft_allowed = None };
          length = "num_depths"}
        ]};
    Elaboratetree.Struct {name = "INDEXVALUE";
      fields =
      [Elaboratetree.Field {name = "pixel";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "red";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "green";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "blue";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "alpha";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "COLOR";
      fields =
      [Elaboratetree.Field {name = "red";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field {name = "green";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "blue";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "alpha";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "POINTFIX";
      fields =
      [Elaboratetree.Field {name = "x";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "FIXED" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "LINEFIX";
      fields =
      [Elaboratetree.Field {name = "p1";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "POINTFIX" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "p2";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "POINTFIX" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "TRIANGLE";
      fields =
      [Elaboratetree.Field {name = "p1";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "POINTFIX" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "p2";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "POINTFIX" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "p3";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "POINTFIX" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "TRAPEZOID";
      fields =
      [Elaboratetree.Field {name = "top";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "FIXED" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "bottom";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "left";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "LINEFIX" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "right";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "LINEFIX" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "GLYPHINFO";
      fields =
      [Elaboratetree.Field {name = "width";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "x_off";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y_off";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }}
        ]};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "client_major_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "client_minor_version";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "QueryPictFormats"; opcode = 1;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_formats";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_formats")};
              Elaboratetree.Field_list_length {name = "num_screens";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_screens")};
              Elaboratetree.Field {name = "num_depths";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "num_visuals";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "num_subpixel";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_subpixel")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "formats";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "render";
                       id_name = "PICTFORMINFO" });
                  ft_allowed = None };
                length = "num_formats"};
              Elaboratetree.Field_list_simple {name = "screens";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "render";
                       id_name = "PICTSCREEN" });
                  ft_allowed = None };
                length = "num_screens"};
              Elaboratetree.Field_list_simple {name = "subpixels";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "render";
                             id_name = "SubPixel" }))
                  };
                length = "num_subpixel"}
              ])};
    Elaboratetree.Request {name = "QueryPictIndexValues"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "format";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "PICTFORMAT" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_values";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_values")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "values";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "render";
                       id_name = "INDEXVALUE" });
                  ft_allowed = None };
                length = "num_values"}
              ])};
    Elaboratetree.Request {name = "CreatePicture"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "pid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Elaboratetree.Field_optional_mask {name = "value_mask";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
        Elaboratetree.Field_optional {name = "repeat"; mask = "value_mask";
          bit = 0;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "render"; id_name = "Repeat"
                       }))
            }};
        Elaboratetree.Field_optional {name = "alphamap"; mask = "value_mask";
          bit = 1;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "alphaxorigin";
          mask = "value_mask"; bit = 2;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field_optional {name = "alphayorigin";
          mask = "value_mask"; bit = 3;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field_optional {name = "clipxorigin";
          mask = "value_mask"; bit = 4;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field_optional {name = "clipyorigin";
          mask = "value_mask"; bit = 5;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field_optional {name = "clipmask"; mask = "value_mask";
          bit = 6;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "graphicsexposure";
          mask = "value_mask"; bit = 7;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "subwindowmode";
          mask = "value_mask"; bit = 8;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "SubwindowMode" }))
            }};
        Elaboratetree.Field_optional {name = "polyedge"; mask = "value_mask";
          bit = 9;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "render";
                       id_name = "PolyEdge" }))
            }};
        Elaboratetree.Field_optional {name = "polymode"; mask = "value_mask";
          bit = 10;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "render";
                       id_name = "PolyMode" }))
            }};
        Elaboratetree.Field_optional {name = "dither"; mask = "value_mask";
          bit = 11;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "componentalpha";
          mask = "value_mask"; bit = 12;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "ChangePicture"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "picture";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
           ft_allowed = None }};
        Elaboratetree.Field_optional_mask {name = "value_mask";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
        Elaboratetree.Field_optional {name = "repeat"; mask = "value_mask";
          bit = 0;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "render"; id_name = "Repeat"
                       }))
            }};
        Elaboratetree.Field_optional {name = "alphamap"; mask = "value_mask";
          bit = 1;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "alphaxorigin";
          mask = "value_mask"; bit = 2;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field_optional {name = "alphayorigin";
          mask = "value_mask"; bit = 3;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field_optional {name = "clipxorigin";
          mask = "value_mask"; bit = 4;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field_optional {name = "clipyorigin";
          mask = "value_mask"; bit = 5;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field_optional {name = "clipmask"; mask = "value_mask";
          bit = 6;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "graphicsexposure";
          mask = "value_mask"; bit = 7;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "subwindowmode";
          mask = "value_mask"; bit = 8;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "SubwindowMode" }))
            }};
        Elaboratetree.Field_optional {name = "polyedge"; mask = "value_mask";
          bit = 9;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "render";
                       id_name = "PolyEdge" }))
            }};
        Elaboratetree.Field_optional {name = "polymode"; mask = "value_mask";
          bit = 10;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "render";
                       id_name = "PolyMode" }))
            }};
        Elaboratetree.Field_optional {name = "dither"; mask = "value_mask";
          bit = 11;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "componentalpha";
          mask = "value_mask"; bit = 12;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "SetPictureClipRectangles"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "picture";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "clip_x_origin";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "clip_y_origin";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field_list {name = "rectangles";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "RECTANGLE" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "FreePicture"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "picture";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "Composite"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "op";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "render"; id_name = "PictOp"
                      }))
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "src";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "render";
                       id_name = "Picture" }))
            }};
        Elaboratetree.Field {name = "dst";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "src_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "mask_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "mask_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "dst_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "dst_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "Trapezoids"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "op";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "render"; id_name = "PictOp"
                      }))
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "src";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "dst";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "mask_format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "src_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field_list {name = "traps";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "TRAPEZOID" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "Triangles"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "op";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "render"; id_name = "PictOp"
                      }))
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "src";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "dst";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "mask_format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "src_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field_list {name = "triangles";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "TRIANGLE" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "TriStrip"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "op";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "render"; id_name = "PictOp"
                      }))
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "src";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "dst";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "mask_format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "src_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field_list {name = "points";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "POINTFIX" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "TriFan"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "op";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "render"; id_name = "PictOp"
                      }))
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "src";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "dst";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "mask_format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "src_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field_list {name = "points";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "POINTFIX" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateGlyphSet"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "gsid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "GLYPHSET" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTFORMAT" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "ReferenceGlyphSet"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "gsid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "GLYPHSET" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "existing";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "GLYPHSET" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "FreeGlyphSet"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "glyphset";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "GLYPHSET" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "AddGlyphs"; opcode = 20;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "glyphset";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "GLYPHSET" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "glyphs_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "glyphs_len")};
        Elaboratetree.Field_list_simple {name = "glyphids";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "glyphs_len"};
        Elaboratetree.Field_list_simple {name = "glyphs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "GLYPHINFO" });
            ft_allowed = None };
          length = "glyphs_len"};
        Elaboratetree.Field_list {name = "data";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
            };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "FreeGlyphs"; opcode = 22;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "glyphset";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "GLYPHSET" });
           ft_allowed = None }};
        Elaboratetree.Field_list {name = "glyphs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "GLYPH" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "CompositeGlyphs8"; opcode = 23;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "op";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "render"; id_name = "PictOp"
                      }))
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "src";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "dst";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "mask_format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "glyphset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "GLYPHSET" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "src_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field_list {name = "glyphcmds";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
            };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "CompositeGlyphs16"; opcode = 24;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "op";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "render"; id_name = "PictOp"
                      }))
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "src";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "dst";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "mask_format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "glyphset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "GLYPHSET" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "src_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field_list {name = "glyphcmds";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
            };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "CompositeGlyphs32"; opcode = 25;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "op";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "render"; id_name = "PictOp"
                      }))
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "src";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "dst";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "mask_format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTFORMAT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "glyphset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "GLYPHSET" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "src_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field_list {name = "glyphcmds";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
            };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "FillRectangles"; opcode = 26;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "op";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "render"; id_name = "PictOp"
                      }))
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "dst";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "color";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "COLOR" });
            ft_allowed = None }};
        Elaboratetree.Field_list {name = "rects";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "RECTANGLE" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateCursor"; opcode = 27;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "cid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "source";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Struct {name = "TRANSFORM";
      fields =
      [Elaboratetree.Field {name = "matrix11";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "FIXED" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "matrix12";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "matrix13";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "matrix21";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "matrix22";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "matrix23";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "matrix31";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "matrix32";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "matrix33";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Request {name = "SetPictureTransform"; opcode = 28;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "picture";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "transform";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "TRANSFORM" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "QueryFilters"; opcode = 29;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_aliases";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_aliases")};
              Elaboratetree.Field_list_length {name = "num_filters";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_filters")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "aliases";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None };
                length = "num_aliases"};
              Elaboratetree.Field_list_simple {name = "filters";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "STR" });
                  ft_allowed = None };
                length = "num_filters"}
              ])};
    Elaboratetree.Request {name = "SetPictureFilter"; opcode = 30;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "picture";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "filter_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "filter_len")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "filter";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "filter_len"};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
          serialize = false};
        Elaboratetree.Field_list {name = "values";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Struct {name = "ANIMCURSORELT";
      fields =
      [Elaboratetree.Field {name = "cursor";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "delay";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Request {name = "CreateAnimCursor"; opcode = 31;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "cid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
           ft_allowed = None }};
        Elaboratetree.Field_list {name = "cursors";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render";
                 id_name = "ANIMCURSORELT" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Struct {name = "SPANFIX";
      fields =
      [Elaboratetree.Field {name = "l";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "FIXED" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "r";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "TRAP";
      fields =
      [Elaboratetree.Field {name = "top";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "SPANFIX" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "bot";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "SPANFIX" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Request {name = "AddTraps"; opcode = 32;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "picture";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "x_off";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y_off";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field_list {name = "traps";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "TRAP" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateSolidFill"; opcode = 33;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "picture";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "color";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "COLOR" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateLinearGradient"; opcode = 34;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "picture";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "p1";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "POINTFIX" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "p2";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "POINTFIX" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_stops";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "num_stops")};
        Elaboratetree.Field_list_simple {name = "stops";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None };
          length = "num_stops"};
        Elaboratetree.Field_list_simple {name = "colors";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "COLOR" });
            ft_allowed = None };
          length = "num_stops"}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateRadialGradient"; opcode = 35;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "picture";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "inner";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "POINTFIX" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "outer";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "POINTFIX" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "inner_radius";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "outer_radius";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_stops";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "num_stops")};
        Elaboratetree.Field_list_simple {name = "stops";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None };
          length = "num_stops"};
        Elaboratetree.Field_list_simple {name = "colors";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "COLOR" });
            ft_allowed = None };
          length = "num_stops"}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateConicalGradient"; opcode = 36;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "picture";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "center";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "POINTFIX" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "angle";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_stops";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "num_stops")};
        Elaboratetree.Field_list_simple {name = "stops";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "FIXED" });
            ft_allowed = None };
          length = "num_stops"};
        Elaboratetree.Field_list_simple {name = "colors";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "COLOR" });
            ft_allowed = None };
          length = "num_stops"}
        ];
      reply = None}
    ]}
Elaboratetree.Extension {name = "Res"; file_name = "res";
  query_name = "X-Resource"; multiword = false; version = (1, 2);
  imports = ["xproto"];
  declarations =
  [Elaboratetree.Struct {name = "Client";
     fields =
     [Elaboratetree.Field {name = "resource_base";
        type_ =
        { Elaboratetree.ft_type =
          (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
          }};
       Elaboratetree.Field {name = "resource_mask";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
       ]};
    Elaboratetree.Struct {name = "Type";
      fields =
      [Elaboratetree.Field {name = "resource_type";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "count";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Mask {name = "ClientIdMask";
      items = [("ClientXID", 0); ("LocalClientPID", 1)];
      additional_values = []};
    Elaboratetree.Struct {name = "ClientIdSpec";
      fields =
      [Elaboratetree.Field {name = "client";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "res";
                       id_name = "ClientIdMask" }))
            }}
        ]};
    Elaboratetree.Struct {name = "ClientIdValue";
      fields =
      [Elaboratetree.Field {name = "spec";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "res"; id_name = "ClientIdSpec" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "length";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr =
          (Elaboratetree.Binop (Parsetree.Mul,
             (Elaboratetree.Field_ref "length"),
             (Elaboratetree.Expr_value 4L)))};
        Elaboratetree.Field_list_simple {name = "value";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "length"}
        ]};
    Elaboratetree.Struct {name = "ResourceIdSpec";
      fields =
      [Elaboratetree.Field {name = "resource";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "ResourceSizeSpec";
      fields =
      [Elaboratetree.Field {name = "spec";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "res"; id_name = "ResourceIdSpec" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "bytes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "ref_count";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "use_count";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "ResourceSizeValue";
      fields =
      [Elaboratetree.Field {name = "size";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "res"; id_name = "ResourceSizeSpec"
                });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_cross_references";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "num_cross_references")};
        Elaboratetree.Field_list_simple {name = "cross_references";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "res";
                 id_name = "ResourceSizeSpec" });
            ft_allowed = None };
          length = "num_cross_references"}
        ]};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "client_major";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "client_minor";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "server_major";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "server_minor";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "QueryClients"; opcode = 1;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_clients";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_clients")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "clients";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "res"; id_name = "Client" });
                  ft_allowed = None };
                length = "num_clients"}
              ])};
    Elaboratetree.Request {name = "QueryClientResources"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "xid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_types";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_types")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "types";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "res"; id_name = "Type" });
                  ft_allowed = None };
                length = "num_types"}
              ])};
    Elaboratetree.Request {name = "QueryClientPixmapBytes"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "xid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "bytes";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "bytes_overflow";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "QueryClientIds"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field_list_length {name = "num_specs";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
         expr = (Elaboratetree.Field_ref "num_specs")};
        Elaboratetree.Field_list_simple {name = "specs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "res"; id_name = "ClientIdSpec" });
            ft_allowed = None };
          length = "num_specs"}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_ids";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_ids")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "ids";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "res";
                       id_name = "ClientIdValue" });
                  ft_allowed = None };
                length = "num_ids"}
              ])};
    Elaboratetree.Request {name = "QueryResourceBytes"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "client";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field_list_length {name = "num_specs";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "num_specs")};
        Elaboratetree.Field_list_simple {name = "specs";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "res"; id_name = "ResourceIdSpec"
                 });
            ft_allowed = None };
          length = "num_specs"}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_sizes";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_sizes")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "sizes";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "res";
                       id_name = "ResourceSizeValue" });
                  ft_allowed = None };
                length = "num_sizes"}
              ])}
    ]}
Elaboratetree.Extension {name = "ScreenSaver"; file_name = "screensaver";
  query_name = "MIT-SCREEN-SAVER"; multiword = false; version = (1, 1);
  imports = ["xproto"];
  declarations =
  [Elaboratetree.Enum {name = "Kind";
     items = [("Blanked", 0L); ("Internal", 1L); ("External", 2L)]};
    Elaboratetree.Mask {name = "Event";
      items = [("NotifyMask", 0); ("CycleMask", 1)]; additional_values = []};
    Elaboratetree.Enum {name = "State";
      items = [("Off", 0L); ("On", 1L); ("Cycle", 2L); ("Disabled", 3L)]};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "client_major_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "client_minor_version";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "server_major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "server_minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "QueryInfo"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "state";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "saver_window";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "WINDOW"
                       });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "ms_until_server";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "ms_since_user_input";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "event_mask";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "kind";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "screensaver";
                             id_name = "Kind" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 7);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "SelectInput"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "event_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "screensaver";
                       id_name = "Event" }))
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "SetAttributes"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "border_width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "class";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "WindowClass" }))
            }};
        Elaboratetree.Field {name = "depth";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "visual";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "VISUALID" });
            ft_allowed = None }};
        Elaboratetree.Field_optional_mask {name = "value_mask";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
        Elaboratetree.Field_optional {name = "background_pixmap";
          mask = "value_mask"; bit = 0;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "BackPixmap" }))
            }};
        Elaboratetree.Field_optional {name = "background_pixel";
          mask = "value_mask"; bit = 1;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "border_pixmap";
          mask = "value_mask"; bit = 2;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Pixmap"
                       }))
            }};
        Elaboratetree.Field_optional {name = "border_pixel";
          mask = "value_mask"; bit = 3;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "bit_gravity";
          mask = "value_mask"; bit = 4;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "Gravity" }))
            }};
        Elaboratetree.Field_optional {name = "win_gravity";
          mask = "value_mask"; bit = 5;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "Gravity" }))
            }};
        Elaboratetree.Field_optional {name = "backing_store";
          mask = "value_mask"; bit = 6;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "BackingStore" }))
            }};
        Elaboratetree.Field_optional {name = "backing_planes";
          mask = "value_mask"; bit = 7;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "backing_pixel";
          mask = "value_mask"; bit = 8;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "override_redirect";
          mask = "value_mask"; bit = 9;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "BOOL32" });
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "save_under";
          mask = "value_mask"; bit = 10;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "BOOL32" });
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "event_mask";
          mask = "value_mask"; bit = 11;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xproto";
                       id_name = "EventMask" }))
            }};
        Elaboratetree.Field_optional {name = "do_not_propogate_mask";
          mask = "value_mask"; bit = 12;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xproto";
                       id_name = "EventMask" }))
            }};
        Elaboratetree.Field_optional {name = "colormap"; mask = "value_mask";
          bit = 13;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "Colormap" }))
            }};
        Elaboratetree.Field_optional {name = "cursor"; mask = "value_mask";
          bit = 14;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Cursor"
                       }))
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "UnsetAttributes"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "Suspend"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "suspend";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply = None};
    Elaboratetree.Event {name = "Notify"; number = 0; is_generic = false;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "state";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "screensaver";
                      id_name = "State" }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "root";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "kind";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "screensaver";
                       id_name = "Kind" }))
            }};
        Elaboratetree.Field {name = "forced";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 14);
          serialize = false}
        ]}
    ]}
Elaboratetree.Extension {name = "Shape"; file_name = "shape";
  query_name = "SHAPE"; multiword = false; version = (1, 1);
  imports = ["xproto"];
  declarations =
  [Elaboratetree.Type_alias {name = "OP";
     type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
    Elaboratetree.Type_alias {name = "KIND";
      type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
    Elaboratetree.Enum {name = "SO";
      items =
      [("Set", 0L); ("Union", 1L); ("Intersect", 2L); ("Subtract", 3L);
        ("Invert", 4L)]};
    Elaboratetree.Enum {name = "SK";
      items = [("Bounding", 0L); ("Clip", 1L); ("Input", 2L)]};
    Elaboratetree.Event {name = "Notify"; number = 0; is_generic = false;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "shape_kind";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "shape"; id_name = "KIND" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "shape"; id_name = "SK" }))
           }};
        Elaboratetree.Field {name = "affected_window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "extents_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "extents_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "extents_width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "extents_height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "server_time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "shaped";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 11);
          serialize = false}
        ]};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "Rectangles"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "operation";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "shape"; id_name = "OP" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "shape"; id_name = "SO" }))
           }};
        Elaboratetree.Field {name = "destination_kind";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "shape"; id_name = "KIND" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "shape"; id_name = "SK" }))
            }};
        Elaboratetree.Field {name = "ordering";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "ClipOrdering" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field {name = "destination_window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "x_offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y_offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field_list {name = "rectangles";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "RECTANGLE" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "Mask"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "operation";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "shape"; id_name = "OP" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "shape"; id_name = "SO" }))
           }};
        Elaboratetree.Field {name = "destination_kind";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "shape"; id_name = "KIND" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "shape"; id_name = "SK" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "destination_window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "x_offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y_offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "source_bitmap";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Pixmap"
                       }))
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "Combine"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "operation";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "shape"; id_name = "OP" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "shape"; id_name = "SO" }))
           }};
        Elaboratetree.Field {name = "destination_kind";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "shape"; id_name = "KIND" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "shape"; id_name = "SK" }))
            }};
        Elaboratetree.Field {name = "source_kind";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "shape"; id_name = "KIND" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "shape"; id_name = "SK" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field {name = "destination_window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "x_offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y_offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "source_window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "Offset"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "destination_kind";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "shape"; id_name = "KIND" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "shape"; id_name = "SK" }))
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "destination_window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "x_offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y_offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "QueryExtents"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "destination_window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "bounding_shaped";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "clip_shaped";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                serialize = false};
              Elaboratetree.Field {name = "bounding_shape_extents_x";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "bounding_shape_extents_y";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "bounding_shape_extents_width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "bounding_shape_extents_height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "clip_shape_extents_x";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "clip_shape_extents_y";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "clip_shape_extents_width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "clip_shape_extents_height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "SelectInput"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "destination_window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "enable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "InputSelected"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "destination_window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "enabled";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Bool);
                 ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "GetRectangles"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "source_kind";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "shape"; id_name = "KIND" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "shape"; id_name = "SK" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "ordering";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Byte);
                 ft_allowed =
                 (Some (Elaboratetree.Allowed_enum
                          { Elaboratetree.id_module = "xproto";
                            id_name = "ClipOrdering" }))
                 }};
              Elaboratetree.Field_list_length {name = "rectangles_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "rectangles_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "rectangles";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "RECTANGLE" });
                  ft_allowed = None };
                length = "rectangles_len"}
              ])}
    ]}
Elaboratetree.Extension {name = "Shm"; file_name = "shm";
  query_name = "MIT-SHM"; multiword = false; version = (1, 2);
  imports = ["xproto"];
  declarations =
  [Elaboratetree.Type_alias {name = "SEG";
     type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Event {name = "Completion"; number = 0; is_generic = false;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
         serialize = false};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "minor_event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "major_event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field {name = "shmseg";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "shm"; id_name = "SEG" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Error_copy {name = "BadSeg";
      error = { Elaboratetree.id_module = "xproto"; id_name = "Value" };
      number = 0};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field {name = "shared_pixmaps";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Bool);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "uid";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "gid";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "pixmap_format";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 15);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "Attach"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "shmseg";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "shm"; id_name = "SEG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "shmid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "read_only";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "Detach"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "shmseg";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "shm"; id_name = "SEG" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "PutImage"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "gc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "total_width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "total_height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "dst_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "dst_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "depth";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "send_event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field {name = "shmseg";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "shm"; id_name = "SEG" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetImage"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "plane_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "shmseg";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "shm"; id_name = "SEG" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "depth";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "visual";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "VISUALID" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "size";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "CreatePixmap"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "pid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "depth";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "shmseg";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "shm"; id_name = "SEG" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "AttachFd"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "shmseg";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "shm"; id_name = "SEG" });
           ft_allowed = None }};
        (Elaboratetree.Field_file_descriptor "shm_fd");
        Elaboratetree.Field {name = "read_only";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateSegment"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "shmseg";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "shm"; id_name = "SEG" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "size";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "read_only";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "nfd";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              (Elaboratetree.Field_file_descriptor "shm_fd");
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                serialize = false}
              ])}
    ]}
Elaboratetree.Extension {name = "Sync"; file_name = "sync";
  query_name = "SYNC"; multiword = false; version = (3, 1);
  imports = ["xproto"];
  declarations =
  [Elaboratetree.Type_alias {name = "ALARM";
     type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Enum {name = "ALARMSTATE";
      items = [("Active", 0L); ("Inactive", 1L); ("Destroyed", 2L)]};
    Elaboratetree.Type_alias {name = "COUNTER";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "FENCE";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Enum {name = "TESTTYPE";
      items =
      [("PositiveTransition", 0L); ("NegativeTransition", 1L);
        ("PositiveComparison", 2L); ("NegativeComparison", 3L)]};
    Elaboratetree.Enum {name = "VALUETYPE";
      items = [("Absolute", 0L); ("Relative", 1L)]};
    Elaboratetree.Mask {name = "CA";
      items =
      [("Counter", 0); ("ValueType", 1); ("Value", 2); ("TestType", 3);
        ("Delta", 4); ("Events", 5)];
      additional_values = []};
    Elaboratetree.Struct {name = "INT64";
      fields =
      [Elaboratetree.Field {name = "hi";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "lo";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "SYSTEMCOUNTER";
      fields =
      [Elaboratetree.Field {name = "counter";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "COUNTER" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "resolution";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "INT64" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "name_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "name_len")};
        Elaboratetree.Field_list_simple {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "name_len"};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
          serialize = false}
        ]};
    Elaboratetree.Struct {name = "TRIGGER";
      fields =
      [Elaboratetree.Field {name = "counter";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "COUNTER" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "wait_type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "sync";
                       id_name = "VALUETYPE" }))
            }};
        Elaboratetree.Field {name = "wait_value";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "INT64" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "test_type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "sync"; id_name = "TESTTYPE"
                       }))
            }}
        ]};
    Elaboratetree.Struct {name = "WAITCONDITION";
      fields =
      [Elaboratetree.Field {name = "trigger";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "TRIGGER" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "event_threshold";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "INT64" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Error {name = "Counter"; number = 0;
      fields =
      [Elaboratetree.Field {name = "bad_counter";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "minor_opcode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "major_opcode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }}
        ]};
    Elaboratetree.Error {name = "Alarm"; number = 1;
      fields =
      [Elaboratetree.Field {name = "bad_alarm";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "minor_opcode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "major_opcode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }}
        ]};
    Elaboratetree.Request {name = "Initialize"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "desired_major_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "desired_minor_version";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "ListSystemCounters"; opcode = 1;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "counters_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "counters_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "counters";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "sync";
                       id_name = "SYSTEMCOUNTER" });
                  ft_allowed = None };
                length = "counters_len"}
              ])};
    Elaboratetree.Request {name = "CreateCounter"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "COUNTER" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "initial_value";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "INT64" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "DestroyCounter"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "counter";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "COUNTER" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "QueryCounter"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "counter";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "COUNTER" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "counter_value";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "sync"; id_name = "INT64" });
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "Await"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field_list {name = "wait_list";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "WAITCONDITION" });
           ft_allowed = None };
         length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "ChangeCounter"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "counter";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "COUNTER" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "amount";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "INT64" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "SetCounter"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "counter";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "COUNTER" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "value";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "INT64" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateAlarm"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "ALARM" });
           ft_allowed = None }};
        Elaboratetree.Field_optional_mask {name = "value_mask";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
        Elaboratetree.Field_optional {name = "counter"; mask = "value_mask";
          bit = 0;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "COUNTER" });
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "valueType";
          mask = "value_mask"; bit = 1;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "sync";
                       id_name = "VALUETYPE" }))
            }};
        Elaboratetree.Field_optional {name = "value"; mask = "value_mask";
          bit = 2;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "INT64" });
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "testType"; mask = "value_mask";
          bit = 3;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "sync"; id_name = "TESTTYPE"
                       }))
            }};
        Elaboratetree.Field_optional {name = "delta"; mask = "value_mask";
          bit = 4;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "INT64" });
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "events"; mask = "value_mask";
          bit = 5;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "ChangeAlarm"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "ALARM" });
           ft_allowed = None }};
        Elaboratetree.Field_optional_mask {name = "value_mask";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
        Elaboratetree.Field_optional {name = "counter"; mask = "value_mask";
          bit = 0;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "COUNTER" });
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "valueType";
          mask = "value_mask"; bit = 1;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "sync";
                       id_name = "VALUETYPE" }))
            }};
        Elaboratetree.Field_optional {name = "value"; mask = "value_mask";
          bit = 2;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "INT64" });
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "testType"; mask = "value_mask";
          bit = 3;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "sync"; id_name = "TESTTYPE"
                       }))
            }};
        Elaboratetree.Field_optional {name = "delta"; mask = "value_mask";
          bit = 4;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "INT64" });
            ft_allowed = None }};
        Elaboratetree.Field_optional {name = "events"; mask = "value_mask";
          bit = 5;
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "DestroyAlarm"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "alarm";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "ALARM" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "QueryAlarm"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "alarm";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "ALARM" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "trigger";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "sync"; id_name = "TRIGGER"
                       });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "delta";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "sync"; id_name = "INT64" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "events";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "state";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "sync";
                             id_name = "ALARMSTATE" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "SetPriority"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "priority";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetPriority"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "priority";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "CreateFence"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "fence";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "FENCE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "initially_triggered";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "TriggerFence"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "fence";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "FENCE" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "ResetFence"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "fence";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "FENCE" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "DestroyFence"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "fence";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "FENCE" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "QueryFence"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "fence";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "FENCE" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "triggered";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "AwaitFence"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field_list {name = "fence_list";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "sync"; id_name = "FENCE" });
           ft_allowed = None };
         length = None}
        ];
      reply = None};
    Elaboratetree.Event {name = "CounterNotify"; number = 0;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "kind";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "counter";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "COUNTER" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "wait_value";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "INT64" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "counter_value";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "INT64" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "count";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "destroyed";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false}
        ]};
    Elaboratetree.Event {name = "AlarmNotify"; number = 1;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "kind";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "alarm";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "ALARM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "counter_value";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "INT64" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "alarm_value";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "sync"; id_name = "INT64" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "state";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "sync";
                       id_name = "ALARMSTATE" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ]}
    ]}
Elaboratetree.Extension {name = "XCMisc"; file_name = "xc_misc";
  query_name = "XC-MISC"; multiword = true; version = (1, 1); imports = [];
  declarations =
  [Elaboratetree.Request {name = "GetVersion"; opcode = 0;
     combine_adjacent = true;
     fields =
     [Elaboratetree.Field {name = "client_major_version";
        type_ =
        { Elaboratetree.ft_type =
          (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
          }};
       Elaboratetree.Field {name = "client_minor_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }}
       ];
     reply =
     (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
              serialize = false};
             Elaboratetree.Field {name = "server_major_version";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card16);
                 ft_allowed = None }};
             Elaboratetree.Field {name = "server_minor_version";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card16);
                 ft_allowed = None }}
             ])};
    Elaboratetree.Request {name = "GetXIDRange"; opcode = 1;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "start_id";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "count";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "GetXIDList"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "count";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "ids_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "ids_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "ids";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = "ids_len"}
              ])}
    ]}
Elaboratetree.Extension {name = "Xevie"; file_name = "xevie";
  query_name = "XEVIE"; multiword = false; version = (1, 0); imports = [];
  declarations =
  [Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
     combine_adjacent = true;
     fields =
     [Elaboratetree.Field {name = "client_major_version";
        type_ =
        { Elaboratetree.ft_type =
          (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
          }};
       Elaboratetree.Field {name = "client_minor_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }}
       ];
     reply =
     (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
              serialize = false};
             Elaboratetree.Field {name = "server_major_version";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card16);
                 ft_allowed = None }};
             Elaboratetree.Field {name = "server_minor_version";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card16);
                 ft_allowed = None }};
             Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
               serialize = false}
             ])};
    Elaboratetree.Request {name = "Start"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "End"; opcode = 2; combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "cmap";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                serialize = false}
              ])};
    Elaboratetree.Enum {name = "Datatype";
      items = [("Unmodified", 0L); ("Modified", 1L)]};
    Elaboratetree.Struct {name = "Event";
      fields =
      [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 32);
         serialize = false}
        ]};
    Elaboratetree.Request {name = "Send"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "event";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xevie"; id_name = "Event" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "data_type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 64);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "SelectInput"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "event_mask";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                serialize = false}
              ])}
    ]}
Elaboratetree.Extension {name = "XF86Dri"; file_name = "xf86dri";
  query_name = "XFree86-DRI"; multiword = false; version = (4, 1);
  imports = [];
  declarations =
  [Elaboratetree.Struct {name = "DrmClipRect";
     fields =
     [Elaboratetree.Field {name = "x1";
        type_ =
        { Elaboratetree.ft_type =
          (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None }};
       Elaboratetree.Field {name = "y1";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
           }};
       Elaboratetree.Field {name = "x2";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
           }};
       Elaboratetree.Field {name = "x3";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
           }}
       ]};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "dri_major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "dri_minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "dri_minor_patch";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "QueryDirectRenderingCapable"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "is_capable";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "OpenConnection"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "sarea_handle_low";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "sarea_handle_high";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "bus_id_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "bus_id_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "bus_id";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "bus_id_len"}
              ])};
    Elaboratetree.Request {name = "CloseConnection"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetClientDriverName"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "client_driver_major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "client_driver_minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "client_driver_patch_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {
                name = "client_driver_name_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "client_driver_name_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "client_driver_name";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "client_driver_name_len"}
              ])};
    Elaboratetree.Request {name = "CreateContext"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "visual";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "hw_context";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "DestroyContext"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateDrawable"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "hw_drawable_handle";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "DestroyDrawable"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetDrawableInfo"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "drawable_table_index";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "drawable_table_stamp";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "drawable_origin_X";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "drawable_origin_Y";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "drawable_size_W";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "drawable_size_H";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "num_clip_rects";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_clip_rects")};
              Elaboratetree.Field {name = "back_x";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "back_y";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "num_back_clip_rects";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_back_clip_rects")};
              Elaboratetree.Field_list_simple {name = "clip_rects";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xf86dri";
                       id_name = "DrmClipRect" });
                  ft_allowed = None };
                length = "num_clip_rects"};
              Elaboratetree.Field_list_simple {name = "back_clip_rects";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xf86dri";
                       id_name = "DrmClipRect" });
                  ft_allowed = None };
                length = "num_back_clip_rects"}
              ])};
    Elaboratetree.Request {name = "GetDeviceInfo"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "framebuffer_handle_low";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "framebuffer_handle_high";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "framebuffer_origin_offset";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "framebuffer_size";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "framebuffer_stride";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "device_private_size";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "device_private_size")};
              Elaboratetree.Field_list_simple {name = "device_private";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = "device_private_size"}
              ])};
    Elaboratetree.Request {name = "AuthConnection"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "magic";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "authenticated";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])}
    ]}
Elaboratetree.Extension {name = "XF86VidMode"; file_name = "xf86vidmode";
  query_name = "XFree86-VidModeExtension"; multiword = false;
  version = (2, 2); imports = [];
  declarations =
  [Elaboratetree.Type_alias {name = "SYNCRANGE";
     type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
    Elaboratetree.Type_alias {name = "DOTCLOCK";
      type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
    Elaboratetree.Mask {name = "ModeFlag";
      items =
      [("Positive_HSync", 0); ("Negative_HSync", 1); ("Positive_VSync", 2);
        ("Negative_VSync", 3); ("Interlace", 4); ("Composite_Sync", 5);
        ("Positive_CSync", 6); ("Negative_CSync", 7); ("HSkew", 8);
        ("Broadcast", 9); ("Pixmux", 10); ("Double_Clock", 11);
        ("Half_Clock", 12)];
      additional_values = []};
    Elaboratetree.Mask {name = "ClockFlag"; items = [("Programable", 0)];
      additional_values = []};
    Elaboratetree.Mask {name = "Permission";
      items = [("Read", 0); ("Write", 1)]; additional_values = []};
    Elaboratetree.Struct {name = "ModeInfo";
      fields =
      [Elaboratetree.Field {name = "dotclock";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xf86vidmode"; id_name = "DOTCLOCK"
                });
           ft_allowed = None }};
        Elaboratetree.Field {name = "hdisplay";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hsyncstart";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hsyncend";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "htotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hskew";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vdisplay";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vsyncstart";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vsyncend";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vtotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
          serialize = false};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xf86vidmode";
                       id_name = "ModeFlag" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false};
        Elaboratetree.Field {name = "privsize";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "GetModeLine"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "dotclock";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xf86vidmode";
                       id_name = "DOTCLOCK" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "hdisplay";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "hsyncstart";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "hsyncend";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "htotal";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "hskew";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "vdisplay";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "vsyncstart";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "vsyncend";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "vtotal";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                serialize = false};
              Elaboratetree.Field {name = "flags";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_mask
                           { Elaboratetree.id_module = "xf86vidmode";
                             id_name = "ModeFlag" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_length {name = "privsize";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "privsize")};
              Elaboratetree.Field_list_simple {name = "private";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None };
                length = "privsize"}
              ])};
    Elaboratetree.Request {name = "ModModeLine"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "hdisplay";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hsyncstart";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hsyncend";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "htotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hskew";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vdisplay";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vsyncstart";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vsyncend";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vtotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xf86vidmode";
                       id_name = "ModeFlag" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false};
        Elaboratetree.Field_list_length {name = "privsize";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "privsize")};
        Elaboratetree.Field_list_simple {name = "private";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = "privsize"}
        ];
      reply = None};
    Elaboratetree.Request {name = "SwitchMode"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field {name = "zoom";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetMonitor"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "vendor_length";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
                expr = (Elaboratetree.Field_ref "vendor_length")};
              Elaboratetree.Field_list_length {name = "model_length";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
                expr = (Elaboratetree.Field_ref "model_length")};
              Elaboratetree.Field_list_length {name = "num_hsync";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
                expr = (Elaboratetree.Field_ref "num_hsync")};
              Elaboratetree.Field_list_length {name = "num_vsync";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
                expr = (Elaboratetree.Field_ref "num_vsync")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "hsync";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xf86vidmode";
                       id_name = "SYNCRANGE" });
                  ft_allowed = None };
                length = "num_hsync"};
              Elaboratetree.Field_list_simple {name = "vsync";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xf86vidmode";
                       id_name = "SYNCRANGE" });
                  ft_allowed = None };
                length = "num_vsync"};
              Elaboratetree.Field_list_simple {name = "vendor";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "vendor_length"};
              Elaboratetree.Field_list {name = "alignment_pad";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Void);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Sub,
                         (Elaboratetree.Binop (Parsetree.Bit_and,
                            (Elaboratetree.Binop (Parsetree.Add,
                               (Elaboratetree.Field_ref "vendor_length"),
                               (Elaboratetree.Expr_value 3L))),
                            (Elaboratetree.Unop (Parsetree.Bit_not,
                               (Elaboratetree.Expr_value 3L)))
                            )),
                         (Elaboratetree.Field_ref "vendor_length"))))};
              Elaboratetree.Field_list_simple {name = "model";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "model_length"}
              ])};
    Elaboratetree.Request {name = "LockModeSwitch"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field {name = "lock";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetAllModeLines"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "modecount";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "modecount")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "modeinfo";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xf86vidmode";
                       id_name = "ModeInfo" });
                  ft_allowed = None };
                length = "modecount"}
              ])};
    Elaboratetree.Request {name = "AddModeLine"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "dotclock";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xf86vidmode";
                 id_name = "DOTCLOCK" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "hdisplay";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hsyncstart";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hsyncend";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "htotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hskew";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vdisplay";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vsyncstart";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vsyncend";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vtotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xf86vidmode";
                       id_name = "ModeFlag" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false};
        Elaboratetree.Field_list_length {name = "privsize";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "privsize")};
        Elaboratetree.Field {name = "after_dotclock";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xf86vidmode";
                 id_name = "DOTCLOCK" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "after_hdisplay";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "after_hsyncstart";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "after_hsyncend";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "after_htotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "after_hskew";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "after_vdisplay";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "after_vsyncstart";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "after_vsyncend";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "after_vtotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "after_flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xf86vidmode";
                       id_name = "ModeFlag" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "private";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = "privsize"}
        ];
      reply = None};
    Elaboratetree.Request {name = "DeleteModeLine"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "dotclock";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xf86vidmode";
                 id_name = "DOTCLOCK" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "hdisplay";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hsyncstart";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hsyncend";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "htotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hskew";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vdisplay";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vsyncstart";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vsyncend";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vtotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xf86vidmode";
                       id_name = "ModeFlag" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false};
        Elaboratetree.Field_list_length {name = "privsize";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "privsize")};
        Elaboratetree.Field_list_simple {name = "private";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = "privsize"}
        ];
      reply = None};
    Elaboratetree.Request {name = "ValidateModeLine"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "dotclock";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xf86vidmode";
                 id_name = "DOTCLOCK" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "hdisplay";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hsyncstart";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hsyncend";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "htotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hskew";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vdisplay";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vsyncstart";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vsyncend";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vtotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xf86vidmode";
                       id_name = "ModeFlag" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false};
        Elaboratetree.Field_list_length {name = "privsize";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "privsize")};
        Elaboratetree.Field_list_simple {name = "private";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = "privsize"}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "status";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "SwitchToMode"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "dotclock";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xf86vidmode";
                 id_name = "DOTCLOCK" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "hdisplay";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hsyncstart";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hsyncend";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "htotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "hskew";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vdisplay";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vsyncstart";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vsyncend";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vtotal";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xf86vidmode";
                       id_name = "ModeFlag" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false};
        Elaboratetree.Field_list_length {name = "privsize";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "privsize")};
        Elaboratetree.Field_list_simple {name = "private";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = "privsize"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetViewPort"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "x";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "y";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "SetViewPort"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetDotClocks"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "flags";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_mask
                           { Elaboratetree.id_module = "xf86vidmode";
                             id_name = "ClockFlag" }))
                  }};
              Elaboratetree.Field {name = "clocks";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "maxclocks";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list {name = "clock";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Binop (Parsetree.Sub,
                            (Elaboratetree.Expr_value 1L),
                            (Elaboratetree.Binop (Parsetree.Bit_and,
                               (Elaboratetree.Field_ref "flags"),
                               (Elaboratetree.Expr_value 1L)))
                            )),
                         (Elaboratetree.Field_ref "clocks"))))}
              ])};
    Elaboratetree.Request {name = "SetClientVersion"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "major";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field {name = "minor";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "SetGamma"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "red";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "green";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "blue";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetGamma"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 26);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "red";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "green";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "blue";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "GetGammaRamp"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field {name = "size";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "size";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false};
              Elaboratetree.Field_list {name = "red";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Bit_and,
                         (Elaboratetree.Binop (Parsetree.Add,
                            (Elaboratetree.Field_ref "size"),
                            (Elaboratetree.Expr_value 1L))),
                         (Elaboratetree.Unop (Parsetree.Bit_not,
                            (Elaboratetree.Expr_value 1L)))
                         )))};
              Elaboratetree.Field_list {name = "green";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Bit_and,
                         (Elaboratetree.Binop (Parsetree.Add,
                            (Elaboratetree.Field_ref "size"),
                            (Elaboratetree.Expr_value 1L))),
                         (Elaboratetree.Unop (Parsetree.Bit_not,
                            (Elaboratetree.Expr_value 1L)))
                         )))};
              Elaboratetree.Field_list {name = "blue";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Bit_and,
                         (Elaboratetree.Binop (Parsetree.Add,
                            (Elaboratetree.Field_ref "size"),
                            (Elaboratetree.Expr_value 1L))),
                         (Elaboratetree.Unop (Parsetree.Bit_not,
                            (Elaboratetree.Expr_value 1L)))
                         )))}
              ])};
    Elaboratetree.Request {name = "SetGammaRamp"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field {name = "size";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_list {name = "red";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length =
          (Some (Elaboratetree.Binop (Parsetree.Bit_and,
                   (Elaboratetree.Binop (Parsetree.Add,
                      (Elaboratetree.Field_ref "size"),
                      (Elaboratetree.Expr_value 1L))),
                   (Elaboratetree.Unop (Parsetree.Bit_not,
                      (Elaboratetree.Expr_value 1L)))
                   )))};
        Elaboratetree.Field_list {name = "green";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length =
          (Some (Elaboratetree.Binop (Parsetree.Bit_and,
                   (Elaboratetree.Binop (Parsetree.Add,
                      (Elaboratetree.Field_ref "size"),
                      (Elaboratetree.Expr_value 1L))),
                   (Elaboratetree.Unop (Parsetree.Bit_not,
                      (Elaboratetree.Expr_value 1L)))
                   )))};
        Elaboratetree.Field_list {name = "blue";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length =
          (Some (Elaboratetree.Binop (Parsetree.Bit_and,
                   (Elaboratetree.Binop (Parsetree.Add,
                      (Elaboratetree.Field_ref "size"),
                      (Elaboratetree.Expr_value 1L))),
                   (Elaboratetree.Unop (Parsetree.Bit_not,
                      (Elaboratetree.Expr_value 1L)))
                   )))}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetGammaRampSize"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "size";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "GetPermissions"; opcode = 20;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "screen";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "permissions";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_mask
                           { Elaboratetree.id_module = "xf86vidmode";
                             id_name = "Permission" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false}
              ])};
    Elaboratetree.Error {name = "BadClock"; number = 0; fields = []};
    Elaboratetree.Error {name = "BadHTimings"; number = 1; fields = []};
    Elaboratetree.Error {name = "BadVTimings"; number = 2; fields = []};
    Elaboratetree.Error {name = "ModeUnsuitable"; number = 3; fields = []};
    Elaboratetree.Error {name = "ExtensionDisabled"; number = 4; fields = []};
    Elaboratetree.Error {name = "ClientNotLocal"; number = 5; fields = []};
    Elaboratetree.Error {name = "ZoomLocked"; number = 6; fields = []}]}
Elaboratetree.Extension {name = "XFixes"; file_name = "xfixes";
  query_name = "XFIXES"; multiword = false; version = (5, 0);
  imports = ["xproto"; "render"; "shape"];
  declarations =
  [Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
     combine_adjacent = true;
     fields =
     [Elaboratetree.Field {name = "client_major_version";
        type_ =
        { Elaboratetree.ft_type =
          (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
          }};
       Elaboratetree.Field {name = "client_minor_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
       ];
     reply =
     (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
              serialize = false};
             Elaboratetree.Field {name = "major_version";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card32);
                 ft_allowed = None }};
             Elaboratetree.Field {name = "minor_version";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card32);
                 ft_allowed = None }};
             Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
               serialize = false}
             ])};
    Elaboratetree.Enum {name = "SaveSetMode";
      items = [("Insert", 0L); ("Delete", 1L)]};
    Elaboratetree.Enum {name = "SaveSetTarget";
      items = [("Nearest", 0L); ("Root", 1L)]};
    Elaboratetree.Enum {name = "SaveSetMapping";
      items = [("Map", 0L); ("Unmap", 1L)]};
    Elaboratetree.Request {name = "ChangeSaveSet"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "mode";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xfixes";
                      id_name = "SaveSetMode" }))
           }};
        Elaboratetree.Field {name = "target";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xfixes";
                       id_name = "SaveSetTarget" }))
            }};
        Elaboratetree.Field {name = "map";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xfixes";
                       id_name = "SaveSetMapping" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Enum {name = "SelectionEvent";
      items =
      [("SetSelectionOwner", 0L); ("SelectionWindowDestroy", 1L);
        ("SelectionClientClose", 2L)]};
    Elaboratetree.Mask {name = "SelectionEventMask";
      items =
      [("SetSelectionOwner", 0); ("SelectionWindowDestroy", 1);
        ("SelectionClientClose", 2)];
      additional_values = []};
    Elaboratetree.Event {name = "SelectionNotify"; number = 0;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "subtype";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xfixes";
                      id_name = "SelectionEvent" }))
           }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "owner";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "selection";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "selection_timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
          serialize = false}
        ]};
    Elaboratetree.Request {name = "SelectSelectionInput"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "selection";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xfixes";
                       id_name = "SelectionEventMask" }))
            }}
        ];
      reply = None};
    Elaboratetree.Enum {name = "CursorNotify";
      items = [("DisplayCursor", 0L)]};
    Elaboratetree.Mask {name = "CursorNotifyMask";
      items = [("DisplayCursor", 0)]; additional_values = []};
    Elaboratetree.Event {name = "CursorNotify"; number = 1;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "subtype";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xfixes";
                      id_name = "CursorNotify" }))
           }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "cursor_serial";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "timestamp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Atom" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
          serialize = false}
        ]};
    Elaboratetree.Request {name = "SelectCursorInput"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "event_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xfixes";
                       id_name = "CursorNotifyMask" }))
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetCursorImage"; opcode = 4;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "x";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "y";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "xhot";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "yhot";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "cursor_serial";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                serialize = false};
              Elaboratetree.Field_list {name = "cursor_image";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "width"),
                         (Elaboratetree.Field_ref "height"))))}
              ])};
    Elaboratetree.Type_alias {name = "REGION";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Error {name = "BadRegion"; number = 0; fields = []};
    Elaboratetree.Enum {name = "Region"; items = [("None", 0L)]};
    Elaboratetree.Request {name = "CreateRegion"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "region";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }};
        Elaboratetree.Field_list {name = "rectangles";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "RECTANGLE" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateRegionFromBitmap"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "region";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "bitmap";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateRegionFromWindow"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "region";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "kind";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "shape"; id_name = "KIND" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "shape"; id_name = "SK" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateRegionFromGC"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "region";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "gc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateRegionFromPicture"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "region";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "picture";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "DestroyRegion"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "region";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "SetRegion"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "region";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }};
        Elaboratetree.Field_list {name = "rectangles";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "RECTANGLE" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "CopyRegion"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "source";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "destination";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "UnionRegion"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "source1";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "source2";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "destination";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "IntersectRegion"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "source1";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "source2";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "destination";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "SubtractRegion"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "source1";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "source2";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "destination";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "InvertRegion"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "source";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "bounds";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "RECTANGLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "destination";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "TranslateRegion"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "region";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "dx";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "dy";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "RegionExtents"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "source";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "destination";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "FetchRegion"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "region";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "extents";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "RECTANGLE" });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false};
              Elaboratetree.Field_list {name = "rectangles";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "RECTANGLE" });
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Div,
                         (Elaboratetree.Field_ref "length"),
                         (Elaboratetree.Expr_value 2L))))}
              ])};
    Elaboratetree.Request {name = "SetGCClipRegion"; opcode = 20;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "gc";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "region";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xfixes"; id_name = "Region"
                       }))
            }};
        Elaboratetree.Field {name = "x_origin";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y_origin";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "SetWindowShapeRegion"; opcode = 21;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "dest";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "dest_kind";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "shape"; id_name = "KIND" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "shape"; id_name = "SK" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "x_offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y_offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "region";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xfixes"; id_name = "Region"
                       }))
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "SetPictureClipRegion"; opcode = 22;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "picture";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "render"; id_name = "PICTURE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "region";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xfixes"; id_name = "Region"
                       }))
            }};
        Elaboratetree.Field {name = "x_origin";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "y_origin";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "SetCursorName"; opcode = 23;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "cursor";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "nbytes";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "nbytes")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "nbytes"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetCursorName"; opcode = 24;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "cursor";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "atom";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_alt_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "Atom" }))
                  }};
              Elaboratetree.Field_list_length {name = "nbytes";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "nbytes")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 18);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "name";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "nbytes"}
              ])};
    Elaboratetree.Request {name = "GetCursorImageAndName"; opcode = 25;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "x";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "y";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "xhot";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "yhot";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "cursor_serial";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "cursor_atom";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_alt_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "Atom" }))
                  }};
              Elaboratetree.Field_list_length {name = "nbytes";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "nbytes")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                serialize = false};
              Elaboratetree.Field_list {name = "cursor_image";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length =
                (Some (Elaboratetree.Binop (Parsetree.Mul,
                         (Elaboratetree.Field_ref "width"),
                         (Elaboratetree.Field_ref "height"))))};
              Elaboratetree.Field_list_simple {name = "name";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "nbytes"}
              ])};
    Elaboratetree.Request {name = "ChangeCursor"; opcode = 26;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "source";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "destination";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "ChangeCursorByName"; opcode = 27;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "src";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "nbytes";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "nbytes")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "nbytes"}
        ];
      reply = None};
    Elaboratetree.Request {name = "ExpandRegion"; opcode = 28;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "source";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "destination";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "REGION" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "left";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "right";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "top";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "bottom";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "HideCursor"; opcode = 29;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "ShowCursor"; opcode = 30;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Type_alias {name = "BARRIER";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Mask {name = "BarrierDirections";
      items =
      [("PositiveX", 0); ("PositiveY", 1); ("NegativeX", 2); ("NegativeY", 3)
        ];
      additional_values = []};
    Elaboratetree.Request {name = "CreatePointerBarrier"; opcode = 31;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "barrier";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "BARRIER" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "x1";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "y1";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "x2";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "y2";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "directions";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xfixes";
                       id_name = "BarrierDirections" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_length {name = "num_devices";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_devices")};
        Elaboratetree.Field_list_simple {name = "devices";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None };
          length = "num_devices"}
        ];
      reply = None};
    Elaboratetree.Request {name = "DeletePointerBarrier"; opcode = 32;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "barrier";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xfixes"; id_name = "BARRIER" });
           ft_allowed = None }}
        ];
      reply = None}
    ]}
Elaboratetree.Extension {name = "Xinerama"; file_name = "xinerama";
  query_name = "XINERAMA"; multiword = false; version = (1, 1);
  imports = ["xproto"];
  declarations =
  [Elaboratetree.Struct {name = "ScreenInfo";
     fields =
     [Elaboratetree.Field {name = "x_org";
        type_ =
        { Elaboratetree.ft_type =
          (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None }};
       Elaboratetree.Field {name = "y_org";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
           }};
       Elaboratetree.Field {name = "width";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
       Elaboratetree.Field {name = "height";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }}
       ]};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "major";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "minor";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "GetState"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "state";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Byte);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "window";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "WINDOW"
                       });
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "GetScreenCount"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "screen_count";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Byte);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "window";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "WINDOW"
                       });
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "GetScreenSize"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "screen";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "window";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "WINDOW"
                       });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "screen";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "IsActive"; opcode = 4;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "state";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "QueryScreens"; opcode = 5;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "number";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "number")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "screen_info";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinerama";
                       id_name = "ScreenInfo" });
                  ft_allowed = None };
                length = "number"}
              ])}
    ]}
Elaboratetree.Extension {name = "Input"; file_name = "xinput";
  query_name = "XInputExtension"; multiword = false; version = (2, 3);
  imports = ["xfixes"; "xproto"];
  declarations =
  [Elaboratetree.Type_alias {name = "EventClass";
     type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
    Elaboratetree.Type_alias {name = "KeyCode";
      type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
    Elaboratetree.Type_alias {name = "DeviceId";
      type_ = (Elaboratetree.Type_primitive Parsetree.Card16)};
    Elaboratetree.Type_alias {name = "FP1616";
      type_ = (Elaboratetree.Type_primitive Parsetree.Int32)};
    Elaboratetree.Struct {name = "FP3232";
      fields =
      [Elaboratetree.Field {name = "integral";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "frac";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Request {name = "GetExtensionVersion"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field_list_length {name = "name_len";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
         expr = (Elaboratetree.Field_ref "name_len")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "name_len"}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "server_major";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "server_minor";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "present";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 19);
                serialize = false}
              ])};
    Elaboratetree.Enum {name = "DeviceUse";
      items =
      [("IsXPointer", 0L); ("IsXKeyboard", 1L); ("IsXExtensionDevice", 2L);
        ("IsXExtensionKeyboard", 3L); ("IsXExtensionPointer", 4L)]};
    Elaboratetree.Enum {name = "InputClass";
      items =
      [("Key", 0L); ("Button", 1L); ("Valuator", 2L); ("Feedback", 3L);
        ("Proximity", 4L); ("Focus", 5L); ("Other", 6L)]};
    Elaboratetree.Enum {name = "ValuatorMode";
      items = [("Relative", 0L); ("Absolute", 1L)]};
    Elaboratetree.Struct {name = "DeviceInfo";
      fields =
      [Elaboratetree.Field {name = "device_type";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "num_class_info";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "device_use";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "DeviceUse" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false}
        ]};
    Elaboratetree.Struct {name = "KeyInfo";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "InputClass" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "min_keycode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "KeyCode" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "max_keycode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "KeyCode" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "num_keys";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ]};
    Elaboratetree.Struct {name = "ButtonInfo";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "InputClass" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "num_buttons";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "AxisInfo";
      fields =
      [Elaboratetree.Field {name = "resolution";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "minimum";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "maximum";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ]};
    Elaboratetree.Struct {name = "ValuatorInfo";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "InputClass" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_list_length {name = "axes_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
          expr = (Elaboratetree.Field_ref "axes_len")};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "ValuatorMode" }))
            }};
        Elaboratetree.Field {name = "motion_size";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_list_simple {name = "axes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "AxisInfo" });
            ft_allowed = None };
          length = "axes_len"}
        ]};
    Elaboratetree.Variant {name = "InputClass";
      items =
      [{ Elaboratetree.vi_name = "Key"; vi_tag = 0L;
         vi_fields =
         [Elaboratetree.Field {name = "min_keycode";
            type_ =
            { Elaboratetree.ft_type =
              (Elaboratetree.Type_ref
                 { Elaboratetree.id_module = "xinput"; id_name = "KeyCode" });
              ft_allowed = None }};
           Elaboratetree.Field {name = "max_keycode";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_ref
                  { Elaboratetree.id_module = "xinput"; id_name = "KeyCode" });
               ft_allowed = None }};
           Elaboratetree.Field {name = "num_keys";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card16);
               ft_allowed = None }};
           Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
             serialize = false}
           ]
         };
        { Elaboratetree.vi_name = "Button"; vi_tag = 1L;
          vi_fields =
          [Elaboratetree.Field {name = "num_buttons";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card16);
               ft_allowed = None }}
            ]
          };
        { Elaboratetree.vi_name = "Valuator"; vi_tag = 2L;
          vi_fields =
          [Elaboratetree.Field_list_length {name = "axes_len";
             type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
             expr = (Elaboratetree.Field_ref "axes_len")};
            Elaboratetree.Field {name = "mode";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card8);
                ft_allowed =
                (Some (Elaboratetree.Allowed_enum
                         { Elaboratetree.id_module = "xinput";
                           id_name = "ValuatorMode" }))
                }};
            Elaboratetree.Field {name = "motion_size";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card32);
                ft_allowed = None }};
            Elaboratetree.Field_list_simple {name = "axes";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_ref
                   { Elaboratetree.id_module = "xinput"; id_name = "AxisInfo"
                     });
                ft_allowed = None };
              length = "axes_len"}
            ]
          }
        ]};
    Elaboratetree.Struct {name = "InputInfo";
      fields =
      [Elaboratetree.Field_variant_tag {variant = "info";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_variant {name = "info";
          variant =
          { Elaboratetree.id_module = "xinput"; id_name = "InputClass" }}
        ]};
    Elaboratetree.Struct {name = "DeviceName";
      fields =
      [Elaboratetree.Field_list_length {name = "len";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
         expr = (Elaboratetree.Field_ref "len")};
        Elaboratetree.Field_list_simple {name = "string";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "len"}
        ]};
    Elaboratetree.Request {name = "ListInputDevices"; opcode = 2;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "devices_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
                expr = (Elaboratetree.Field_ref "devices_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "devices";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "DeviceInfo" });
                  ft_allowed = None };
                length = "devices_len"};
              Elaboratetree.Field_list {name = "infos";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "InputInfo" });
                  ft_allowed = None };
                length =
                (Some Elaboratetree.Sum_of {field = "devices";
                        by_expr =
                        (Some (Elaboratetree.Field_ref "num_class_info"))})};
              Elaboratetree.Field_list_simple {name = "names";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "STR" });
                  ft_allowed = None };
                length = "devices_len"};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
                serialize = false}
              ])};
    Elaboratetree.Type_alias {name = "EventTypeBase";
      type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
    Elaboratetree.Struct {name = "InputClassInfo";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "InputClass" }))
           }};
        Elaboratetree.Field {name = "event_type_base";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput";
                 id_name = "EventTypeBase" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Request {name = "OpenDevice"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "num_classes";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
                expr = (Elaboratetree.Field_ref "num_classes")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "class_info";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "InputClassInfo" });
                  ft_allowed = None };
                length = "num_classes"};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "CloseDevice"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "SetDeviceMode"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "ValuatorMode" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "status";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "GrabStatus" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "SelectExtensionEvent"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_classes";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_classes")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "classes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "EventClass" });
            ft_allowed = None };
          length = "num_classes"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetSelectedExtensionEvents"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "num_this_classes";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_this_classes")};
              Elaboratetree.Field_list_length {name = "num_all_classes";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_all_classes")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "this_classes";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "EventClass" });
                  ft_allowed = None };
                length = "num_this_classes"};
              Elaboratetree.Field_list_simple {name = "all_classes";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "EventClass" });
                  ft_allowed = None };
                length = "num_all_classes"}
              ])};
    Elaboratetree.Enum {name = "PropagateMode";
      items = [("AddToList", 0L); ("DeleteFromList", 1L)]};
    Elaboratetree.Request {name = "ChangeDeviceDontPropagateList";
      opcode = 8; combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_classes";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_classes")};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "PropagateMode" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "classes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "EventClass" });
            ft_allowed = None };
          length = "num_classes"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetDeviceDontPropagateList"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "num_classes";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_classes")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "classes";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "EventClass" });
                  ft_allowed = None };
                length = "num_classes"}
              ])};
    Elaboratetree.Struct {name = "DeviceTimeCoord";
      fields =
      [Elaboratetree.Field {name = "time";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
           ft_allowed = None }};
        Elaboratetree.Field_list {name = "axisvalues";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            };
          length =
          (Some Elaboratetree.Param_ref {param = "num_axes";
                  type_ = (Elaboratetree.Type_primitive Parsetree.Card8)})}
        ]};
    Elaboratetree.Request {name = "GetDeviceMotionEvents"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "start";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "stop";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "num_events";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_events")};
              Elaboratetree.Field {name = "num_axes";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "device_mode";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xinput";
                             id_name = "ValuatorMode" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 18);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "events";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "DeviceTimeCoord" });
                  ft_allowed = None };
                length = "num_events"}
              ])};
    Elaboratetree.Request {name = "ChangeKeyboardDevice"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "status";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "GrabStatus" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "ChangePointerDevice"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "x_axis";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "y_axis";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "status";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "GrabStatus" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "GrabDevice"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "grab_window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field_list_length {name = "num_classes";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_classes")};
        Elaboratetree.Field {name = "this_device_mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "GrabMode" }))
            }};
        Elaboratetree.Field {name = "other_device_mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "GrabMode" }))
            }};
        Elaboratetree.Field {name = "owner_events";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "classes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "EventClass" });
            ft_allowed = None };
          length = "num_classes"}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "status";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "GrabStatus" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "UngrabDevice"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "time";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
           }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Enum {name = "ModifierDevice";
      items = [("UseXKeyboard", 255L)]};
    Elaboratetree.Request {name = "GrabDeviceKey"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "grab_window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_classes";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_classes")};
        Elaboratetree.Field {name = "modifiers";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xproto";
                       id_name = "ModMask" }))
            }};
        Elaboratetree.Field {name = "modifier_device";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "ModifierDevice" }))
            }};
        Elaboratetree.Field {name = "grabbed_device";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "key";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Grab" }))
            }};
        Elaboratetree.Field {name = "this_device_mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "GrabMode" }))
            }};
        Elaboratetree.Field {name = "other_device_mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "GrabMode" }))
            }};
        Elaboratetree.Field {name = "owner_events";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "classes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "EventClass" });
            ft_allowed = None };
          length = "num_classes"}
        ];
      reply = None};
    Elaboratetree.Request {name = "UngrabDeviceKey"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "grabWindow";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "modifiers";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xproto";
                       id_name = "ModMask" }))
            }};
        Elaboratetree.Field {name = "modifier_device";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "ModifierDevice" }))
            }};
        Elaboratetree.Field {name = "key";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Grab" }))
            }};
        Elaboratetree.Field {name = "grabbed_device";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GrabDeviceButton"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "grab_window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "grabbed_device";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "modifier_device";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "ModifierDevice" }))
            }};
        Elaboratetree.Field_list_length {name = "num_classes";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_classes")};
        Elaboratetree.Field {name = "modifiers";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xproto";
                       id_name = "ModMask" }))
            }};
        Elaboratetree.Field {name = "this_device_mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "GrabMode" }))
            }};
        Elaboratetree.Field {name = "other_device_mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "GrabMode" }))
            }};
        Elaboratetree.Field {name = "button";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Grab" }))
            }};
        Elaboratetree.Field {name = "owner_events";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "classes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "EventClass" });
            ft_allowed = None };
          length = "num_classes"}
        ];
      reply = None};
    Elaboratetree.Request {name = "UngrabDeviceButton"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "grab_window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "modifiers";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xproto";
                       id_name = "ModMask" }))
            }};
        Elaboratetree.Field {name = "modifier_device";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "ModifierDevice" }))
            }};
        Elaboratetree.Field {name = "button";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Grab" }))
            }};
        Elaboratetree.Field {name = "grabbed_device";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Enum {name = "DeviceInputMode";
      items =
      [("AsyncThisDevice", 0L); ("SyncThisDevice", 1L);
        ("ReplayThisDevice", 2L); ("AsyncOtherDevices", 3L);
        ("AsyncAll", 4L); ("SyncAll", 5L)]};
    Elaboratetree.Request {name = "AllowDeviceEvents"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "time";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
           }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "DeviceInputMode" }))
            }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetDeviceFocus"; opcode = 20;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "focus";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "WINDOW"
                       });
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_alt_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "InputFocus" }))
                  }};
              Elaboratetree.Field {name = "time";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto";
                       id_name = "TIMESTAMP" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "revert_to";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "InputFocus" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 15);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "SetDeviceFocus"; opcode = 21;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "focus";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xproto";
                      id_name = "InputFocus" }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field {name = "revert_to";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "InputFocus" }))
            }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Enum {name = "FeedbackClass";
      items =
      [("Keyboard", 0L); ("Pointer", 1L); ("String", 2L); ("Integer", 3L);
        ("Led", 4L); ("Bell", 5L)]};
    Elaboratetree.Struct {name = "KbdFeedbackState";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "FeedbackClass" }))
           }};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pitch";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "duration";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "led_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "led_values";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "global_auto_repeat";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field {name = "click";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "percent";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field_list {name = "auto_repeats";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = (Some (Elaboratetree.Expr_value 32L))}
        ]};
    Elaboratetree.Struct {name = "PtrFeedbackState";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "FeedbackClass" }))
           }};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "accel_num";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "accel_denom";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "threshold";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "IntegerFeedbackState";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "FeedbackClass" }))
           }};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "resolution";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "min_value";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "max_value";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ]};
    Elaboratetree.Struct {name = "StringFeedbackState";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "FeedbackClass" }))
           }};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "max_symbols";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_keysyms";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_keysyms")};
        Elaboratetree.Field_list_simple {name = "keysyms";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "KEYSYM" });
            ft_allowed = None };
          length = "num_keysyms"}
        ]};
    Elaboratetree.Struct {name = "BellFeedbackState";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "FeedbackClass" }))
           }};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "percent";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "pitch";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "duration";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "LedFeedbackState";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "FeedbackClass" }))
           }};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "led_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "led_values";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Variant {name = "FeedbackClass";
      items =
      [{ Elaboratetree.vi_name = "Keyboard"; vi_tag = 0L;
         vi_fields =
         [Elaboratetree.Field {name = "pitch";
            type_ =
            { Elaboratetree.ft_type =
              (Elaboratetree.Type_primitive Parsetree.Card16);
              ft_allowed = None }};
           Elaboratetree.Field {name = "duration";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card16);
               ft_allowed = None }};
           Elaboratetree.Field {name = "led_mask";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card32);
               ft_allowed = None }};
           Elaboratetree.Field {name = "led_values";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card32);
               ft_allowed = None }};
           Elaboratetree.Field {name = "global_auto_repeat";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Bool);
               ft_allowed = None }};
           Elaboratetree.Field {name = "click";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card8);
               ft_allowed = None }};
           Elaboratetree.Field {name = "percent";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card8);
               ft_allowed = None }};
           Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
             serialize = false};
           Elaboratetree.Field_list {name = "auto_repeats";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card8);
               ft_allowed = None };
             length = (Some (Elaboratetree.Expr_value 32L))}
           ]
         };
        { Elaboratetree.vi_name = "Pointer"; vi_tag = 1L;
          vi_fields =
          [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
             serialize = false};
            Elaboratetree.Field {name = "accel_num";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card16);
                ft_allowed = None }};
            Elaboratetree.Field {name = "accel_denom";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card16);
                ft_allowed = None }};
            Elaboratetree.Field {name = "threshold";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card16);
                ft_allowed = None }}
            ]
          };
        { Elaboratetree.vi_name = "String"; vi_tag = 2L;
          vi_fields =
          [Elaboratetree.Field {name = "max_symbols";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card16);
               ft_allowed = None }};
            Elaboratetree.Field_list_length {name = "num_keysyms";
              type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
              expr = (Elaboratetree.Field_ref "num_keysyms")};
            Elaboratetree.Field_list_simple {name = "keysyms";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_ref
                   { Elaboratetree.id_module = "xproto"; id_name = "KEYSYM" });
                ft_allowed = None };
              length = "num_keysyms"}
            ]
          };
        { Elaboratetree.vi_name = "Integer"; vi_tag = 3L;
          vi_fields =
          [Elaboratetree.Field {name = "resolution";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card32);
               ft_allowed = None }};
            Elaboratetree.Field {name = "min_value";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Int32);
                ft_allowed = None }};
            Elaboratetree.Field {name = "max_value";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Int32);
                ft_allowed = None }}
            ]
          };
        { Elaboratetree.vi_name = "Led"; vi_tag = 4L;
          vi_fields =
          [Elaboratetree.Field {name = "led_mask";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card32);
               ft_allowed = None }};
            Elaboratetree.Field {name = "led_values";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card32);
                ft_allowed = None }}
            ]
          };
        { Elaboratetree.vi_name = "Bell"; vi_tag = 5L;
          vi_fields =
          [Elaboratetree.Field {name = "percent";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card8);
               ft_allowed = None }};
            Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
              serialize = false};
            Elaboratetree.Field {name = "pitch";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card16);
                ft_allowed = None }};
            Elaboratetree.Field {name = "duration";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card16);
                ft_allowed = None }}
            ]
          }
        ]};
    Elaboratetree.Struct {name = "FeedbackState";
      fields =
      [Elaboratetree.Field_variant_tag {variant = "data";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_variant {name = "data";
          variant =
          { Elaboratetree.id_module = "xinput"; id_name = "FeedbackClass" }}
        ]};
    Elaboratetree.Request {name = "GetFeedbackControl"; opcode = 22;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "num_feedbacks";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_feedbacks")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "feedbacks";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "FeedbackState" });
                  ft_allowed = None };
                length = "num_feedbacks"}
              ])};
    Elaboratetree.Struct {name = "KbdFeedbackCtl";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "FeedbackClass" }))
           }};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "key";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "KeyCode" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "auto_repeat_mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "key_click_percent";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "bell_percent";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "bell_pitch";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "bell_duration";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "led_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "led_values";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "PtrFeedbackCtl";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "FeedbackClass" }))
           }};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "num";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "denom";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "threshold";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }}
        ]};
    Elaboratetree.Struct {name = "IntegerFeedbackCtl";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "FeedbackClass" }))
           }};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "int_to_display";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ]};
    Elaboratetree.Struct {name = "StringFeedbackCtl";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "FeedbackClass" }))
           }};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_length {name = "num_keysyms";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_keysyms")};
        Elaboratetree.Field_list_simple {name = "keysyms";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "KEYSYM" });
            ft_allowed = None };
          length = "num_keysyms"}
        ]};
    Elaboratetree.Struct {name = "BellFeedbackCtl";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "FeedbackClass" }))
           }};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "percent";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "pitch";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "duration";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }}
        ]};
    Elaboratetree.Struct {name = "LedFeedbackCtl";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "FeedbackClass" }))
           }};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "led_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "led_values";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "FeedbackCtl";
      fields =
      [Elaboratetree.Field_variant_tag {variant = "data";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_variant {name = "data";
          variant =
          { Elaboratetree.id_module = "xinput"; id_name = "FeedbackClass" }}
        ]};
    Elaboratetree.Mask {name = "ChangeFeedbackControlMask";
      items =
      [("KeyClickPercent", 0); ("Percent", 1); ("Pitch", 2); ("Duration", 3);
        ("Led", 4); ("LedMode", 5); ("Key", 6); ("AutoRepeatMode", 7);
        ("String", 0); ("Integer", 0); ("AccelNum", 0); ("AccelDenom", 1);
        ("Threshold", 2)];
      additional_values = []};
    Elaboratetree.Request {name = "ChangeFeedbackControl"; opcode = 23;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "mask";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32);
           ft_allowed =
           (Some (Elaboratetree.Allowed_mask
                    { Elaboratetree.id_module = "xinput";
                      id_name = "ChangeFeedbackControlMask" }))
           }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "feedback";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FeedbackCtl"
                 });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetDeviceKeyMapping"; opcode = 24;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "first_keycode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "KeyCode" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "count";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "keysyms_per_keycode";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false};
              Elaboratetree.Field_list {name = "keysyms";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "KEYSYM"
                       });
                  ft_allowed = None };
                length = (Some (Elaboratetree.Field_ref "length"))}
              ])};
    Elaboratetree.Request {name = "ChangeDeviceKeyMapping"; opcode = 25;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "first_keycode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "KeyCode" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "keysyms_per_keycode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "keycode_count";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_list {name = "keysyms";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "KEYSYM" });
            ft_allowed = None };
          length =
          (Some (Elaboratetree.Binop (Parsetree.Mul,
                   (Elaboratetree.Field_ref "keycode_count"),
                   (Elaboratetree.Field_ref "keysyms_per_keycode"))))}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetDeviceModifierMapping"; opcode = 26;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field_list_length {
                name = "keycodes_per_modifier";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
                expr =
                (Elaboratetree.Binop (Parsetree.Div,
                   (Elaboratetree.Field_ref "keycodes_per_modifier"),
                   (Elaboratetree.Expr_value 8L)))};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "keymaps";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None };
                length = "keycodes_per_modifier"}
              ])};
    Elaboratetree.Request {name = "SetDeviceModifierMapping"; opcode = 27;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field_list_length {name = "keycodes_per_modifier";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
          expr =
          (Elaboratetree.Binop (Parsetree.Div,
             (Elaboratetree.Field_ref "keycodes_per_modifier"),
             (Elaboratetree.Expr_value 8L)))};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "keymaps";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = "keycodes_per_modifier"}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "status";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "MappingStatus" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "GetDeviceButtonMapping"; opcode = 28;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "map_size";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
                expr = (Elaboratetree.Field_ref "map_size")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "map";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None };
                length = "map_size"};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "SetDeviceButtonMapping"; opcode = 29;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field_list_length {name = "map_size";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
          expr = (Elaboratetree.Field_ref "map_size")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "map";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = "map_size"}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "status";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "MappingStatus" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false}
              ])};
    Elaboratetree.Struct {name = "KeyState";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "InputClass" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "num_keys";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field_list {name = "keys";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = (Some (Elaboratetree.Expr_value 32L))}
        ]};
    Elaboratetree.Struct {name = "ButtonState";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "InputClass" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "num_buttons";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field_list {name = "buttons";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = (Some (Elaboratetree.Expr_value 32L))}
        ]};
    Elaboratetree.Mask {name = "ValuatorStateModeMask";
      items = [("DeviceModeAbsolute", 0); ("OutOfProximity", 1)];
      additional_values = []};
    Elaboratetree.Struct {name = "ValuatorState";
      fields =
      [Elaboratetree.Field {name = "class_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "InputClass" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_list_length {name = "num_valuators";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
          expr = (Elaboratetree.Field_ref "num_valuators")};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xinput";
                       id_name = "ValuatorStateModeMask" }))
            }};
        Elaboratetree.Field_list_simple {name = "valuators";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            };
          length = "num_valuators"}
        ]};
    Elaboratetree.Struct {name = "InputState";
      fields =
      [Elaboratetree.Field_variant_tag {variant = "data";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_variant {name = "data";
          variant =
          { Elaboratetree.id_module = "xinput"; id_name = "InputClass" }}
        ]};
    Elaboratetree.Request {name = "QueryDeviceState"; opcode = 30;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "num_classes";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
                expr = (Elaboratetree.Field_ref "num_classes")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "classes";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "InputState" });
                  ft_allowed = None };
                length = "num_classes"}
              ])};
    Elaboratetree.Request {name = "DeviceBell"; opcode = 32;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "feedback_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "feedback_class";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "percent";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int8); ft_allowed = None
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "SetDeviceValuators"; opcode = 33;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "first_valuator";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_list_length {name = "num_valuators";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
          expr = (Elaboratetree.Field_ref "num_valuators")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "valuators";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            };
          length = "num_valuators"}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "status";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "GrabStatus" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false}
              ])};
    Elaboratetree.Enum {name = "DeviceControl";
      items =
      [("resolution", 1L); ("abs_calib", 2L); ("core", 3L); ("enable", 4L);
        ("abs_area", 5L)]};
    Elaboratetree.Struct {name = "DeviceResolutionState";
      fields =
      [Elaboratetree.Field {name = "control_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceControl" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_valuators";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "num_valuators")};
        Elaboratetree.Field_list_simple {name = "resolution_values";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_valuators"};
        Elaboratetree.Field_list_simple {name = "resolution_min";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_valuators"};
        Elaboratetree.Field_list_simple {name = "resolution_max";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_valuators"}
        ]};
    Elaboratetree.Struct {name = "DeviceAbsCalibState";
      fields =
      [Elaboratetree.Field {name = "control_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceControl" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "min_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "max_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "min_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "max_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "flip_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "flip_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "rotation";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "button_threshold";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "DeviceAbsAreaState";
      fields =
      [Elaboratetree.Field {name = "control_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceControl" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "offset_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "offset_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "screen";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "following";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "DeviceCoreState";
      fields =
      [Elaboratetree.Field {name = "control_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceControl" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "status";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "iscore";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ]};
    Elaboratetree.Struct {name = "DeviceEnableState";
      fields =
      [Elaboratetree.Field {name = "control_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceControl" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "enable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ]};
    Elaboratetree.Variant {name = "DeviceControl";
      items =
      [{ Elaboratetree.vi_name = "resolution"; vi_tag = 1L;
         vi_fields =
         [Elaboratetree.Field_list_length {name = "num_valuators";
            type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
            expr = (Elaboratetree.Field_ref "num_valuators")};
           Elaboratetree.Field_list_simple {name = "resolution_values";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card32);
               ft_allowed = None };
             length = "num_valuators"};
           Elaboratetree.Field_list_simple {name = "resolution_min";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card32);
               ft_allowed = None };
             length = "num_valuators"};
           Elaboratetree.Field_list_simple {name = "resolution_max";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card32);
               ft_allowed = None };
             length = "num_valuators"}
           ]
         };
        { Elaboratetree.vi_name = "abs_calib"; vi_tag = 2L;
          vi_fields =
          [Elaboratetree.Field {name = "min_x";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Int32);
               ft_allowed = None }};
            Elaboratetree.Field {name = "max_x";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Int32);
                ft_allowed = None }};
            Elaboratetree.Field {name = "min_y";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Int32);
                ft_allowed = None }};
            Elaboratetree.Field {name = "max_y";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Int32);
                ft_allowed = None }};
            Elaboratetree.Field {name = "flip_x";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card32);
                ft_allowed = None }};
            Elaboratetree.Field {name = "flip_y";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card32);
                ft_allowed = None }};
            Elaboratetree.Field {name = "rotation";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card32);
                ft_allowed = None }};
            Elaboratetree.Field {name = "button_threshold";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card32);
                ft_allowed = None }}
            ]
          };
        { Elaboratetree.vi_name = "core"; vi_tag = 3L;
          vi_fields =
          [Elaboratetree.Field {name = "status";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card8);
               ft_allowed = None }};
            Elaboratetree.Field {name = "iscore";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card8);
                ft_allowed = None }};
            Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
              serialize = false}
            ]
          };
        { Elaboratetree.vi_name = "enable"; vi_tag = 4L;
          vi_fields =
          [Elaboratetree.Field {name = "enable";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card8);
               ft_allowed = None }};
            Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
              serialize = false}
            ]
          };
        { Elaboratetree.vi_name = "abs_area"; vi_tag = 5L;
          vi_fields =
          [Elaboratetree.Field {name = "offset_x";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card32);
               ft_allowed = None }};
            Elaboratetree.Field {name = "offset_y";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card32);
                ft_allowed = None }};
            Elaboratetree.Field {name = "width";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card32);
                ft_allowed = None }};
            Elaboratetree.Field {name = "height";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card32);
                ft_allowed = None }};
            Elaboratetree.Field {name = "screen";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card32);
                ft_allowed = None }};
            Elaboratetree.Field {name = "following";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card32);
                ft_allowed = None }}
            ]
          }
        ]};
    Elaboratetree.Struct {name = "DeviceState";
      fields =
      [Elaboratetree.Field_variant_tag {variant = "data";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card16)};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_variant {name = "data";
          variant =
          { Elaboratetree.id_module = "xinput"; id_name = "DeviceControl" }}
        ]};
    Elaboratetree.Request {name = "GetDeviceControl"; opcode = 34;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "control_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceControl" }))
           }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "status";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_alt_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "GrabStatus" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false};
              Elaboratetree.Field {name = "control";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "DeviceState" });
                  ft_allowed = None }}
              ])};
    Elaboratetree.Struct {name = "DeviceResolutionCtl";
      fields =
      [Elaboratetree.Field {name = "control_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceControl" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "first_valuator";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_list_length {name = "num_valuators";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
          expr = (Elaboratetree.Field_ref "num_valuators")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "resolution_values";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_valuators"}
        ]};
    Elaboratetree.Struct {name = "DeviceAbsCalibCtl";
      fields =
      [Elaboratetree.Field {name = "control_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceControl" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "min_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "max_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "min_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "max_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "flip_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "flip_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "rotation";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "button_threshold";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "DeviceAbsAreaCtrl";
      fields =
      [Elaboratetree.Field {name = "control_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceControl" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "offset_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "offset_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "screen";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "following";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "DeviceCoreCtrl";
      fields =
      [Elaboratetree.Field {name = "control_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceControl" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "status";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ]};
    Elaboratetree.Struct {name = "DeviceEnableCtrl";
      fields =
      [Elaboratetree.Field {name = "control_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceControl" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "enable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ]};
    Elaboratetree.Struct {name = "DeviceCtl";
      fields =
      [Elaboratetree.Field_variant_tag {variant = "data";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card16)};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_variant {name = "data";
          variant =
          { Elaboratetree.id_module = "xinput"; id_name = "DeviceControl" }}
        ]};
    Elaboratetree.Request {name = "ChangeDeviceControl"; opcode = 35;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "control_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceControl" }))
           }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field {name = "control";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceCtl" });
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "status";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_alt_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "GrabStatus" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "ListDeviceProperties"; opcode = 36;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "num_atoms";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_atoms")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "atoms";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
                  ft_allowed = None };
                length = "num_atoms"}
              ])};
    Elaboratetree.Enum {name = "PropertyFormat";
      items = [("8Bits", 8L); ("16Bits", 16L); ("32Bits", 32L)]};
    Elaboratetree.Variant {name = "PropertyFormat";
      items =
      [{ Elaboratetree.vi_name = "8Bits"; vi_tag = 8L;
         vi_fields =
         [Elaboratetree.Field_list {name = "data8";
            type_ =
            { Elaboratetree.ft_type =
              (Elaboratetree.Type_primitive Parsetree.Card8);
              ft_allowed = None };
            length = (Some (Elaboratetree.Field_ref "num_items"))};
           Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
             serialize = false}
           ]
         };
        { Elaboratetree.vi_name = "16Bits"; vi_tag = 16L;
          vi_fields =
          [Elaboratetree.Field_list {name = "data16";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card16);
               ft_allowed = None };
             length = (Some (Elaboratetree.Field_ref "num_items"))};
            Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
              serialize = false}
            ]
          };
        { Elaboratetree.vi_name = "32Bits"; vi_tag = 32L;
          vi_fields =
          [Elaboratetree.Field_list {name = "data32";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card32);
               ft_allowed = None };
             length = (Some (Elaboratetree.Field_ref "num_items"))}
            ]
          }
        ]};
    Elaboratetree.Request {name = "ChangeDeviceProperty"; opcode = 37;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "property";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_variant_tag {variant = "items";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "PropMode" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field {name = "num_items";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_variant {name = "items";
          variant =
          { Elaboratetree.id_module = "xinput"; id_name = "PropertyFormat" }}
        ];
      reply = None};
    Elaboratetree.Request {name = "DeleteDeviceProperty"; opcode = 38;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "property";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetDeviceProperty"; opcode = 39;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "property";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "delete";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "xi_reply_type";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card8);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "type";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "bytes_after";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "num_items";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_variant_tag {variant = "items";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
              Elaboratetree.Field {name = "device_id";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 10);
                serialize = false};
              Elaboratetree.Field_variant {name = "items";
                variant =
                { Elaboratetree.id_module = "xinput";
                  id_name = "PropertyFormat" }}
              ])};
    Elaboratetree.Enum {name = "Device";
      items = [("All", 0L); ("AllMaster", 1L)]};
    Elaboratetree.Struct {name = "GroupInfo";
      fields =
      [Elaboratetree.Field {name = "base";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "latched";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "locked";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "effective";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }}
        ]};
    Elaboratetree.Struct {name = "ModifierInfo";
      fields =
      [Elaboratetree.Field {name = "base";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "latched";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "locked";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "effective";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Request {name = "XIQueryPointer"; opcode = 40;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "deviceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "root";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "WINDOW"
                       });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "child";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "WINDOW"
                       });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "root_x";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput"; id_name = "FP1616"
                       });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "root_y";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput"; id_name = "FP1616"
                       });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "win_x";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput"; id_name = "FP1616"
                       });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "win_y";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput"; id_name = "FP1616"
                       });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "same_screen";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
              Elaboratetree.Field_list_length {name = "buttons_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "buttons_len")};
              Elaboratetree.Field {name = "mods";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "ModifierInfo" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "group";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "GroupInfo" });
                  ft_allowed = None }};
              Elaboratetree.Field_list_simple {name = "buttons";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = "buttons_len"}
              ])};
    Elaboratetree.Request {name = "XIWarpPointer"; opcode = 41;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "src_win";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "dst_win";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "dst_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "dst_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "deviceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "XIChangeCursor"; opcode = 42;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "cursor";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "deviceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Enum {name = "HierarchyChangeType";
      items =
      [("AddMaster", 1L); ("RemoveMaster", 2L); ("AttachSlave", 3L);
        ("DetachSlave", 4L)]};
    Elaboratetree.Enum {name = "ChangeMode";
      items = [("Attach", 1L); ("Float", 2L)]};
    Elaboratetree.Struct {name = "AddMaster";
      fields =
      [Elaboratetree.Field {name = "type";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "HierarchyChangeType" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "name_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "name_len")};
        Elaboratetree.Field {name = "send_core";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field {name = "enable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_list_simple {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "name_len"};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
          serialize = false}
        ]};
    Elaboratetree.Struct {name = "RemoveMaster";
      fields =
      [Elaboratetree.Field {name = "type";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "HierarchyChangeType" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "deviceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field {name = "return_mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "ChangeMode" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field {name = "return_pointer";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field {name = "return_keyboard";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }}
        ]};
    Elaboratetree.Struct {name = "AttachSlave";
      fields =
      [Elaboratetree.Field {name = "type";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "HierarchyChangeType" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "deviceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field {name = "master";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }}
        ]};
    Elaboratetree.Struct {name = "DetachSlave";
      fields =
      [Elaboratetree.Field {name = "type";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "HierarchyChangeType" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "deviceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ]};
    Elaboratetree.Variant {name = "HierarchyChangeType";
      items =
      [{ Elaboratetree.vi_name = "AddMaster"; vi_tag = 1L;
         vi_fields =
         [Elaboratetree.Field_list_length {name = "name_len";
            type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
            expr = (Elaboratetree.Field_ref "name_len")};
           Elaboratetree.Field {name = "send_core";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Bool);
               ft_allowed = None }};
           Elaboratetree.Field {name = "enable";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Bool);
               ft_allowed = None }};
           Elaboratetree.Field_list_simple {name = "name";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Char);
               ft_allowed = None };
             length = "name_len"};
           Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
             serialize = false}
           ]
         };
        { Elaboratetree.vi_name = "RemoveMaster"; vi_tag = 2L;
          vi_fields =
          [Elaboratetree.Field {name = "deviceid";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_ref
                  { Elaboratetree.id_module = "xinput"; id_name = "DeviceId"
                    });
               ft_allowed =
               (Some (Elaboratetree.Allowed_alt_enum
                        { Elaboratetree.id_module = "xinput";
                          id_name = "Device" }))
               }};
            Elaboratetree.Field {name = "return_mode";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card8);
                ft_allowed =
                (Some (Elaboratetree.Allowed_enum
                         { Elaboratetree.id_module = "xinput";
                           id_name = "ChangeMode" }))
                }};
            Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
              serialize = false};
            Elaboratetree.Field {name = "return_pointer";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_ref
                   { Elaboratetree.id_module = "xinput"; id_name = "DeviceId"
                     });
                ft_allowed =
                (Some (Elaboratetree.Allowed_alt_enum
                         { Elaboratetree.id_module = "xinput";
                           id_name = "Device" }))
                }};
            Elaboratetree.Field {name = "return_keyboard";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_ref
                   { Elaboratetree.id_module = "xinput"; id_name = "DeviceId"
                     });
                ft_allowed =
                (Some (Elaboratetree.Allowed_alt_enum
                         { Elaboratetree.id_module = "xinput";
                           id_name = "Device" }))
                }}
            ]
          };
        { Elaboratetree.vi_name = "AttachSlave"; vi_tag = 3L;
          vi_fields =
          [Elaboratetree.Field {name = "deviceid";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_ref
                  { Elaboratetree.id_module = "xinput"; id_name = "DeviceId"
                    });
               ft_allowed =
               (Some (Elaboratetree.Allowed_alt_enum
                        { Elaboratetree.id_module = "xinput";
                          id_name = "Device" }))
               }};
            Elaboratetree.Field {name = "master";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_ref
                   { Elaboratetree.id_module = "xinput"; id_name = "DeviceId"
                     });
                ft_allowed =
                (Some (Elaboratetree.Allowed_alt_enum
                         { Elaboratetree.id_module = "xinput";
                           id_name = "Device" }))
                }}
            ]
          };
        { Elaboratetree.vi_name = "DetachSlave"; vi_tag = 4L;
          vi_fields =
          [Elaboratetree.Field {name = "deviceid";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_ref
                  { Elaboratetree.id_module = "xinput"; id_name = "DeviceId"
                    });
               ft_allowed =
               (Some (Elaboratetree.Allowed_alt_enum
                        { Elaboratetree.id_module = "xinput";
                          id_name = "Device" }))
               }};
            Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
              serialize = false}
            ]
          }
        ]};
    Elaboratetree.Struct {name = "HierarchyChange";
      fields =
      [Elaboratetree.Field_variant_tag {variant = "data";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card16)};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_variant {name = "data";
          variant =
          { Elaboratetree.id_module = "xinput";
            id_name = "HierarchyChangeType" }}
        ]};
    Elaboratetree.Request {name = "XIChangeHierarchy"; opcode = 43;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field_list_length {name = "num_changes";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
         expr = (Elaboratetree.Field_ref "num_changes")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "changes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput";
                 id_name = "HierarchyChange" });
            ft_allowed = None };
          length = "num_changes"}
        ];
      reply = None};
    Elaboratetree.Request {name = "XISetClientPointer"; opcode = 44;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "deviceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "XIGetClientPointer"; opcode = 45;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "set";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
              Elaboratetree.Field {name = "deviceid";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "DeviceId" });
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_alt_enum
                           { Elaboratetree.id_module = "xinput";
                             id_name = "Device" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false}
              ])};
    Elaboratetree.Mask {name = "XIEventMask";
      items =
      [("DeviceChanged", 1); ("KeyPress", 2); ("KeyRelease", 3);
        ("ButtonPress", 4); ("ButtonRelease", 5); ("Motion", 6);
        ("Enter", 7); ("Leave", 8); ("FocusIn", 9); ("FocusOut", 10);
        ("Hierarchy", 11); ("Property", 12); ("RawKeyPress", 13);
        ("RawKeyRelease", 14); ("RawButtonPress", 15);
        ("RawButtonRelease", 16); ("RawMotion", 17); ("TouchBegin", 18);
        ("TouchUpdate", 19); ("TouchEnd", 20); ("TouchOwnership", 21);
        ("RawTouchBegin", 22); ("RawTouchUpdate", 23); ("RawTouchEnd", 24);
        ("BarrierHit", 25); ("BarrierLeave", 26)];
      additional_values = []};
    Elaboratetree.Struct {name = "EventMask";
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field_list_length {name = "mask_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "mask_len")};
        Elaboratetree.Field_list_simple {name = "mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xinput";
                       id_name = "XIEventMask" }))
            };
          length = "mask_len"}
        ]};
    Elaboratetree.Request {name = "XISelectEvents"; opcode = 46;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_mask";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_mask")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "masks";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "EventMask" });
            ft_allowed = None };
          length = "num_mask"}
        ];
      reply = None};
    Elaboratetree.Request {name = "XIQueryVersion"; opcode = 47;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "major_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }};
        Elaboratetree.Field {name = "minor_version";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false}
              ])};
    Elaboratetree.Enum {name = "DeviceClassType";
      items =
      [("Key", 0L); ("Button", 1L); ("Valuator", 2L); ("Scroll", 3L);
        ("Touch", 8L)]};
    Elaboratetree.Enum {name = "DeviceType";
      items =
      [("MasterPointer", 1L); ("MasterKeyboard", 2L); ("SlavePointer", 3L);
        ("SlaveKeyboard", 4L); ("FloatingSlave", 5L)]};
    Elaboratetree.Mask {name = "ScrollFlags";
      items = [("NoEmulation", 0); ("Preferred", 1)]; additional_values = []};
    Elaboratetree.Enum {name = "ScrollType";
      items = [("Vertical", 1L); ("Horizontal", 2L)]};
    Elaboratetree.Enum {name = "TouchMode";
      items = [("Direct", 1L); ("Dependent", 2L)]};
    Elaboratetree.Struct {name = "ButtonClass";
      fields =
      [Elaboratetree.Field {name = "type";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceClassType" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_buttons";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_buttons")};
        Elaboratetree.Field_list {name = "state";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length =
          (Some (Elaboratetree.Binop (Parsetree.Div,
                   (Elaboratetree.Binop (Parsetree.Add,
                      (Elaboratetree.Field_ref "num_buttons"),
                      (Elaboratetree.Expr_value 31L))),
                   (Elaboratetree.Expr_value 32L))))};
        Elaboratetree.Field_list_simple {name = "labels";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None };
          length = "num_buttons"}
        ]};
    Elaboratetree.Struct {name = "KeyClass";
      fields =
      [Elaboratetree.Field {name = "type";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceClassType" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_keys";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_keys")};
        Elaboratetree.Field_list_simple {name = "keys";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_keys"}
        ]};
    Elaboratetree.Struct {name = "ScrollClass";
      fields =
      [Elaboratetree.Field {name = "type";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceClassType" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "number";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "scroll_type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "ScrollType" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xinput";
                       id_name = "ScrollFlags" }))
            }};
        Elaboratetree.Field {name = "increment";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Struct {name = "TouchClass";
      fields =
      [Elaboratetree.Field {name = "type";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceClassType" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "TouchMode" }))
            }};
        Elaboratetree.Field {name = "num_touches";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }}
        ]};
    Elaboratetree.Struct {name = "ValuatorClass";
      fields =
      [Elaboratetree.Field {name = "type";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xinput";
                      id_name = "DeviceClassType" }))
           }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "number";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "label";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "min";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "max";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "value";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "resolution";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "ValuatorMode" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ]};
    Elaboratetree.Variant {name = "DeviceClassType";
      items =
      [{ Elaboratetree.vi_name = "Key"; vi_tag = 0L;
         vi_fields =
         [Elaboratetree.Field_list_length {name = "num_keys";
            type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
            expr = (Elaboratetree.Field_ref "num_keys")};
           Elaboratetree.Field_list_simple {name = "keys";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card32);
               ft_allowed = None };
             length = "num_keys"}
           ]
         };
        { Elaboratetree.vi_name = "Button"; vi_tag = 1L;
          vi_fields =
          [Elaboratetree.Field_list_length {name = "num_buttons";
             type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
             expr = (Elaboratetree.Field_ref "num_buttons")};
            Elaboratetree.Field_list {name = "state";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card32);
                ft_allowed = None };
              length =
              (Some (Elaboratetree.Binop (Parsetree.Div,
                       (Elaboratetree.Binop (Parsetree.Add,
                          (Elaboratetree.Field_ref "num_buttons"),
                          (Elaboratetree.Expr_value 31L))),
                       (Elaboratetree.Expr_value 32L))))};
            Elaboratetree.Field_list_simple {name = "labels";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_ref
                   { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
                ft_allowed = None };
              length = "num_buttons"}
            ]
          };
        { Elaboratetree.vi_name = "Valuator"; vi_tag = 2L;
          vi_fields =
          [Elaboratetree.Field {name = "number";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card16);
               ft_allowed = None }};
            Elaboratetree.Field {name = "label";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_ref
                   { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
                ft_allowed = None }};
            Elaboratetree.Field {name = "min";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_ref
                   { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
                ft_allowed = None }};
            Elaboratetree.Field {name = "max";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_ref
                   { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
                ft_allowed = None }};
            Elaboratetree.Field {name = "value";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_ref
                   { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
                ft_allowed = None }};
            Elaboratetree.Field {name = "resolution";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card32);
                ft_allowed = None }};
            Elaboratetree.Field {name = "mode";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card8);
                ft_allowed =
                (Some (Elaboratetree.Allowed_enum
                         { Elaboratetree.id_module = "xinput";
                           id_name = "ValuatorMode" }))
                }};
            Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
              serialize = false}
            ]
          };
        { Elaboratetree.vi_name = "Scroll"; vi_tag = 3L;
          vi_fields =
          [Elaboratetree.Field {name = "number";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card16);
               ft_allowed = None }};
            Elaboratetree.Field {name = "scroll_type";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card16);
                ft_allowed =
                (Some (Elaboratetree.Allowed_enum
                         { Elaboratetree.id_module = "xinput";
                           id_name = "ScrollType" }))
                }};
            Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
              serialize = false};
            Elaboratetree.Field {name = "flags";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card32);
                ft_allowed =
                (Some (Elaboratetree.Allowed_mask
                         { Elaboratetree.id_module = "xinput";
                           id_name = "ScrollFlags" }))
                }};
            Elaboratetree.Field {name = "increment";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_ref
                   { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
                ft_allowed = None }}
            ]
          };
        { Elaboratetree.vi_name = "Touch"; vi_tag = 8L;
          vi_fields =
          [Elaboratetree.Field {name = "mode";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card8);
               ft_allowed =
               (Some (Elaboratetree.Allowed_enum
                        { Elaboratetree.id_module = "xinput";
                          id_name = "TouchMode" }))
               }};
            Elaboratetree.Field {name = "num_touches";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card8);
                ft_allowed = None }}
            ]
          }
        ]};
    Elaboratetree.Struct {name = "DeviceClass";
      fields =
      [Elaboratetree.Field_variant_tag {variant = "data";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card16)};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed = None }};
        Elaboratetree.Field_variant {name = "data";
          variant =
          { Elaboratetree.id_module = "xinput"; id_name = "DeviceClassType" }}
        ]};
    Elaboratetree.Struct {name = "XIDeviceInfo";
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "DeviceType" }))
            }};
        Elaboratetree.Field {name = "attachment";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field_list_length {name = "num_classes";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_classes")};
        Elaboratetree.Field_list_length {name = "name_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "name_len")};
        Elaboratetree.Field {name = "enabled";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "name_len"};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "classes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceClass"
                 });
            ft_allowed = None };
          length = "num_classes"}
        ]};
    Elaboratetree.Request {name = "XIQueryDevice"; opcode = 48;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_infos";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_infos")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "infos";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "XIDeviceInfo" });
                  ft_allowed = None };
                length = "num_infos"}
              ])};
    Elaboratetree.Request {name = "XISetFocus"; opcode = 49;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field {name = "deviceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "XIGetFocus"; opcode = 50;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "focus";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "WINDOW"
                       });
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false}
              ])};
    Elaboratetree.Enum {name = "GrabOwner";
      items = [("NoOwner", 0L); ("Owner", 1L)]};
    Elaboratetree.Request {name = "XIGrabDevice"; opcode = 51;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field {name = "cursor";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "deviceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "GrabMode" }))
            }};
        Elaboratetree.Field {name = "paired_device_mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "GrabMode" }))
            }};
        Elaboratetree.Field {name = "owner_events";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "GrabOwner" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field_list_length {name = "mask_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "mask_len")};
        Elaboratetree.Field_list_simple {name = "mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "mask_len"}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "status";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "GrabStatus" }))
                  }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
                serialize = false}
              ])};
    Elaboratetree.Request {name = "XIUngrabDevice"; opcode = 52;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "time";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
           }};
        Elaboratetree.Field {name = "deviceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Enum {name = "EventMode";
      items =
      [("AsyncDevice", 0L); ("SyncDevice", 1L); ("ReplayDevice", 2L);
        ("AsyncPairedDevice", 3L); ("AsyncPair", 4L); ("SyncPair", 5L);
        ("AcceptTouch", 6L); ("RejectTouch", 7L)]};
    Elaboratetree.Request {name = "XIAllowEvents"; opcode = 53;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "time";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
           }};
        Elaboratetree.Field {name = "deviceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field {name = "event_mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "EventMode" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field {name = "touchid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "grab_window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Enum {name = "GrabMode22";
      items = [("Sync", 0L); ("Async", 1L); ("Touch", 2L)]};
    Elaboratetree.Enum {name = "GrabType";
      items =
      [("Button", 0L); ("Keycode", 1L); ("Enter", 2L); ("FocusIn", 3L);
        ("TouchBegin", 4L)]};
    Elaboratetree.Mask {name = "ModifierMask"; items = [("Any", 31)];
      additional_values = []};
    Elaboratetree.Struct {name = "GrabModifierInfo";
      fields =
      [Elaboratetree.Field {name = "modifiers";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32);
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_mask
                    { Elaboratetree.id_module = "xinput";
                      id_name = "ModifierMask" }))
           }};
        Elaboratetree.Field {name = "status";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "GrabStatus" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ]};
    Elaboratetree.Request {name = "XIPassiveGrabDevice"; opcode = 54;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "time";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
           }};
        Elaboratetree.Field {name = "grab_window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "cursor";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "detail";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "deviceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field_list_length {name = "num_modifiers";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_modifiers")};
        Elaboratetree.Field_list_length {name = "mask_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "mask_len")};
        Elaboratetree.Field {name = "grab_type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "GrabType" }))
            }};
        Elaboratetree.Field {name = "grab_mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "GrabMode22" }))
            }};
        Elaboratetree.Field {name = "paired_device_mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "GrabMode" }))
            }};
        Elaboratetree.Field {name = "owner_events";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "GrabOwner" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "mask_len"};
        Elaboratetree.Field_list_simple {name = "modifiers";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_modifiers"}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_modifiers";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_modifiers")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "modifiers";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "GrabModifierInfo" });
                  ft_allowed = None };
                length = "num_modifiers"}
              ])};
    Elaboratetree.Request {name = "XIPassiveUngrabDevice"; opcode = 55;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "grab_window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "detail";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "deviceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field_list_length {name = "num_modifiers";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_modifiers")};
        Elaboratetree.Field {name = "grab_type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "GrabType" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "modifiers";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_modifiers"}
        ];
      reply = None};
    Elaboratetree.Request {name = "XIListProperties"; opcode = 56;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_properties";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_properties")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "properties";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
                  ft_allowed = None };
                length = "num_properties"}
              ])};
    Elaboratetree.Request {name = "XIChangeProperty"; opcode = 57;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "PropMode" }))
            }};
        Elaboratetree.Field_variant_tag {variant = "items";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "num_items";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_variant {name = "items";
          variant =
          { Elaboratetree.id_module = "xinput"; id_name = "PropertyFormat" }}
        ];
      reply = None};
    Elaboratetree.Request {name = "XIDeleteProperty"; opcode = 58;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "XIGetProperty"; opcode = 59;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "delete";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "len";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "type";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
                  ft_allowed = None }};
              Elaboratetree.Field {name = "bytes_after";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "num_items";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_variant_tag {variant = "items";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 11);
                serialize = false};
              Elaboratetree.Field_variant {name = "items";
                variant =
                { Elaboratetree.id_module = "xinput";
                  id_name = "PropertyFormat" }}
              ])};
    Elaboratetree.Request {name = "XIGetSelectedEvents"; opcode = 60;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_masks";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_masks")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "masks";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xinput";
                       id_name = "EventMask" });
                  ft_allowed = None };
                length = "num_masks"}
              ])};
    Elaboratetree.Struct {name = "BarrierReleasePointerInfo";
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "barrier";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "BARRIER" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "eventid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Request {name = "XIBarrierReleasePointer"; opcode = 61;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field_list_length {name = "num_barriers";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
         expr = (Elaboratetree.Field_ref "num_barriers")};
        Elaboratetree.Field_list_simple {name = "barriers";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput";
                 id_name = "BarrierReleasePointerInfo" });
            ft_allowed = None };
          length = "num_barriers"}
        ];
      reply = None};
    Elaboratetree.Event {name = "DeviceValuator"; number = 0;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "device_state";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "num_valuators";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "first_valuator";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_list {name = "valuators";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            };
          length = (Some (Elaboratetree.Expr_value 6L))}
        ]};
    Elaboratetree.Mask {name = "MoreEventsMask"; items = [("MoreEvents", 7)];
      additional_values = []};
    Elaboratetree.Event {name = "DeviceKeyPress"; number = 1;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "detail";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "root";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "child";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Window"
                       }))
            }};
        Elaboratetree.Field {name = "root_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "root_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "event_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "event_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "state";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xproto";
                       id_name = "KeyButMask" }))
            }};
        Elaboratetree.Field {name = "same_screen";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_mask
                     { Elaboratetree.id_module = "xinput";
                       id_name = "MoreEventsMask" }))
            }}
        ]};
    Elaboratetree.Event_copy {name = "DeviceKeyRelease";
      event =
      { Elaboratetree.id_module = "xinput"; id_name = "DeviceKeyPress" };
      number = 2};
    Elaboratetree.Event_copy {name = "DeviceButtonPress";
      event =
      { Elaboratetree.id_module = "xinput"; id_name = "DeviceKeyPress" };
      number = 3};
    Elaboratetree.Event_copy {name = "DeviceButtonRelease";
      event =
      { Elaboratetree.id_module = "xinput"; id_name = "DeviceKeyPress" };
      number = 4};
    Elaboratetree.Event_copy {name = "DeviceMotionNotify";
      event =
      { Elaboratetree.id_module = "xinput"; id_name = "DeviceKeyPress" };
      number = 5};
    Elaboratetree.Event {name = "DeviceFocusIn"; number = 6;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "detail";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xproto";
                      id_name = "NotifyDetail" }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "window";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "NotifyMode" }))
            }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 18);
          serialize = false}
        ]};
    Elaboratetree.Event_copy {name = "DeviceFocusOut";
      event =
      { Elaboratetree.id_module = "xinput"; id_name = "DeviceFocusIn" };
      number = 7};
    Elaboratetree.Event_copy {name = "ProximityIn";
      event =
      { Elaboratetree.id_module = "xinput"; id_name = "DeviceKeyPress" };
      number = 8};
    Elaboratetree.Event_copy {name = "ProximityOut";
      event =
      { Elaboratetree.id_module = "xinput"; id_name = "DeviceKeyPress" };
      number = 9};
    Elaboratetree.Mask {name = "ClassesReportedMask";
      items =
      [("OutOfProximity", 7); ("DeviceModeAbsolute", 6);
        ("ReportingValuators", 2); ("ReportingButtons", 1);
        ("ReportingKeys", 0)];
      additional_values = []};
    Elaboratetree.Event {name = "DeviceStateNotify"; number = 10;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_mask
                    { Elaboratetree.id_module = "xinput";
                      id_name = "MoreEventsMask" }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "num_keys";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "num_buttons";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "num_valuators";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "classes_reported";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xinput";
                       id_name = "ClassesReportedMask" }))
            }};
        Elaboratetree.Field_list {name = "buttons";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = (Some (Elaboratetree.Expr_value 4L))};
        Elaboratetree.Field_list {name = "keys";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = (Some (Elaboratetree.Expr_value 4L))};
        Elaboratetree.Field_list {name = "valuators";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = (Some (Elaboratetree.Expr_value 3L))}
        ]};
    Elaboratetree.Event {name = "DeviceMappingNotify"; number = 11;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None }};
        Elaboratetree.Field {name = "request";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "Mapping" }))
            }};
        Elaboratetree.Field {name = "first_keycode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "KeyCode" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "count";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
          serialize = false}
        ]};
    Elaboratetree.Enum {name = "ChangeDevice";
      items = [("NewPointer", 0L); ("NewKeyboard", 1L)]};
    Elaboratetree.Event {name = "ChangeDeviceNotify"; number = 12;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "request";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "ChangeDevice" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 23);
          serialize = false}
        ]};
    Elaboratetree.Event {name = "DeviceKeyStateNotify"; number = 13;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_mask
                    { Elaboratetree.id_module = "xinput";
                      id_name = "MoreEventsMask" }))
           }};
        Elaboratetree.Field_list {name = "keys";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = (Some (Elaboratetree.Expr_value 28L))}
        ]};
    Elaboratetree.Event {name = "DeviceButtonStateNotify"; number = 14;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "device_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_mask
                    { Elaboratetree.id_module = "xinput";
                      id_name = "MoreEventsMask" }))
           }};
        Elaboratetree.Field_list {name = "buttons";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = (Some (Elaboratetree.Expr_value 28L))}
        ]};
    Elaboratetree.Enum {name = "DeviceChange";
      items =
      [("Added", 0L); ("Removed", 1L); ("Enabled", 2L); ("Disabled", 3L);
        ("Unrecoverable", 4L); ("ControlChanged", 5L)]};
    Elaboratetree.Event {name = "DevicePresenceNotify"; number = 15;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
         serialize = false};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "devchange";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "DeviceChange" }))
            }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
            }};
        Elaboratetree.Field {name = "control";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
          serialize = false}
        ]};
    Elaboratetree.Event {name = "DevicePropertyNotify"; number = 16;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "state";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xproto";
                      id_name = "Property" }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 19);
          serialize = false};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }}
        ]};
    Elaboratetree.Enum {name = "ChangeReason";
      items = [("SlaveSwitch", 1L); ("DeviceChange", 2L)]};
    Elaboratetree.Event {name = "DeviceChanged"; number = 1;
      is_generic = true; is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field_list_length {name = "num_classes";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_classes")};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field {name = "reason";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "ChangeReason" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 11);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "classes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceClass"
                 });
            ft_allowed = None };
          length = "num_classes"}
        ]};
    Elaboratetree.Mask {name = "KeyEventFlags"; items = [("KeyRepeat", 16)];
      additional_values = []};
    Elaboratetree.Event {name = "KeyPress"; number = 2; is_generic = true;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field {name = "detail";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "root";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "child";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "root_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "root_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "buttons_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "buttons_len")};
        Elaboratetree.Field_list_length {name = "valuators_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "valuators_len")};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xinput";
                       id_name = "KeyEventFlags" }))
            }};
        Elaboratetree.Field {name = "mods";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "ModifierInfo"
                 });
            ft_allowed = None }};
        Elaboratetree.Field {name = "group";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "GroupInfo" });
            ft_allowed = None }};
        Elaboratetree.Field_list_simple {name = "button_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "buttons_len"};
        Elaboratetree.Field_list_simple {name = "valuator_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "valuators_len"};
        Elaboratetree.Field_list {name = "axisvalues";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Elaboratetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Elaboratetree.Pop_count
                           Elaboratetree.List_element_ref))})}
        ]};
    Elaboratetree.Event_copy {name = "KeyRelease";
      event = { Elaboratetree.id_module = "xinput"; id_name = "KeyPress" };
      number = 3};
    Elaboratetree.Mask {name = "PointerEventFlags";
      items = [("PointerEmulated", 16)]; additional_values = []};
    Elaboratetree.Event {name = "ButtonPress"; number = 4; is_generic = true;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field {name = "detail";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "root";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "child";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "root_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "root_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "buttons_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "buttons_len")};
        Elaboratetree.Field_list_length {name = "valuators_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "valuators_len")};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xinput";
                       id_name = "PointerEventFlags" }))
            }};
        Elaboratetree.Field {name = "mods";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "ModifierInfo"
                 });
            ft_allowed = None }};
        Elaboratetree.Field {name = "group";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "GroupInfo" });
            ft_allowed = None }};
        Elaboratetree.Field_list_simple {name = "button_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "buttons_len"};
        Elaboratetree.Field_list_simple {name = "valuator_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "valuators_len"};
        Elaboratetree.Field_list {name = "axisvalues";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Elaboratetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Elaboratetree.Pop_count
                           Elaboratetree.List_element_ref))})}
        ]};
    Elaboratetree.Event_copy {name = "ButtonRelease";
      event = { Elaboratetree.id_module = "xinput"; id_name = "ButtonPress" };
      number = 5};
    Elaboratetree.Event_copy {name = "Motion";
      event = { Elaboratetree.id_module = "xinput"; id_name = "ButtonPress" };
      number = 6};
    Elaboratetree.Enum {name = "NotifyMode";
      items =
      [("Normal", 0L); ("Grab", 1L); ("Ungrab", 2L); ("WhileGrabbed", 3L);
        ("PassiveGrab", 4L); ("PassiveUngrab", 5L)]};
    Elaboratetree.Enum {name = "NotifyDetail";
      items =
      [("Ancestor", 0L); ("Virtual", 1L); ("Inferior", 2L);
        ("Nonlinear", 3L); ("NonlinearVirtual", 4L); ("Pointer", 5L);
        ("PointerRoot", 6L); ("None", 7L)]};
    Elaboratetree.Event {name = "Enter"; number = 7; is_generic = true;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "NotifyMode" }))
            }};
        Elaboratetree.Field {name = "detail";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "NotifyDetail" }))
            }};
        Elaboratetree.Field {name = "root";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "child";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "root_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "root_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "same_screen";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field {name = "focus";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_list_length {name = "buttons_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "buttons_len")};
        Elaboratetree.Field {name = "mods";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "ModifierInfo"
                 });
            ft_allowed = None }};
        Elaboratetree.Field {name = "group";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "GroupInfo" });
            ft_allowed = None }};
        Elaboratetree.Field_list_simple {name = "buttons";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "buttons_len"}
        ]};
    Elaboratetree.Event_copy {name = "Leave";
      event = { Elaboratetree.id_module = "xinput"; id_name = "Enter" };
      number = 8};
    Elaboratetree.Event_copy {name = "FocusIn";
      event = { Elaboratetree.id_module = "xinput"; id_name = "Enter" };
      number = 9};
    Elaboratetree.Event_copy {name = "FocusOut";
      event = { Elaboratetree.id_module = "xinput"; id_name = "Enter" };
      number = 10};
    Elaboratetree.Mask {name = "HierarchyMask";
      items =
      [("MasterAdded", 0); ("MasterRemoved", 1); ("SlaveAdded", 2);
        ("SlaveRemoved", 3); ("SlaveAttached", 4); ("SlaveDetached", 5);
        ("DeviceEnabled", 6); ("DeviceDisabled", 7)];
      additional_values = []};
    Elaboratetree.Struct {name = "HierarchyInfo";
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "attachment";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "DeviceType" }))
            }};
        Elaboratetree.Field {name = "enabled";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xinput";
                       id_name = "HierarchyMask" }))
            }}
        ]};
    Elaboratetree.Event {name = "Hierarchy"; number = 11; is_generic = true;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xinput";
                       id_name = "HierarchyMask" }))
            }};
        Elaboratetree.Field_list_length {name = "num_infos";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_infos")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 10);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "infos";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput";
                 id_name = "HierarchyInfo" });
            ft_allowed = None };
          length = "num_infos"}
        ]};
    Elaboratetree.Enum {name = "PropertyFlag";
      items = [("Deleted", 0L); ("Created", 1L); ("Modified", 2L)]};
    Elaboratetree.Event {name = "Property"; number = 12; is_generic = true;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "what";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "PropertyFlag" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 11);
          serialize = false}
        ]};
    Elaboratetree.Event {name = "RawKeyPress"; number = 13;
      is_generic = true; is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field {name = "detail";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "valuators_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "valuators_len")};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xinput";
                       id_name = "KeyEventFlags" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "valuator_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "valuators_len"};
        Elaboratetree.Field_list {name = "axisvalues";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Elaboratetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Elaboratetree.Pop_count
                           Elaboratetree.List_element_ref))})};
        Elaboratetree.Field_list {name = "axisvalues_raw";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Elaboratetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Elaboratetree.Pop_count
                           Elaboratetree.List_element_ref))})}
        ]};
    Elaboratetree.Event_copy {name = "RawKeyRelease";
      event = { Elaboratetree.id_module = "xinput"; id_name = "RawKeyPress" };
      number = 14};
    Elaboratetree.Event {name = "RawButtonPress"; number = 15;
      is_generic = true; is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field {name = "detail";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "valuators_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "valuators_len")};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xinput";
                       id_name = "PointerEventFlags" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "valuator_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "valuators_len"};
        Elaboratetree.Field_list {name = "axisvalues";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Elaboratetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Elaboratetree.Pop_count
                           Elaboratetree.List_element_ref))})};
        Elaboratetree.Field_list {name = "axisvalues_raw";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Elaboratetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Elaboratetree.Pop_count
                           Elaboratetree.List_element_ref))})}
        ]};
    Elaboratetree.Event_copy {name = "RawButtonRelease";
      event =
      { Elaboratetree.id_module = "xinput"; id_name = "RawButtonPress" };
      number = 16};
    Elaboratetree.Event_copy {name = "RawMotion";
      event =
      { Elaboratetree.id_module = "xinput"; id_name = "RawButtonPress" };
      number = 17};
    Elaboratetree.Mask {name = "TouchEventFlags";
      items = [("TouchPendingEnd", 16); ("TouchEmulatingPointer", 17)];
      additional_values = []};
    Elaboratetree.Event {name = "TouchBegin"; number = 18; is_generic = true;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field {name = "detail";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "root";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "child";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "root_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "root_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "buttons_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "buttons_len")};
        Elaboratetree.Field_list_length {name = "valuators_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "valuators_len")};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xinput";
                       id_name = "TouchEventFlags" }))
            }};
        Elaboratetree.Field {name = "mods";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "ModifierInfo"
                 });
            ft_allowed = None }};
        Elaboratetree.Field {name = "group";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "GroupInfo" });
            ft_allowed = None }};
        Elaboratetree.Field_list_simple {name = "button_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "buttons_len"};
        Elaboratetree.Field_list_simple {name = "valuator_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "valuators_len"};
        Elaboratetree.Field_list {name = "axisvalues";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Elaboratetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Elaboratetree.Pop_count
                           Elaboratetree.List_element_ref))})}
        ]};
    Elaboratetree.Event_copy {name = "TouchUpdate";
      event = { Elaboratetree.id_module = "xinput"; id_name = "TouchBegin" };
      number = 19};
    Elaboratetree.Event_copy {name = "TouchEnd";
      event = { Elaboratetree.id_module = "xinput"; id_name = "TouchBegin" };
      number = 20};
    Elaboratetree.Enum {name = "TouchOwnershipFlags"; items = [("None", 0L)]};
    Elaboratetree.Event {name = "TouchOwnership"; number = 21;
      is_generic = true; is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field {name = "touchid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "root";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "child";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xinput";
                       id_name = "TouchOwnershipFlags" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
          serialize = false}
        ]};
    Elaboratetree.Event {name = "RawTouchBegin"; number = 22;
      is_generic = true; is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field {name = "detail";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "valuators_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "valuators_len")};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xinput";
                       id_name = "TouchEventFlags" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "valuator_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "valuators_len"};
        Elaboratetree.Field_list {name = "axisvalues";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Elaboratetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Elaboratetree.Pop_count
                           Elaboratetree.List_element_ref))})};
        Elaboratetree.Field_list {name = "axisvalues_raw";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
            ft_allowed = None };
          length =
          (Some Elaboratetree.Sum_of {field = "valuator_mask";
                  by_expr =
                  (Some (Elaboratetree.Pop_count
                           Elaboratetree.List_element_ref))})}
        ]};
    Elaboratetree.Event_copy {name = "RawTouchUpdate";
      event =
      { Elaboratetree.id_module = "xinput"; id_name = "RawTouchBegin" };
      number = 23};
    Elaboratetree.Event_copy {name = "RawTouchEnd";
      event =
      { Elaboratetree.id_module = "xinput"; id_name = "RawTouchBegin" };
      number = 24};
    Elaboratetree.Mask {name = "BarrierFlags";
      items = [("PointerReleased", 0); ("DeviceIsGrabbed", 1)];
      additional_values = []};
    Elaboratetree.Event {name = "BarrierHit"; number = 25; is_generic = true;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "deviceid";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
           ft_allowed =
           (Some (Elaboratetree.Allowed_alt_enum
                    { Elaboratetree.id_module = "xinput"; id_name = "Device"
                      }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }};
        Elaboratetree.Field {name = "eventid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "root";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "barrier";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xfixes"; id_name = "BARRIER" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "dtime";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xinput";
                       id_name = "BarrierFlags" }))
            }};
        Elaboratetree.Field {name = "sourceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "DeviceId" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xinput"; id_name = "Device"
                       }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "root_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "root_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP1616" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "dx";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "dy";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "FP3232" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Event_copy {name = "BarrierLeave";
      event = { Elaboratetree.id_module = "xinput"; id_name = "BarrierHit" };
      number = 26};
    Elaboratetree.Event_struct {name = "EventForSend";
      events =
      [{ Elaboratetree.id_module = "xinput"; id_name = "DeviceValuator" };
        { Elaboratetree.id_module = "xinput"; id_name = "DeviceKeyPress" };
        { Elaboratetree.id_module = "xinput"; id_name = "DeviceKeyRelease" };
        { Elaboratetree.id_module = "xinput"; id_name = "DeviceButtonPress" };
        { Elaboratetree.id_module = "xinput"; id_name = "DeviceButtonRelease"
          };
        { Elaboratetree.id_module = "xinput"; id_name = "DeviceMotionNotify"
          };
        { Elaboratetree.id_module = "xinput"; id_name = "DeviceFocusIn" };
        { Elaboratetree.id_module = "xinput"; id_name = "DeviceFocusOut" };
        { Elaboratetree.id_module = "xinput"; id_name = "ProximityIn" };
        { Elaboratetree.id_module = "xinput"; id_name = "ProximityOut" };
        { Elaboratetree.id_module = "xinput"; id_name = "DeviceStateNotify" };
        { Elaboratetree.id_module = "xinput"; id_name = "DeviceMappingNotify"
          };
        { Elaboratetree.id_module = "xinput"; id_name = "ChangeDeviceNotify"
          };
        { Elaboratetree.id_module = "xinput";
          id_name = "DeviceKeyStateNotify" };
        { Elaboratetree.id_module = "xinput";
          id_name = "DeviceButtonStateNotify" };
        { Elaboratetree.id_module = "xinput";
          id_name = "DevicePresenceNotify" };
        { Elaboratetree.id_module = "xinput";
          id_name = "DevicePropertyNotify" }
        ]};
    Elaboratetree.Request {name = "SendExtensionEvent"; opcode = 31;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "destination";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "device_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "propagate";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_list_length {name = "num_classes";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_classes")};
        Elaboratetree.Field_list_length {name = "num_events";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
          expr = (Elaboratetree.Field_ref "num_events")};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "events";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "EventForSend"
                 });
            ft_allowed = None };
          length = "num_events"};
        Elaboratetree.Field_list_simple {name = "classes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xinput"; id_name = "EventClass" });
            ft_allowed = None };
          length = "num_classes"}
        ];
      reply = None};
    Elaboratetree.Error {name = "Device"; number = 0; fields = []};
    Elaboratetree.Error {name = "Event"; number = 1; fields = []};
    Elaboratetree.Error {name = "Mode"; number = 2; fields = []};
    Elaboratetree.Error {name = "DeviceBusy"; number = 3; fields = []};
    Elaboratetree.Error {name = "Class"; number = 4; fields = []}]}
Elaboratetree.Extension {name = "XPrint"; file_name = "xprint";
  query_name = "XpExtension"; multiword = true; version = (1, 0);
  imports = ["xproto"];
  declarations =
  [Elaboratetree.Type_alias {name = "STRING8";
     type_ = (Elaboratetree.Type_primitive Parsetree.Char)};
    Elaboratetree.Struct {name = "PRINTER";
      fields =
      [Elaboratetree.Field_list_length {name = "nameLen";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
         expr = (Elaboratetree.Field_ref "nameLen")};
        Elaboratetree.Field_list_simple {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xprint"; id_name = "STRING8" });
            ft_allowed = None };
          length = "nameLen"};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
          serialize = false};
        Elaboratetree.Field_list_length {name = "descLen";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "descLen")};
        Elaboratetree.Field_list_simple {name = "description";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xprint"; id_name = "STRING8" });
            ft_allowed = None };
          length = "descLen"};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
          serialize = false}
        ]};
    Elaboratetree.Type_alias {name = "PCONTEXT";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Enum {name = "GetDoc";
      items = [("Finished", 0L); ("SecondConsumer", 1L)]};
    Elaboratetree.Mask {name = "EvMask";
      items = [("PrintMask", 0); ("AttributeMask", 1)];
      additional_values = [("NoEventMask", 0L)]};
    Elaboratetree.Enum {name = "Detail";
      items =
      [("StartJobNotify", 1L); ("EndJobNotify", 2L); ("StartDocNotify", 3L);
        ("EndDocNotify", 4L); ("StartPageNotify", 5L); ("EndPageNotify", 6L)]};
    Elaboratetree.Enum {name = "Attr";
      items =
      [("JobAttr", 1L); ("DocAttr", 2L); ("PageAttr", 3L);
        ("PrinterAttr", 4L); ("ServerAttr", 5L); ("MediumAttr", 6L);
        ("SpoolerAttr", 7L)]};
    Elaboratetree.Request {name = "PrintQueryVersion"; opcode = 0;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor_version";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "PrintGetPrinterList"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field_list_length {name = "printerNameLen";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
         expr = (Elaboratetree.Field_ref "printerNameLen")};
        Elaboratetree.Field_list_length {name = "localeLen";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "localeLen")};
        Elaboratetree.Field_list_simple {name = "printer_name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xprint"; id_name = "STRING8" });
            ft_allowed = None };
          length = "printerNameLen"};
        Elaboratetree.Field_list_simple {name = "locale";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xprint"; id_name = "STRING8" });
            ft_allowed = None };
          length = "localeLen"}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "listCount";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "listCount")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "printers";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xprint";
                       id_name = "PRINTER" });
                  ft_allowed = None };
                length = "listCount"}
              ])};
    Elaboratetree.Request {name = "PrintRehashPrinterList"; opcode = 20;
      combine_adjacent = true; fields = []; reply = None};
    Elaboratetree.Request {name = "CreateContext"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field_list_length {name = "printerNameLen";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "printerNameLen")};
        Elaboratetree.Field_list_length {name = "localeLen";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "localeLen")};
        Elaboratetree.Field_list_simple {name = "printerName";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xprint"; id_name = "STRING8" });
            ft_allowed = None };
          length = "printerNameLen"};
        Elaboratetree.Field_list_simple {name = "locale";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xprint"; id_name = "STRING8" });
            ft_allowed = None };
          length = "localeLen"}
        ];
      reply = None};
    Elaboratetree.Request {name = "PrintSetContext"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply = None};
    Elaboratetree.Request {name = "PrintGetContext"; opcode = 4;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "context";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "PrintDestroyContext"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply = None};
    Elaboratetree.Request {name = "PrintGetScreenOfContext"; opcode = 6;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "root";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "WINDOW"
                       });
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "PrintStartJob"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "output_mode";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }}
        ];
      reply = None};
    Elaboratetree.Request {name = "PrintEndJob"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "cancel";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "PrintStartDoc"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "driver_mode";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }}
        ];
      reply = None};
    Elaboratetree.Request {name = "PrintEndDoc"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "cancel";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "PrintPutDocumentData"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "len_data";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "len_data")};
        Elaboratetree.Field_list_length {name = "len_fmt";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "len_fmt")};
        Elaboratetree.Field_list_length {name = "len_options";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "len_options")};
        Elaboratetree.Field_list_simple {name = "data";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
            };
          length = "len_data"};
        Elaboratetree.Field_list_simple {name = "doc_format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xprint"; id_name = "STRING8" });
            ft_allowed = None };
          length = "len_fmt"};
        Elaboratetree.Field_list_simple {name = "options";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xprint"; id_name = "STRING8" });
            ft_allowed = None };
          length = "len_options"}
        ];
      reply = None};
    Elaboratetree.Request {name = "PrintGetDocumentData"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xprint"; id_name = "PCONTEXT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "max_bytes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "status_code";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "finished_flag";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_list_length {name = "dataLen";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "dataLen")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None };
                length = "dataLen"}
              ])};
    Elaboratetree.Request {name = "PrintStartPage"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "PrintEndPage"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "cancel";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "PrintSelectInput"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xprint"; id_name = "PCONTEXT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "event_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "PrintInputSelected"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xprint"; id_name = "PCONTEXT" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "event_mask";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "all_events_mask";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "PrintGetAttributes"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xprint"; id_name = "PCONTEXT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "pool";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "stringLen";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "stringLen")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "attributes";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xprint";
                       id_name = "STRING8" });
                  ft_allowed = None };
                length = "stringLen"}
              ])};
    Elaboratetree.Request {name = "PrintGetOneAttributes"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xprint"; id_name = "PCONTEXT" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "nameLen";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "nameLen")};
        Elaboratetree.Field {name = "pool";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xprint"; id_name = "STRING8" });
            ft_allowed = None };
          length = "nameLen"}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "valueLen";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "valueLen")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "value";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xprint";
                       id_name = "STRING8" });
                  ft_allowed = None };
                length = "valueLen"}
              ])};
    Elaboratetree.Request {name = "PrintSetAttributes"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xprint"; id_name = "PCONTEXT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "stringLen";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pool";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "rule";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list {name = "attributes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xprint"; id_name = "STRING8" });
            ft_allowed = None };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "PrintGetPageDimensions"; opcode = 21;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xprint"; id_name = "PCONTEXT" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "offset_x";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "offset_y";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "reproducible_width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "reproducible_height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "PrintQueryScreens"; opcode = 22;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "listCount";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "listCount")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "roots";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xproto"; id_name = "WINDOW"
                       });
                  ft_allowed = None };
                length = "listCount"}
              ])};
    Elaboratetree.Request {name = "PrintSetImageResolution"; opcode = 23;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xprint"; id_name = "PCONTEXT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "image_resolution";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "status";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Bool);
                 ft_allowed = None }};
              Elaboratetree.Field {name = "previous_resolutions";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "PrintGetImageResolution"; opcode = 24;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xprint"; id_name = "PCONTEXT" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "image_resolution";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Event {name = "Notify"; number = 0; is_generic = false;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "detail";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xprint"; id_name = "PCONTEXT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "cancel";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }}
        ]};
    Elaboratetree.Event {name = "AttributNotify"; number = 1;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "detail";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xprint"; id_name = "PCONTEXT" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Error {name = "BadContext"; number = 0; fields = []};
    Elaboratetree.Error {name = "BadSequence"; number = 1; fields = []}]}
(Elaboratetree.Core
   [Elaboratetree.Struct {name = "CHAR2B";
      fields =
      [Elaboratetree.Field {name = "byte1";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }};
        Elaboratetree.Field {name = "byte2";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }}
        ]};
     Elaboratetree.Type_alias {name = "WINDOW";
       type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
     Elaboratetree.Type_alias {name = "PIXMAP";
       type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
     Elaboratetree.Type_alias {name = "CURSOR";
       type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
     Elaboratetree.Type_alias {name = "FONT";
       type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
     Elaboratetree.Type_alias {name = "GCONTEXT";
       type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
     Elaboratetree.Type_alias {name = "COLORMAP";
       type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
     Elaboratetree.Type_alias {name = "ATOM";
       type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
     Elaboratetree.Type_alias {name = "DRAWABLE";
       type_ =
       (Elaboratetree.Type_union
          [{ Elaboratetree.id_module = "xproto"; id_name = "WINDOW" };
            { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" }])};
     Elaboratetree.Type_alias {name = "FONTABLE";
       type_ =
       (Elaboratetree.Type_union
          [{ Elaboratetree.id_module = "xproto"; id_name = "FONT" };
            { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" }])};
     Elaboratetree.Type_alias {name = "BOOL32";
       type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
     Elaboratetree.Type_alias {name = "VISUALID";
       type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
     Elaboratetree.Type_alias {name = "TIMESTAMP";
       type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
     Elaboratetree.Type_alias {name = "KEYSYM";
       type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
     Elaboratetree.Type_alias {name = "KEYCODE";
       type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
     Elaboratetree.Type_alias {name = "KEYCODE32";
       type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
     Elaboratetree.Type_alias {name = "BUTTON";
       type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
     Elaboratetree.Struct {name = "POINT";
       fields =
       [Elaboratetree.Field {name = "x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ]};
     Elaboratetree.Struct {name = "RECTANGLE";
       fields =
       [Elaboratetree.Field {name = "x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ]};
     Elaboratetree.Struct {name = "ARC";
       fields =
       [Elaboratetree.Field {name = "x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "angle1";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "angle2";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ]};
     Elaboratetree.Struct {name = "FORMAT";
       fields =
       [Elaboratetree.Field {name = "depth";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
         Elaboratetree.Field {name = "bits_per_pixel";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Elaboratetree.Field {name = "scanline_pad";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 5);
           serialize = false}
         ]};
     Elaboratetree.Enum {name = "VisualClass";
       items =
       [("StaticGray", 0L); ("GrayScale", 1L); ("StaticColor", 2L);
         ("PseudoColor", 3L); ("TrueColor", 4L); ("DirectColor", 5L)]};
     Elaboratetree.Struct {name = "VISUALTYPE";
       fields =
       [Elaboratetree.Field {name = "visual_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "VISUALID" });
            ft_allowed = None }};
         Elaboratetree.Field {name = "class";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "VisualClass" }))
             }};
         Elaboratetree.Field {name = "bits_per_rgb_value";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Elaboratetree.Field {name = "colormap_entries";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "red_mask";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field {name = "green_mask";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field {name = "blue_mask";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
           serialize = false}
         ]};
     Elaboratetree.Struct {name = "DEPTH";
       fields =
       [Elaboratetree.Field {name = "depth";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false};
         Elaboratetree.Field_list_length {name = "visuals_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "visuals_len")};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
           serialize = false};
         Elaboratetree.Field_list_simple {name = "visuals";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "VISUALTYPE"
                  });
             ft_allowed = None };
           length = "visuals_len"}
         ]};
     Elaboratetree.Mask {name = "EventMask";
       items =
       [("KeyPress", 0); ("KeyRelease", 1); ("ButtonPress", 2);
         ("ButtonRelease", 3); ("EnterWindow", 4); ("LeaveWindow", 5);
         ("PointerMotion", 6); ("PointerMotionHint", 7);
         ("Button1Motion", 8); ("Button2Motion", 9); ("Button3Motion", 10);
         ("Button4Motion", 11); ("Button5Motion", 12); ("ButtonMotion", 13);
         ("KeymapState", 14); ("Exposure", 15); ("VisibilityChange", 16);
         ("StructureNotify", 17); ("ResizeRedirect", 18);
         ("SubstructureNotify", 19); ("SubstructureRedirect", 20);
         ("FocusChange", 21); ("PropertyChange", 22); ("ColorMapChange", 23);
         ("OwnerGrabButton", 24)];
       additional_values = [("NoEvent", 0L)]};
     Elaboratetree.Enum {name = "BackingStore";
       items = [("NotUseful", 0L); ("WhenMapped", 1L); ("Always", 2L)]};
     Elaboratetree.Struct {name = "SCREEN";
       fields =
       [Elaboratetree.Field {name = "root";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
         Elaboratetree.Field {name = "default_colormap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "white_pixel";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field {name = "black_pixel";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field {name = "current_input_masks";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "EventMask" }))
             }};
         Elaboratetree.Field {name = "width_in_pixels";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height_in_pixels";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "width_in_millimeters";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height_in_millimeters";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "min_installed_maps";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "max_installed_maps";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "root_visual";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "VISUALID" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "backing_stores";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "BackingStore" }))
             }};
         Elaboratetree.Field {name = "save_unders";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
             }};
         Elaboratetree.Field {name = "root_depth";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Elaboratetree.Field_list_length {name = "allowed_depths_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
           expr = (Elaboratetree.Field_ref "allowed_depths_len")};
         Elaboratetree.Field_list_simple {name = "allowed_depths";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DEPTH" });
             ft_allowed = None };
           length = "allowed_depths_len"}
         ]};
     Elaboratetree.Struct {name = "SetupRequest";
       fields =
       [Elaboratetree.Field {name = "byte_order";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false};
         Elaboratetree.Field {name = "protocol_major_version";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "protocol_minor_version";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field_list_length {
           name = "authorization_protocol_name_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "authorization_protocol_name_len")};
         Elaboratetree.Field_list_length {
           name = "authorization_protocol_data_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "authorization_protocol_data_len")};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Elaboratetree.Field_list_simple {
           name = "authorization_protocol_name";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = "authorization_protocol_name_len"};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
           serialize = false};
         Elaboratetree.Field_list_simple {
           name = "authorization_protocol_data";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = "authorization_protocol_data_len"};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
           serialize = false}
         ]};
     Elaboratetree.Struct {name = "SetupFailed";
       fields =
       [Elaboratetree.Field {name = "status";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
         Elaboratetree.Field_list_length {name = "reason_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
           expr = (Elaboratetree.Field_ref "reason_len")};
         Elaboratetree.Field {name = "protocol_major_version";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "protocol_minor_version";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "length";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field_list_simple {name = "reason";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = "reason_len"}
         ]};
     Elaboratetree.Struct {name = "SetupAuthenticate";
       fields =
       [Elaboratetree.Field {name = "status";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 5);
           serialize = false};
         Elaboratetree.Field_list_length {name = "length";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr =
           (Elaboratetree.Binop (Parsetree.Div,
              (Elaboratetree.Field_ref "length"),
              (Elaboratetree.Expr_value 4L)))};
         Elaboratetree.Field_list_simple {name = "reason";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = "length"}
         ]};
     Elaboratetree.Enum {name = "ImageOrder";
       items = [("LSBFirst", 0L); ("MSBFirst", 1L)]};
     Elaboratetree.Struct {name = "Setup";
       fields =
       [Elaboratetree.Field {name = "status";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false};
         Elaboratetree.Field {name = "protocol_major_version";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "protocol_minor_version";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "length";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "release_number";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field {name = "resource_id_base";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field {name = "resource_id_mask";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field {name = "motion_buffer_size";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_list_length {name = "vendor_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "vendor_len")};
         Elaboratetree.Field {name = "maximum_request_length";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field_list_length {name = "roots_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
           expr = (Elaboratetree.Field_ref "roots_len")};
         Elaboratetree.Field_list_length {name = "pixmap_formats_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
           expr = (Elaboratetree.Field_ref "pixmap_formats_len")};
         Elaboratetree.Field {name = "image_byte_order";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "ImageOrder" }))
             }};
         Elaboratetree.Field {name = "bitmap_format_bit_order";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "ImageOrder" }))
             }};
         Elaboratetree.Field {name = "bitmap_format_scanline_unit";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Elaboratetree.Field {name = "bitmap_format_scanline_pad";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Elaboratetree.Field {name = "min_keycode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "KEYCODE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "max_keycode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "KEYCODE" });
             ft_allowed = None }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
           serialize = false};
         Elaboratetree.Field_list_simple {name = "vendor";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = "vendor_len"};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
           serialize = false};
         Elaboratetree.Field_list_simple {name = "pixmap_formats";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "FORMAT" });
             ft_allowed = None };
           length = "pixmap_formats_len"};
         Elaboratetree.Field_list_simple {name = "roots";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "SCREEN" });
             ft_allowed = None };
           length = "roots_len"}
         ]};
     Elaboratetree.Mask {name = "ModMask";
       items =
       [("Shift", 0); ("Lock", 1); ("Control", 2); ("1", 3); ("2", 4);
         ("3", 5); ("4", 6); ("5", 7); ("Any", 15)];
       additional_values = []};
     Elaboratetree.Mask {name = "KeyButMask";
       items =
       [("Shift", 0); ("Lock", 1); ("Control", 2); ("Mod1", 3); ("Mod2", 4);
         ("Mod3", 5); ("Mod4", 6); ("Mod5", 7); ("Button1", 8);
         ("Button2", 9); ("Button3", 10); ("Button4", 11); ("Button5", 12)];
       additional_values = []};
     Elaboratetree.Enum {name = "Window"; items = [("None", 0L)]};
     Elaboratetree.Event {name = "KeyPress"; number = 2; is_generic = false;
       is_serializable = false; no_sequence_number = false;
       fields =
       [Elaboratetree.Field {name = "detail";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "KEYCODE" });
            ft_allowed = None }};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "root";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "event";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "child";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Window" }))
             }};
         Elaboratetree.Field {name = "root_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "root_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "event_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "event_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "state";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "KeyButMask" }))
             }};
         Elaboratetree.Field {name = "same_screen";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ]};
     Elaboratetree.Event_copy {name = "KeyRelease";
       event = { Elaboratetree.id_module = "xproto"; id_name = "KeyPress" };
       number = 3};
     Elaboratetree.Mask {name = "ButtonMask";
       items =
       [("1", 8); ("2", 9); ("3", 10); ("4", 11); ("5", 12); ("Any", 15)];
       additional_values = []};
     Elaboratetree.Event {name = "ButtonPress"; number = 4;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field {name = "detail";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "BUTTON" });
            ft_allowed = None }};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "root";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "event";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "child";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Window" }))
             }};
         Elaboratetree.Field {name = "root_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "root_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "event_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "event_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "state";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "KeyButMask" }))
             }};
         Elaboratetree.Field {name = "same_screen";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ]};
     Elaboratetree.Event_copy {name = "ButtonRelease";
       event =
       { Elaboratetree.id_module = "xproto"; id_name = "ButtonPress" };
       number = 5};
     Elaboratetree.Enum {name = "Motion";
       items = [("Normal", 0L); ("Hint", 1L)]};
     Elaboratetree.Event {name = "MotionNotify"; number = 6;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field {name = "detail";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Motion"
                       }))
            }};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "root";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "event";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "child";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Window" }))
             }};
         Elaboratetree.Field {name = "root_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "root_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "event_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "event_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "state";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "KeyButMask" }))
             }};
         Elaboratetree.Field {name = "same_screen";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ]};
     Elaboratetree.Enum {name = "NotifyDetail";
       items =
       [("Ancestor", 0L); ("Virtual", 1L); ("Inferior", 2L);
         ("Nonlinear", 3L); ("NonlinearVirtual", 4L); ("Pointer", 5L);
         ("PointerRoot", 6L); ("None", 7L)]};
     Elaboratetree.Enum {name = "NotifyMode";
       items =
       [("Normal", 0L); ("Grab", 1L); ("Ungrab", 2L); ("WhileGrabbed", 3L)]};
     Elaboratetree.Event {name = "EnterNotify"; number = 7;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field {name = "detail";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "NotifyDetail" }))
            }};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "root";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "event";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "child";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Window" }))
             }};
         Elaboratetree.Field {name = "root_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "root_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "event_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "event_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "state";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "KeyButMask" }))
             }};
         Elaboratetree.Field {name = "mode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "NotifyMode" }))
             }};
         Elaboratetree.Field {name = "same_screen_focus";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
             }}
         ]};
     Elaboratetree.Event_copy {name = "LeaveNotify";
       event =
       { Elaboratetree.id_module = "xproto"; id_name = "EnterNotify" };
       number = 8};
     Elaboratetree.Event {name = "FocusIn"; number = 9; is_generic = false;
       is_serializable = false; no_sequence_number = false;
       fields =
       [Elaboratetree.Field {name = "detail";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "NotifyDetail" }))
            }};
         Elaboratetree.Field {name = "event";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "mode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "NotifyMode" }))
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ]};
     Elaboratetree.Event_copy {name = "FocusOut";
       event = { Elaboratetree.id_module = "xproto"; id_name = "FocusIn" };
       number = 10};
     Elaboratetree.Event {name = "KeymapNotify"; number = 11;
       is_generic = false; is_serializable = false;
       no_sequence_number = true;
       fields =
       [Elaboratetree.Field_list {name = "keys";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = (Some (Elaboratetree.Expr_value 31L))}
         ]};
     Elaboratetree.Event {name = "Expose"; number = 12; is_generic = false;
       is_serializable = false; no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "count";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ]};
     Elaboratetree.Event {name = "GraphicsExposure"; number = 13;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "minor_opcode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "count";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "major_opcode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ]};
     Elaboratetree.Event {name = "NoExposure"; number = 14;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "minor_opcode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "major_opcode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ]};
     Elaboratetree.Enum {name = "Visibility";
       items =
       [("Unobscured", 0L); ("PartiallyObscured", 1L); ("FullyObscured", 2L)]};
     Elaboratetree.Event {name = "VisibilityNotify"; number = 15;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "state";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Visibility" }))
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ]};
     Elaboratetree.Event {name = "CreateNotify"; number = 16;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "parent";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "border_width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "override_redirect";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ]};
     Elaboratetree.Event {name = "DestroyNotify"; number = 17;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "event";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }}
         ]};
     Elaboratetree.Event {name = "UnmapNotify"; number = 18;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "event";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "from_configure";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ]};
     Elaboratetree.Event {name = "MapNotify"; number = 19;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "event";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "override_redirect";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ]};
     Elaboratetree.Event {name = "MapRequest"; number = 20;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "parent";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }}
         ]};
     Elaboratetree.Event {name = "ReparentNotify"; number = 21;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "event";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "parent";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "override_redirect";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ]};
     Elaboratetree.Event {name = "ConfigureNotify"; number = 22;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "event";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "above_sibling";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Window" }))
             }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "border_width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "override_redirect";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ]};
     Elaboratetree.Enum {name = "StackMode";
       items =
       [("Above", 0L); ("Below", 1L); ("TopIf", 2L); ("BottomIf", 3L);
         ("Opposite", 4L)]};
     Elaboratetree.Mask {name = "ConfigWindow";
       items =
       [("X", 0); ("Y", 1); ("Width", 2); ("Height", 3); ("BorderWidth", 4);
         ("Sibling", 5); ("StackMode", 6)];
       additional_values = []};
     Elaboratetree.Event {name = "ConfigureRequest"; number = 23;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field {name = "stack_mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "StackMode" }))
            }};
         Elaboratetree.Field {name = "parent";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "sibling";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Window" }))
             }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "border_width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "value_mask";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "ConfigWindow" }))
             }}
         ]};
     Elaboratetree.Event {name = "GravityNotify"; number = 24;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "event";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ]};
     Elaboratetree.Event {name = "ResizeRequest"; number = 25;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ]};
     Elaboratetree.Enum {name = "Place";
       items = [("OnTop", 0L); ("OnBottom", 1L)]};
     Elaboratetree.Event {name = "CirculateNotify"; number = 26;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "event";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
           serialize = false};
         Elaboratetree.Field {name = "place";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Place"
                        }))
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ]};
     Elaboratetree.Event_copy {name = "CirculateRequest";
       event =
       { Elaboratetree.id_module = "xproto"; id_name = "CirculateNotify" };
       number = 27};
     Elaboratetree.Enum {name = "Property";
       items = [("NewValue", 0L); ("Delete", 1L)]};
     Elaboratetree.Event {name = "PropertyNotify"; number = 28;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "atom";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "state";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Property" }))
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ]};
     Elaboratetree.Event {name = "SelectionClear"; number = 29;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "owner";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "selection";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }}
         ]};
     Elaboratetree.Enum {name = "Time"; items = [("CurrentTime", 0L)]};
     Elaboratetree.Enum {name = "Atom";
       items =
       [("None", 0L); ("Any", 0L); ("PRIMARY", 1L); ("SECONDARY", 2L);
         ("ARC", 3L); ("ATOM", 4L); ("BITMAP", 5L); ("CARDINAL", 6L);
         ("COLORMAP", 7L); ("CURSOR", 8L); ("CUT_BUFFER0", 9L);
         ("CUT_BUFFER1", 10L); ("CUT_BUFFER2", 11L); ("CUT_BUFFER3", 12L);
         ("CUT_BUFFER4", 13L); ("CUT_BUFFER5", 14L); ("CUT_BUFFER6", 15L);
         ("CUT_BUFFER7", 16L); ("DRAWABLE", 17L); ("FONT", 18L);
         ("INTEGER", 19L); ("PIXMAP", 20L); ("POINT", 21L);
         ("RECTANGLE", 22L); ("RESOURCE_MANAGER", 23L);
         ("RGB_COLOR_MAP", 24L); ("RGB_BEST_MAP", 25L);
         ("RGB_BLUE_MAP", 26L); ("RGB_DEFAULT_MAP", 27L);
         ("RGB_GRAY_MAP", 28L); ("RGB_GREEN_MAP", 29L); ("RGB_RED_MAP", 30L);
         ("STRING", 31L); ("VISUALID", 32L); ("WINDOW", 33L);
         ("WM_COMMAND", 34L); ("WM_HINTS", 35L); ("WM_CLIENT_MACHINE", 36L);
         ("WM_ICON_NAME", 37L); ("WM_ICON_SIZE", 38L); ("WM_NAME", 39L);
         ("WM_NORMAL_HINTS", 40L); ("WM_SIZE_HINTS", 41L);
         ("WM_ZOOM_HINTS", 42L); ("MIN_SPACE", 43L); ("NORM_SPACE", 44L);
         ("MAX_SPACE", 45L); ("END_SPACE", 46L); ("SUPERSCRIPT_X", 47L);
         ("SUPERSCRIPT_Y", 48L); ("SUBSCRIPT_X", 49L); ("SUBSCRIPT_Y", 50L);
         ("UNDERLINE_POSITION", 51L); ("UNDERLINE_THICKNESS", 52L);
         ("STRIKEOUT_ASCENT", 53L); ("STRIKEOUT_DESCENT", 54L);
         ("ITALIC_ANGLE", 55L); ("X_HEIGHT", 56L); ("QUAD_WIDTH", 57L);
         ("WEIGHT", 58L); ("POINT_SIZE", 59L); ("RESOLUTION", 60L);
         ("COPYRIGHT", 61L); ("NOTICE", 62L); ("FONT_NAME", 63L);
         ("FAMILY_NAME", 64L); ("FULL_NAME", 65L); ("CAP_HEIGHT", 66L);
         ("WM_CLASS", 67L); ("WM_TRANSIENT_FOR", 68L)]};
     Elaboratetree.Event {name = "SelectionRequest"; number = 30;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Time"
                        }))
             }};
         Elaboratetree.Field {name = "owner";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "requestor";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "selection";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "target";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "property";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Atom"
                        }))
             }}
         ]};
     Elaboratetree.Event {name = "SelectionNotify"; number = 31;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Time"
                        }))
             }};
         Elaboratetree.Field {name = "requestor";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "selection";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "target";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "property";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Atom"
                        }))
             }}
         ]};
     Elaboratetree.Enum {name = "ColormapState";
       items = [("Uninstalled", 0L); ("Installed", 1L)]};
     Elaboratetree.Enum {name = "Colormap"; items = [("None", 0L)]};
     Elaboratetree.Event {name = "ColormapNotify"; number = 32;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "colormap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Colormap" }))
             }};
         Elaboratetree.Field {name = "new";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
             }};
         Elaboratetree.Field {name = "state";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "ColormapState" }))
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ]};
     Elaboratetree.Enum {name = "ClientMessageDataFormat";
       items = [("data8", 8L); ("data16", 16L); ("data32", 32L)]};
     Elaboratetree.Variant {name = "ClientMessageDataFormat";
       items =
       [{ Elaboratetree.vi_name = "data8"; vi_tag = 8L;
          vi_fields =
          [Elaboratetree.Field_list {name = "data8";
             type_ =
             { Elaboratetree.ft_type =
               (Elaboratetree.Type_primitive Parsetree.Card8);
               ft_allowed = None };
             length = (Some (Elaboratetree.Expr_value 20L))}
            ]
          };
         { Elaboratetree.vi_name = "data16"; vi_tag = 16L;
           vi_fields =
           [Elaboratetree.Field_list {name = "data16";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card16);
                ft_allowed = None };
              length = (Some (Elaboratetree.Expr_value 10L))}
             ]
           };
         { Elaboratetree.vi_name = "data32"; vi_tag = 32L;
           vi_fields =
           [Elaboratetree.Field_list {name = "data32";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card32);
                ft_allowed = None };
              length = (Some (Elaboratetree.Expr_value 5L))}
             ]
           }
         ]};
     Elaboratetree.Event {name = "ClientMessage"; number = 33;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_variant_tag {variant = "data";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card8)};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "type";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }};
         Elaboratetree.Field_variant {name = "data";
           variant =
           { Elaboratetree.id_module = "xproto";
             id_name = "ClientMessageDataFormat" }}
         ]};
     Elaboratetree.Enum {name = "Mapping";
       items = [("Modifier", 0L); ("Keyboard", 1L); ("Pointer", 2L)]};
     Elaboratetree.Event {name = "MappingNotify"; number = 34;
       is_generic = false; is_serializable = false;
       no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "request";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Mapping" }))
             }};
         Elaboratetree.Field {name = "first_keycode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "KEYCODE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "count";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ]};
     Elaboratetree.Event {name = "GeGeneric"; number = 35; is_generic = true;
       is_serializable = false; no_sequence_number = false;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
          serialize = false}
         ]};
     Elaboratetree.Error {name = "Request"; number = 1;
       fields =
       [Elaboratetree.Field {name = "bad_value";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
         Elaboratetree.Field {name = "minor_opcode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "major_opcode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ]};
     Elaboratetree.Error {name = "Value"; number = 2;
       fields =
       [Elaboratetree.Field {name = "bad_value";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
         Elaboratetree.Field {name = "minor_opcode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "major_opcode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ]};
     Elaboratetree.Error_copy {name = "Window";
       error = { Elaboratetree.id_module = "xproto"; id_name = "Value" };
       number = 3};
     Elaboratetree.Error_copy {name = "Pixmap";
       error = { Elaboratetree.id_module = "xproto"; id_name = "Value" };
       number = 4};
     Elaboratetree.Error_copy {name = "Atom";
       error = { Elaboratetree.id_module = "xproto"; id_name = "Value" };
       number = 5};
     Elaboratetree.Error_copy {name = "Cursor";
       error = { Elaboratetree.id_module = "xproto"; id_name = "Value" };
       number = 6};
     Elaboratetree.Error_copy {name = "Font";
       error = { Elaboratetree.id_module = "xproto"; id_name = "Value" };
       number = 7};
     Elaboratetree.Error_copy {name = "Match";
       error = { Elaboratetree.id_module = "xproto"; id_name = "Request" };
       number = 8};
     Elaboratetree.Error_copy {name = "Drawable";
       error = { Elaboratetree.id_module = "xproto"; id_name = "Value" };
       number = 9};
     Elaboratetree.Error_copy {name = "Access";
       error = { Elaboratetree.id_module = "xproto"; id_name = "Request" };
       number = 10};
     Elaboratetree.Error_copy {name = "Alloc";
       error = { Elaboratetree.id_module = "xproto"; id_name = "Request" };
       number = 11};
     Elaboratetree.Error_copy {name = "Colormap";
       error = { Elaboratetree.id_module = "xproto"; id_name = "Value" };
       number = 12};
     Elaboratetree.Error_copy {name = "GContext";
       error = { Elaboratetree.id_module = "xproto"; id_name = "Value" };
       number = 13};
     Elaboratetree.Error_copy {name = "IDChoice";
       error = { Elaboratetree.id_module = "xproto"; id_name = "Value" };
       number = 14};
     Elaboratetree.Error_copy {name = "Name";
       error = { Elaboratetree.id_module = "xproto"; id_name = "Request" };
       number = 15};
     Elaboratetree.Error_copy {name = "Length";
       error = { Elaboratetree.id_module = "xproto"; id_name = "Request" };
       number = 16};
     Elaboratetree.Error_copy {name = "Implementation";
       error = { Elaboratetree.id_module = "xproto"; id_name = "Request" };
       number = 17};
     Elaboratetree.Enum {name = "WindowClass";
       items =
       [("CopyFromParent", 0L); ("InputOutput", 1L); ("InputOnly", 2L)]};
     Elaboratetree.Mask {name = "CW";
       items =
       [("BackPixmap", 0); ("BackPixel", 1); ("BorderPixmap", 2);
         ("BorderPixel", 3); ("BitGravity", 4); ("WinGravity", 5);
         ("BackingStore", 6); ("BackingPlanes", 7); ("BackingPixel", 8);
         ("OverrideRedirect", 9); ("SaveUnder", 10); ("EventMask", 11);
         ("DontPropagate", 12); ("Colormap", 13); ("Cursor", 14)];
       additional_values = []};
     Elaboratetree.Enum {name = "BackPixmap";
       items = [("None", 0L); ("ParentRelative", 1L)]};
     Elaboratetree.Enum {name = "Gravity";
       items =
       [("BitForget", 0L); ("WinUnmap", 0L); ("NorthWest", 1L);
         ("North", 2L); ("NorthEast", 3L); ("West", 4L); ("Center", 5L);
         ("East", 6L); ("SouthWest", 7L); ("South", 8L); ("SouthEast", 9L);
         ("Static", 10L)]};
     Elaboratetree.Enum {name = "Pixmap"; items = [("None", 0L)]};
     Elaboratetree.Enum {name = "Cursor"; items = [("None", 0L)]};
     Elaboratetree.Request {name = "CreateWindow"; opcode = 1;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "depth";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
         Elaboratetree.Field {name = "wid";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "parent";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "border_width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "class";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "WindowClass" }))
             }};
         Elaboratetree.Field {name = "visual";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "VISUALID" });
             ft_allowed = None }};
         Elaboratetree.Field_optional_mask {name = "value_mask";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
         Elaboratetree.Field_optional {name = "background_pixmap";
           mask = "value_mask"; bit = 0;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "BackPixmap" }))
             }};
         Elaboratetree.Field_optional {name = "background_pixel";
           mask = "value_mask"; bit = 1;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "border_pixmap";
           mask = "value_mask"; bit = 2;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Pixmap" }))
             }};
         Elaboratetree.Field_optional {name = "border_pixel";
           mask = "value_mask"; bit = 3;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "bit_gravity";
           mask = "value_mask"; bit = 4;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Gravity" }))
             }};
         Elaboratetree.Field_optional {name = "win_gravity";
           mask = "value_mask"; bit = 5;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Gravity" }))
             }};
         Elaboratetree.Field_optional {name = "backing_store";
           mask = "value_mask"; bit = 6;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "BackingStore" }))
             }};
         Elaboratetree.Field_optional {name = "backing_planes";
           mask = "value_mask"; bit = 7;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "backing_pixel";
           mask = "value_mask"; bit = 8;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "override_redirect";
           mask = "value_mask"; bit = 9;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "BOOL32" });
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "save_under";
           mask = "value_mask"; bit = 10;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "BOOL32" });
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "event_mask";
           mask = "value_mask"; bit = 11;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "EventMask" }))
             }};
         Elaboratetree.Field_optional {name = "do_not_propogate_mask";
           mask = "value_mask"; bit = 12;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "EventMask" }))
             }};
         Elaboratetree.Field_optional {name = "colormap";
           mask = "value_mask"; bit = 13;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Colormap" }))
             }};
         Elaboratetree.Field_optional {name = "cursor"; mask = "value_mask";
           bit = 14;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Cursor" }))
             }}
         ];
       reply = None};
     Elaboratetree.Request {name = "ChangeWindowAttributes"; opcode = 2;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field_optional_mask {name = "value_mask";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
         Elaboratetree.Field_optional {name = "background_pixmap";
           mask = "value_mask"; bit = 0;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "BackPixmap" }))
             }};
         Elaboratetree.Field_optional {name = "background_pixel";
           mask = "value_mask"; bit = 1;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "border_pixmap";
           mask = "value_mask"; bit = 2;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Pixmap" }))
             }};
         Elaboratetree.Field_optional {name = "border_pixel";
           mask = "value_mask"; bit = 3;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "bit_gravity";
           mask = "value_mask"; bit = 4;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Gravity" }))
             }};
         Elaboratetree.Field_optional {name = "win_gravity";
           mask = "value_mask"; bit = 5;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Gravity" }))
             }};
         Elaboratetree.Field_optional {name = "backing_store";
           mask = "value_mask"; bit = 6;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "BackingStore" }))
             }};
         Elaboratetree.Field_optional {name = "backing_planes";
           mask = "value_mask"; bit = 7;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "backing_pixel";
           mask = "value_mask"; bit = 8;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "override_redirect";
           mask = "value_mask"; bit = 9;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "BOOL32" });
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "save_under";
           mask = "value_mask"; bit = 10;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "BOOL32" });
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "event_mask";
           mask = "value_mask"; bit = 11;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "EventMask" }))
             }};
         Elaboratetree.Field_optional {name = "do_not_propogate_mask";
           mask = "value_mask"; bit = 12;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "EventMask" }))
             }};
         Elaboratetree.Field_optional {name = "colormap";
           mask = "value_mask"; bit = 13;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Colormap" }))
             }};
         Elaboratetree.Field_optional {name = "cursor"; mask = "value_mask";
           bit = 14;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Cursor" }))
             }}
         ];
       reply = None};
     Elaboratetree.Enum {name = "MapState";
       items = [("Unmapped", 0L); ("Unviewable", 1L); ("Viewable", 2L)]};
     Elaboratetree.Request {name = "GetWindowAttributes"; opcode = 3;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field {name = "backing_store";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "BackingStore" }))
                  }};
               Elaboratetree.Field {name = "visual";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "VISUALID" });
                   ft_allowed = None }};
               Elaboratetree.Field {name = "class";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_enum
                            { Elaboratetree.id_module = "xproto";
                              id_name = "WindowClass" }))
                   }};
               Elaboratetree.Field {name = "bit_gravity";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card8);
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_enum
                            { Elaboratetree.id_module = "xproto";
                              id_name = "Gravity" }))
                   }};
               Elaboratetree.Field {name = "win_gravity";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card8);
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_enum
                            { Elaboratetree.id_module = "xproto";
                              id_name = "Gravity" }))
                   }};
               Elaboratetree.Field {name = "backing_planes";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "backing_pixel";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "save_under";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Bool);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "map_is_installed";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Bool);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "map_state";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card8);
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_enum
                            { Elaboratetree.id_module = "xproto";
                              id_name = "MapState" }))
                   }};
               Elaboratetree.Field {name = "override_redirect";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Bool);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "colormap";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "COLORMAP" });
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_alt_enum
                            { Elaboratetree.id_module = "xproto";
                              id_name = "Colormap" }))
                   }};
               Elaboratetree.Field {name = "all_event_masks";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_mask
                            { Elaboratetree.id_module = "xproto";
                              id_name = "EventMask" }))
                   }};
               Elaboratetree.Field {name = "your_event_mask";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_mask
                            { Elaboratetree.id_module = "xproto";
                              id_name = "EventMask" }))
                   }};
               Elaboratetree.Field {name = "do_not_propagate_mask";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_mask
                            { Elaboratetree.id_module = "xproto";
                              id_name = "EventMask" }))
                   }};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                 serialize = false}
               ])};
     Elaboratetree.Request {name = "DestroyWindow"; opcode = 4;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "DestroySubwindows"; opcode = 5;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Enum {name = "SetMode";
       items = [("Insert", 0L); ("Delete", 1L)]};
     Elaboratetree.Request {name = "ChangeSaveSet"; opcode = 6;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "SetMode" }))
            }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "ReparentWindow"; opcode = 7;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "parent";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "MapWindow"; opcode = 8;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "MapSubwindows"; opcode = 9;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "UnmapWindow"; opcode = 10;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "UnmapSubwindows"; opcode = 11;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "ConfigureWindow"; opcode = 12;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field_optional_mask {name = "value_mask";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16)};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Elaboratetree.Field_optional {name = "x"; mask = "value_mask";
           bit = 0;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "y"; mask = "value_mask";
           bit = 1;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "width"; mask = "value_mask";
           bit = 2;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "height"; mask = "value_mask";
           bit = 3;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "border_width";
           mask = "value_mask"; bit = 4;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "sibling"; mask = "value_mask";
           bit = 5;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Window" }))
             }};
         Elaboratetree.Field_optional {name = "stack_mode";
           mask = "value_mask"; bit = 6;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "StackMode" }))
             }}
         ];
       reply = None};
     Elaboratetree.Enum {name = "Circulate";
       items = [("RaiseLowest", 0L); ("LowerHighest", 1L)]};
     Elaboratetree.Request {name = "CirculateWindow"; opcode = 13;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "direction";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "Circulate" }))
            }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "GetGeometry"; opcode = 14;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field {name = "depth";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None }};
               Elaboratetree.Field {name = "root";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "WINDOW" });
                   ft_allowed = None }};
               Elaboratetree.Field {name = "x";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "y";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "width";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "height";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "border_width";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                 serialize = false}
               ])};
     Elaboratetree.Request {name = "QueryTree"; opcode = 15;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field {name = "root";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "WINDOW" });
                   ft_allowed = None }};
               Elaboratetree.Field {name = "parent";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "WINDOW" });
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_alt_enum
                            { Elaboratetree.id_module = "xproto";
                              id_name = "Window" }))
                   }};
               Elaboratetree.Field_list_length {name = "children_len";
                 type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                 expr = (Elaboratetree.Field_ref "children_len")};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 14);
                 serialize = false};
               Elaboratetree.Field_list_simple {name = "children";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "WINDOW" });
                   ft_allowed = None };
                 length = "children_len"}
               ])};
     Elaboratetree.Request {name = "InternAtom"; opcode = 16;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "only_if_exists";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
         Elaboratetree.Field_list_length {name = "name_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "name_len")};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Elaboratetree.Field_list_simple {name = "name";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = "name_len"}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field {name = "atom";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto"; id_name = "ATOM"
                        });
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_alt_enum
                            { Elaboratetree.id_module = "xproto";
                              id_name = "Atom" }))
                   }}
               ])};
     Elaboratetree.Request {name = "GetAtomName"; opcode = 17;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "atom";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field_list_length {name = "name_len";
                 type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                 expr = (Elaboratetree.Field_ref "name_len")};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                 serialize = false};
               Elaboratetree.Field_list_simple {name = "name";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Char);
                   ft_allowed = None };
                 length = "name_len"}
               ])};
     Elaboratetree.Enum {name = "PropMode";
       items = [("Replace", 0L); ("Prepend", 1L); ("Append", 2L)]};
     Elaboratetree.Request {name = "ChangeProperty"; opcode = 18;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "PropMode" }))
            }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "property";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "type";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "format";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false};
         Elaboratetree.Field {name = "data_len";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_list {name = "data";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Void); ft_allowed = None
             };
           length =
           (Some (Elaboratetree.Binop (Parsetree.Div,
                    (Elaboratetree.Binop (Parsetree.Mul,
                       (Elaboratetree.Field_ref "data_len"),
                       (Elaboratetree.Field_ref "format"))),
                    (Elaboratetree.Expr_value 8L))))}
         ];
       reply = None};
     Elaboratetree.Request {name = "DeleteProperty"; opcode = 19;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "property";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Enum {name = "GetPropertyType"; items = [("Any", 0L)]};
     Elaboratetree.Request {name = "GetProperty"; opcode = 20;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "delete";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "property";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "type";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "GetPropertyType" }))
             }};
         Elaboratetree.Field {name = "long_offset";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field {name = "long_length";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field {name = "format";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None }};
               Elaboratetree.Field {name = "type";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto"; id_name = "ATOM"
                        });
                   ft_allowed = None }};
               Elaboratetree.Field {name = "bytes_after";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "value_len";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed = None }};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                 serialize = false};
               Elaboratetree.Field_list {name = "value";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Void);
                   ft_allowed = None };
                 length =
                 (Some (Elaboratetree.Binop (Parsetree.Mul,
                          (Elaboratetree.Field_ref "value_len"),
                          (Elaboratetree.Binop (Parsetree.Div,
                             (Elaboratetree.Field_ref "format"),
                             (Elaboratetree.Expr_value 8L)))
                          )))}
               ])};
     Elaboratetree.Request {name = "ListProperties"; opcode = 21;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field_list_length {name = "atoms_len";
                 type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                 expr = (Elaboratetree.Field_ref "atoms_len")};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                 serialize = false};
               Elaboratetree.Field_list_simple {name = "atoms";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto"; id_name = "ATOM"
                        });
                   ft_allowed = None };
                 length = "atoms_len"}
               ])};
     Elaboratetree.Request {name = "SetSelectionOwner"; opcode = 22;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "owner";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Window" }))
             }};
         Elaboratetree.Field {name = "selection";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Time"
                        }))
             }}
         ];
       reply = None};
     Elaboratetree.Request {name = "GetSelectionOwner"; opcode = 23;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "selection";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field {name = "owner";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "WINDOW" });
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_alt_enum
                            { Elaboratetree.id_module = "xproto";
                              id_name = "Window" }))
                   }}
               ])};
     Elaboratetree.Request {name = "ConvertSelection"; opcode = 24;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "requestor";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "selection";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "target";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "property";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Atom"
                        }))
             }};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Time"
                        }))
             }}
         ];
       reply = None};
     Elaboratetree.Enum {name = "SendEventDest";
       items = [("PointerWindow", 0L); ("ItemFocus", 1L)]};
     Elaboratetree.Request {name = "SendEvent"; opcode = 25;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "propagate";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
         Elaboratetree.Field {name = "destination";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "SendEventDest" }))
             }};
         Elaboratetree.Field {name = "event_mask";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "EventMask" }))
             }};
         Elaboratetree.Field_list {name = "event";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = (Some (Elaboratetree.Expr_value 32L))}
         ];
       reply = None};
     Elaboratetree.Enum {name = "GrabMode";
       items = [("Sync", 0L); ("Async", 1L)]};
     Elaboratetree.Enum {name = "GrabStatus";
       items =
       [("Success", 0L); ("AlreadyGrabbed", 1L); ("InvalidTime", 2L);
         ("NotViewable", 3L); ("Frozen", 4L)]};
     Elaboratetree.Request {name = "GrabPointer"; opcode = 26;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "owner_events";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
         Elaboratetree.Field {name = "grab_window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "event_mask";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "EventMask" }))
             }};
         Elaboratetree.Field {name = "pointer_mode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "GrabMode" }))
             }};
         Elaboratetree.Field {name = "keyboard_mode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "GrabMode" }))
             }};
         Elaboratetree.Field {name = "confine_to";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Window" }))
             }};
         Elaboratetree.Field {name = "cursor";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Cursor" }))
             }};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Time"
                        }))
             }}
         ];
       reply =
       (Some [Elaboratetree.Field {name = "status";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "GrabStatus" }))
                  }}
               ])};
     Elaboratetree.Request {name = "UngrabPointer"; opcode = 27;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Time"
                        }))
             }}
         ];
       reply = None};
     Elaboratetree.Enum {name = "ButtonIndex";
       items =
       [("Any", 0L); ("1", 1L); ("2", 2L); ("3", 3L); ("4", 4L); ("5", 5L)]};
     Elaboratetree.Request {name = "GrabButton"; opcode = 28;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "owner_events";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
         Elaboratetree.Field {name = "grab_window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "event_mask";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "EventMask" }))
             }};
         Elaboratetree.Field {name = "pointer_mode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "GrabMode" }))
             }};
         Elaboratetree.Field {name = "keyboard_mode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "GrabMode" }))
             }};
         Elaboratetree.Field {name = "confine_to";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Window" }))
             }};
         Elaboratetree.Field {name = "cursor";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Cursor" }))
             }};
         Elaboratetree.Field {name = "button";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "ButtonIndex" }))
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false};
         Elaboratetree.Field {name = "modifiers";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "ModMask" }))
             }}
         ];
       reply = None};
     Elaboratetree.Request {name = "UngrabButton"; opcode = 29;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "button";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "ButtonIndex" }))
            }};
         Elaboratetree.Field {name = "grab_window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "modifiers";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "ModMask" }))
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ];
       reply = None};
     Elaboratetree.Request {name = "ChangeActivePointerGrab"; opcode = 30;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "cursor";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Cursor" }))
             }};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Time"
                        }))
             }};
         Elaboratetree.Field {name = "event_mask";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "EventMask" }))
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ];
       reply = None};
     Elaboratetree.Request {name = "GrabKeyboard"; opcode = 31;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "owner_events";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
         Elaboratetree.Field {name = "grab_window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Time"
                        }))
             }};
         Elaboratetree.Field {name = "pointer_mode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "GrabMode" }))
             }};
         Elaboratetree.Field {name = "keyboard_mode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "GrabMode" }))
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ];
       reply =
       (Some [Elaboratetree.Field {name = "status";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "GrabStatus" }))
                  }}
               ])};
     Elaboratetree.Request {name = "UngrabKeyboard"; opcode = 32;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Time"
                        }))
             }}
         ];
       reply = None};
     Elaboratetree.Enum {name = "Grab"; items = [("Any", 0L)]};
     Elaboratetree.Request {name = "GrabKey"; opcode = 33;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "owner_events";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
         Elaboratetree.Field {name = "grab_window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "modifiers";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "ModMask" }))
             }};
         Elaboratetree.Field {name = "key";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "KEYCODE" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Grab"
                        }))
             }};
         Elaboratetree.Field {name = "pointer_mode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "GrabMode" }))
             }};
         Elaboratetree.Field {name = "keyboard_mode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "GrabMode" }))
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
           serialize = false}
         ];
       reply = None};
     Elaboratetree.Request {name = "UngrabKey"; opcode = 34;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "key";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "KEYCODE" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Grab" }))
            }};
         Elaboratetree.Field {name = "grab_window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "modifiers";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "ModMask" }))
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ];
       reply = None};
     Elaboratetree.Enum {name = "Allow";
       items =
       [("AsyncPointer", 0L); ("SyncPointer", 1L); ("ReplayPointer", 2L);
         ("AsyncKeyboard", 3L); ("SyncKeyboard", 4L); ("ReplayKeyboard", 5L);
         ("AsyncBoth", 6L); ("SyncBoth", 7L)]};
     Elaboratetree.Request {name = "AllowEvents"; opcode = 35;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Allow"
                       }))
            }};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Time"
                        }))
             }}
         ];
       reply = None};
     Elaboratetree.Request {name = "GrabServer"; opcode = 36;
       combine_adjacent = true; fields = []; reply = None};
     Elaboratetree.Request {name = "UngrabServer"; opcode = 37;
       combine_adjacent = true; fields = []; reply = None};
     Elaboratetree.Request {name = "QueryPointer"; opcode = 38;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field {name = "same_screen";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
               Elaboratetree.Field {name = "root";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "WINDOW" });
                   ft_allowed = None }};
               Elaboratetree.Field {name = "child";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "WINDOW" });
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_alt_enum
                            { Elaboratetree.id_module = "xproto";
                              id_name = "Window" }))
                   }};
               Elaboratetree.Field {name = "root_x";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "root_y";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "win_x";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "win_y";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "mask";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_mask
                            { Elaboratetree.id_module = "xproto";
                              id_name = "KeyButMask" }))
                   }};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                 serialize = false}
               ])};
     Elaboratetree.Struct {name = "TIMECOORD";
       fields =
       [Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ]};
     Elaboratetree.Request {name = "GetMotionEvents"; opcode = 39;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "start";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Time"
                        }))
             }};
         Elaboratetree.Field {name = "stop";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Time"
                        }))
             }}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field_list_length {name = "events_len";
                 type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                 expr = (Elaboratetree.Field_ref "events_len")};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                 serialize = false};
               Elaboratetree.Field_list_simple {name = "events";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "TIMECOORD" });
                   ft_allowed = None };
                 length = "events_len"}
               ])};
     Elaboratetree.Request {name = "TranslateCoordinates"; opcode = 40;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "src_window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "dst_window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "src_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "src_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field {name = "same_screen";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Bool);
                  ft_allowed = None }};
               Elaboratetree.Field {name = "child";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "WINDOW" });
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_alt_enum
                            { Elaboratetree.id_module = "xproto";
                              id_name = "Window" }))
                   }};
               Elaboratetree.Field {name = "dst_x";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "dst_y";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }}
               ])};
     Elaboratetree.Request {name = "WarpPointer"; opcode = 41;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "src_window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Window" }))
             }};
         Elaboratetree.Field {name = "dst_window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Window" }))
             }};
         Elaboratetree.Field {name = "src_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "src_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "src_width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "src_height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "dst_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "dst_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Enum {name = "InputFocus";
       items =
       [("None", 0L); ("PointerRoot", 1L); ("Parent", 2L);
         ("FollowKeyboard", 3L)]};
     Elaboratetree.Request {name = "SetInputFocus"; opcode = 42;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "revert_to";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "InputFocus" }))
            }};
         Elaboratetree.Field {name = "focus";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "InputFocus" }))
             }};
         Elaboratetree.Field {name = "time";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Time"
                        }))
             }}
         ];
       reply = None};
     Elaboratetree.Request {name = "GetInputFocus"; opcode = 43;
       combine_adjacent = true; fields = [];
       reply =
       (Some [Elaboratetree.Field {name = "revert_to";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "InputFocus" }))
                  }};
               Elaboratetree.Field {name = "focus";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "WINDOW" });
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_alt_enum
                            { Elaboratetree.id_module = "xproto";
                              id_name = "InputFocus" }))
                   }}
               ])};
     Elaboratetree.Request {name = "QueryKeymap"; opcode = 44;
       combine_adjacent = true; fields = [];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field_list {name = "keys";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None };
                 length = (Some (Elaboratetree.Expr_value 32L))}
               ])};
     Elaboratetree.Request {name = "OpenFont"; opcode = 45;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "fid";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "FONT" });
             ft_allowed = None }};
         Elaboratetree.Field_list_length {name = "name_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "name_len")};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Elaboratetree.Field_list_simple {name = "name";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = "name_len"}
         ];
       reply = None};
     Elaboratetree.Request {name = "CloseFont"; opcode = 46;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "font";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "FONT" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Enum {name = "FontDraw";
       items = [("LeftToRight", 0L); ("RightToLeft", 1L)]};
     Elaboratetree.Struct {name = "FONTPROP";
       fields =
       [Elaboratetree.Field {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
         Elaboratetree.Field {name = "value";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }}
         ]};
     Elaboratetree.Struct {name = "CHARINFO";
       fields =
       [Elaboratetree.Field {name = "left_side_bearing";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
         Elaboratetree.Field {name = "right_side_bearing";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "character_width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "ascent";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "descent";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "attributes";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ]};
     Elaboratetree.Request {name = "QueryFont"; opcode = 47;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "font";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "FONTABLE" });
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field {name = "min_bounds";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "CHARINFO" });
                   ft_allowed = None }};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                 serialize = false};
               Elaboratetree.Field {name = "max_bounds";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "CHARINFO" });
                   ft_allowed = None }};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                 serialize = false};
               Elaboratetree.Field {name = "min_char_or_byte2";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "max_char_or_byte2";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "default_char";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field_list_length {name = "properties_len";
                 type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                 expr = (Elaboratetree.Field_ref "properties_len")};
               Elaboratetree.Field {name = "draw_direction";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Byte);
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_enum
                            { Elaboratetree.id_module = "xproto";
                              id_name = "FontDraw" }))
                   }};
               Elaboratetree.Field {name = "min_byte1";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "max_byte1";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "all_chars_exist";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Bool);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "font_ascent";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "font_descent";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }};
               Elaboratetree.Field_list_length {name = "char_infos_len";
                 type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                 expr = (Elaboratetree.Field_ref "char_infos_len")};
               Elaboratetree.Field_list_simple {name = "properties";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "FONTPROP" });
                   ft_allowed = None };
                 length = "properties_len"};
               Elaboratetree.Field_list_simple {name = "char_infos";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "CHARINFO" });
                   ft_allowed = None };
                 length = "char_infos_len"}
               ])};
     Elaboratetree.Request {name = "QueryTextExtents"; opcode = 48;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_expr {name = "odd_length";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            };
          expr =
          (Elaboratetree.Binop (Parsetree.Bit_and,
             (Elaboratetree.Field_ref "string_len"),
             (Elaboratetree.Expr_value 1L)))};
         Elaboratetree.Field {name = "font";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "FONTABLE" });
             ft_allowed = None }};
         Elaboratetree.Field_list {name = "string";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "CHAR2B" });
             ft_allowed = None };
           length = None}
         ];
       reply =
       (Some [Elaboratetree.Field {name = "draw_direction";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "FontDraw" }))
                  }};
               Elaboratetree.Field {name = "font_ascent";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "font_descent";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "overall_ascent";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "overall_descent";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "overall_width";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int32);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "overall_left";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int32);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "overall_right";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int32);
                   ft_allowed = None }}
               ])};
     Elaboratetree.Struct {name = "STR";
       fields =
       [Elaboratetree.Field_list_length {name = "name_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
          expr = (Elaboratetree.Field_ref "name_len")};
         Elaboratetree.Field_list_simple {name = "name";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = "name_len"}
         ]};
     Elaboratetree.Request {name = "ListFonts"; opcode = 49;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "max_names";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field_list_length {name = "pattern_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "pattern_len")};
         Elaboratetree.Field_list_simple {name = "pattern";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = "pattern_len"}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field_list_length {name = "names_len";
                 type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                 expr = (Elaboratetree.Field_ref "names_len")};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                 serialize = false};
               Elaboratetree.Field_list_simple {name = "names";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto"; id_name = "STR" });
                   ft_allowed = None };
                 length = "names_len"}
               ])};
     Elaboratetree.Request {name = "ListFontsWithInfo"; opcode = 50;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "max_names";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field_list_length {name = "pattern_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "pattern_len")};
         Elaboratetree.Field_list_simple {name = "pattern";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = "pattern_len"}
         ];
       reply =
       (Some [Elaboratetree.Field_list_length {name = "name_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
                expr = (Elaboratetree.Field_ref "name_len")};
               Elaboratetree.Field {name = "min_bounds";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "CHARINFO" });
                   ft_allowed = None }};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                 serialize = false};
               Elaboratetree.Field {name = "max_bounds";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "CHARINFO" });
                   ft_allowed = None }};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 4);
                 serialize = false};
               Elaboratetree.Field {name = "min_char_or_byte2";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "max_char_or_byte2";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "default_char";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field_list_length {name = "properties_len";
                 type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                 expr = (Elaboratetree.Field_ref "properties_len")};
               Elaboratetree.Field {name = "draw_direction";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Byte);
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_enum
                            { Elaboratetree.id_module = "xproto";
                              id_name = "FontDraw" }))
                   }};
               Elaboratetree.Field {name = "min_byte1";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "max_byte1";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "all_chars_exist";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Bool);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "font_ascent";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "font_descent";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Int16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "replies_hint";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed = None }};
               Elaboratetree.Field_list_simple {name = "properties";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "FONTPROP" });
                   ft_allowed = None };
                 length = "properties_len"};
               Elaboratetree.Field_list_simple {name = "name";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Char);
                   ft_allowed = None };
                 length = "name_len"}
               ])};
     Elaboratetree.Request {name = "SetFontPath"; opcode = 51;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field_list_length {name = "font_qty";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "font_qty")};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Elaboratetree.Field_list_simple {name = "font";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "STR" });
             ft_allowed = None };
           length = "font_qty"}
         ];
       reply = None};
     Elaboratetree.Request {name = "GetFontPath"; opcode = 52;
       combine_adjacent = true; fields = [];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field_list_length {name = "path_len";
                 type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                 expr = (Elaboratetree.Field_ref "path_len")};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                 serialize = false};
               Elaboratetree.Field_list_simple {name = "path";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto"; id_name = "STR" });
                   ft_allowed = None };
                 length = "path_len"}
               ])};
     Elaboratetree.Request {name = "CreatePixmap"; opcode = 53;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "depth";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
         Elaboratetree.Field {name = "pid";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "FreePixmap"; opcode = 54;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "pixmap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Mask {name = "GC";
       items =
       [("Function", 0); ("PlaneMask", 1); ("Foreground", 2);
         ("Background", 3); ("LineWidth", 4); ("LineStyle", 5);
         ("CapStyle", 6); ("JoinStyle", 7); ("FillStyle", 8);
         ("FillRule", 9); ("Tile", 10); ("Stipple", 11);
         ("TileStippleOriginX", 12); ("TileStippleOriginY", 13);
         ("Font", 14); ("SubwindowMode", 15); ("GraphicsExposures", 16);
         ("ClipOriginX", 17); ("ClipOriginY", 18); ("ClipMask", 19);
         ("DashOffset", 20); ("DashList", 21); ("ArcMode", 22)];
       additional_values = []};
     Elaboratetree.Enum {name = "GX";
       items =
       [("clear", 0L); ("and", 1L); ("andReverse", 2L); ("copy", 3L);
         ("andInverted", 4L); ("noop", 5L); ("xor", 6L); ("or", 7L);
         ("nor", 8L); ("equiv", 9L); ("invert", 10L); ("orReverse", 11L);
         ("copyInverted", 12L); ("orInverted", 13L); ("nand", 14L);
         ("set", 15L)]};
     Elaboratetree.Enum {name = "LineStyle";
       items = [("Solid", 0L); ("OnOffDash", 1L); ("DoubleDash", 2L)]};
     Elaboratetree.Enum {name = "CapStyle";
       items =
       [("NotLast", 0L); ("Butt", 1L); ("Round", 2L); ("Projecting", 3L)]};
     Elaboratetree.Enum {name = "JoinStyle";
       items = [("Miter", 0L); ("Round", 1L); ("Bevel", 2L)]};
     Elaboratetree.Enum {name = "FillStyle";
       items =
       [("Solid", 0L); ("Tiled", 1L); ("Stippled", 2L);
         ("OpaqueStippled", 3L)]};
     Elaboratetree.Enum {name = "FillRule";
       items = [("EvenOdd", 0L); ("Winding", 1L)]};
     Elaboratetree.Enum {name = "SubwindowMode";
       items = [("ClipByChildren", 0L); ("IncludeInferiors", 1L)]};
     Elaboratetree.Enum {name = "ArcMode";
       items = [("Chord", 0L); ("PieSlice", 1L)]};
     Elaboratetree.Enum {name = "Font"; items = [("None", 0L)]};
     Elaboratetree.Request {name = "CreateGC"; opcode = 55;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "cid";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field_optional_mask {name = "value_mask";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
         Elaboratetree.Field_optional {name = "function";
           mask = "value_mask"; bit = 0;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "GX" }))
             }};
         Elaboratetree.Field_optional {name = "plane_mask";
           mask = "value_mask"; bit = 1;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "foreground";
           mask = "value_mask"; bit = 2;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "background";
           mask = "value_mask"; bit = 3;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "line_width";
           mask = "value_mask"; bit = 4;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "line_style";
           mask = "value_mask"; bit = 5;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "LineStyle" }))
             }};
         Elaboratetree.Field_optional {name = "cap_style";
           mask = "value_mask"; bit = 6;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "CapStyle" }))
             }};
         Elaboratetree.Field_optional {name = "join_style";
           mask = "value_mask"; bit = 7;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "JoinStyle" }))
             }};
         Elaboratetree.Field_optional {name = "fill_style";
           mask = "value_mask"; bit = 8;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "FillStyle" }))
             }};
         Elaboratetree.Field_optional {name = "fill_rule";
           mask = "value_mask"; bit = 9;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "FillRule" }))
             }};
         Elaboratetree.Field_optional {name = "tile"; mask = "value_mask";
           bit = 10;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Pixmap" }))
             }};
         Elaboratetree.Field_optional {name = "stipple"; mask = "value_mask";
           bit = 11;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Pixmap" }))
             }};
         Elaboratetree.Field_optional {name = "tile_stipple_x_origin";
           mask = "value_mask"; bit = 12;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "tile_stipple_y_origin";
           mask = "value_mask"; bit = 13;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "font"; mask = "value_mask";
           bit = 14;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "FONT" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Font"
                        }))
             }};
         Elaboratetree.Field_optional {name = "subwindow_mode";
           mask = "value_mask"; bit = 15;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "SubwindowMode" }))
             }};
         Elaboratetree.Field_optional {name = "graphics_exposures";
           mask = "value_mask"; bit = 16;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "BOOL32" });
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "clip_x_origin";
           mask = "value_mask"; bit = 17;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "clip_y_origin";
           mask = "value_mask"; bit = 18;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "clip_mask";
           mask = "value_mask"; bit = 19;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Pixmap" }))
             }};
         Elaboratetree.Field_optional {name = "dash_offset";
           mask = "value_mask"; bit = 20;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "dashes"; mask = "value_mask";
           bit = 21;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "arc_mode";
           mask = "value_mask"; bit = 22;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "ArcMode" }))
             }}
         ];
       reply = None};
     Elaboratetree.Request {name = "ChangeGC"; opcode = 56;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field_optional_mask {name = "value_mask";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
         Elaboratetree.Field_optional {name = "function";
           mask = "value_mask"; bit = 0;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "GX" }))
             }};
         Elaboratetree.Field_optional {name = "plane_mask";
           mask = "value_mask"; bit = 1;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "foreground";
           mask = "value_mask"; bit = 2;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "background";
           mask = "value_mask"; bit = 3;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "line_width";
           mask = "value_mask"; bit = 4;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "line_style";
           mask = "value_mask"; bit = 5;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "LineStyle" }))
             }};
         Elaboratetree.Field_optional {name = "cap_style";
           mask = "value_mask"; bit = 6;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "CapStyle" }))
             }};
         Elaboratetree.Field_optional {name = "join_style";
           mask = "value_mask"; bit = 7;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "JoinStyle" }))
             }};
         Elaboratetree.Field_optional {name = "fill_style";
           mask = "value_mask"; bit = 8;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "FillStyle" }))
             }};
         Elaboratetree.Field_optional {name = "fill_rule";
           mask = "value_mask"; bit = 9;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "FillRule" }))
             }};
         Elaboratetree.Field_optional {name = "tile"; mask = "value_mask";
           bit = 10;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Pixmap" }))
             }};
         Elaboratetree.Field_optional {name = "stipple"; mask = "value_mask";
           bit = 11;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Pixmap" }))
             }};
         Elaboratetree.Field_optional {name = "tile_stipple_x_origin";
           mask = "value_mask"; bit = 12;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "tile_stipple_y_origin";
           mask = "value_mask"; bit = 13;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "font"; mask = "value_mask";
           bit = 14;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "FONT" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Font"
                        }))
             }};
         Elaboratetree.Field_optional {name = "subwindow_mode";
           mask = "value_mask"; bit = 15;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "SubwindowMode" }))
             }};
         Elaboratetree.Field_optional {name = "graphics_exposures";
           mask = "value_mask"; bit = 16;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "BOOL32" });
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "clip_x_origin";
           mask = "value_mask"; bit = 17;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "clip_y_origin";
           mask = "value_mask"; bit = 18;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "clip_mask";
           mask = "value_mask"; bit = 19;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Pixmap" }))
             }};
         Elaboratetree.Field_optional {name = "dash_offset";
           mask = "value_mask"; bit = 20;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "dashes"; mask = "value_mask";
           bit = 21;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "arc_mode";
           mask = "value_mask"; bit = 22;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "ArcMode" }))
             }}
         ];
       reply = None};
     Elaboratetree.Request {name = "CopyGC"; opcode = 57;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "src_gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "dst_gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "value_mask";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto"; id_name = "GC" }))
             }}
         ];
       reply = None};
     Elaboratetree.Request {name = "SetDashes"; opcode = 58;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "dash_offset";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field_list_length {name = "dashes_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "dashes_len")};
         Elaboratetree.Field_list_simple {name = "dashes";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None };
           length = "dashes_len"}
         ];
       reply = None};
     Elaboratetree.Enum {name = "ClipOrdering";
       items =
       [("Unsorted", 0L); ("YSorted", 1L); ("YXSorted", 2L); ("YXBanded", 3L)
         ]};
     Elaboratetree.Request {name = "SetClipRectangles"; opcode = 59;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "ordering";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "ClipOrdering" }))
            }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "clip_x_origin";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "clip_y_origin";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field_list {name = "rectangles";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "RECTANGLE" });
             ft_allowed = None };
           length = None}
         ];
       reply = None};
     Elaboratetree.Request {name = "FreeGC"; opcode = 60;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "ClearArea"; opcode = 61;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "exposures";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "CopyArea"; opcode = 62;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "src_drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "dst_drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "src_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "src_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "dst_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "dst_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "CopyPlane"; opcode = 63;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "src_drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "dst_drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "src_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "src_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "dst_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "dst_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "bit_plane";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Enum {name = "CoordMode";
       items = [("Origin", 0L); ("Previous", 1L)]};
     Elaboratetree.Request {name = "PolyPoint"; opcode = 64;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "coordinate_mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "CoordMode" }))
            }};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field_list {name = "points";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "POINT" });
             ft_allowed = None };
           length = None}
         ];
       reply = None};
     Elaboratetree.Request {name = "PolyLine"; opcode = 65;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "coordinate_mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "CoordMode" }))
            }};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field_list {name = "points";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "POINT" });
             ft_allowed = None };
           length = None}
         ];
       reply = None};
     Elaboratetree.Struct {name = "SEGMENT";
       fields =
       [Elaboratetree.Field {name = "x1";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
         Elaboratetree.Field {name = "y1";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "x2";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y2";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }}
         ]};
     Elaboratetree.Request {name = "PolySegment"; opcode = 66;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field_list {name = "segments";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "SEGMENT" });
             ft_allowed = None };
           length = None}
         ];
       reply = None};
     Elaboratetree.Request {name = "PolyRectangle"; opcode = 67;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field_list {name = "rectangles";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "RECTANGLE" });
             ft_allowed = None };
           length = None}
         ];
       reply = None};
     Elaboratetree.Request {name = "PolyArc"; opcode = 68;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field_list {name = "arcs";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ARC" });
             ft_allowed = None };
           length = None}
         ];
       reply = None};
     Elaboratetree.Enum {name = "PolyShape";
       items = [("Complex", 0L); ("Nonconvex", 1L); ("Convex", 2L)]};
     Elaboratetree.Request {name = "FillPoly"; opcode = 69;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "shape";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "PolyShape" }))
             }};
         Elaboratetree.Field {name = "coordinate_mode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "CoordMode" }))
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Elaboratetree.Field_list {name = "points";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "POINT" });
             ft_allowed = None };
           length = None}
         ];
       reply = None};
     Elaboratetree.Request {name = "PolyFillRectangle"; opcode = 70;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field_list {name = "rectangles";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "RECTANGLE" });
             ft_allowed = None };
           length = None}
         ];
       reply = None};
     Elaboratetree.Request {name = "PolyFillArc"; opcode = 71;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field_list {name = "arcs";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ARC" });
             ft_allowed = None };
           length = None}
         ];
       reply = None};
     Elaboratetree.Enum {name = "ImageFormat";
       items = [("XYBitmap", 0L); ("XYPixmap", 1L); ("ZPixmap", 2L)]};
     Elaboratetree.Request {name = "PutImage"; opcode = 72;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "ImageFormat" }))
            }};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "dst_x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "dst_y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "left_pad";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Elaboratetree.Field {name = "depth";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Elaboratetree.Field_list {name = "data";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
             };
           length = None}
         ];
       reply = None};
     Elaboratetree.Request {name = "GetImage"; opcode = 73;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "ImageFormat" }))
            }};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "plane_mask";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field {name = "depth";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None }};
               Elaboratetree.Field {name = "visual";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "VISUALID" });
                   ft_allowed = None }};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                 serialize = false};
               Elaboratetree.Field_list {name = "data";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Byte);
                   ft_allowed = None };
                 length =
                 (Some (Elaboratetree.Binop (Parsetree.Mul,
                          (Elaboratetree.Field_ref "length"),
                          (Elaboratetree.Expr_value 4L))))}
               ])};
     Elaboratetree.Request {name = "PolyText8"; opcode = 74;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field_list {name = "items";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
             };
           length = None}
         ];
       reply = None};
     Elaboratetree.Request {name = "PolyText16"; opcode = 75;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field_list {name = "items";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
             };
           length = None}
         ];
       reply = None};
     Elaboratetree.Request {name = "ImageText8"; opcode = 76;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_list_length {name = "string_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Byte);
          expr = (Elaboratetree.Field_ref "string_len")};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field_list_simple {name = "string";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = "string_len"}
         ];
       reply = None};
     Elaboratetree.Request {name = "ImageText16"; opcode = 77;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_list_length {name = "string_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Byte);
          expr = (Elaboratetree.Field_ref "string_len")};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "gc";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field_list_simple {name = "string";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "CHAR2B" });
             ft_allowed = None };
           length = "string_len"}
         ];
       reply = None};
     Elaboratetree.Enum {name = "ColormapAlloc";
       items = [("None", 0L); ("All", 1L)]};
     Elaboratetree.Request {name = "CreateColormap"; opcode = 78;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "alloc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "ColormapAlloc" }))
            }};
         Elaboratetree.Field {name = "mid";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "visual";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "VISUALID" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "FreeColormap"; opcode = 79;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "cmap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "CopyColormapAndFree"; opcode = 80;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "mid";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "src_cmap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "InstallColormap"; opcode = 81;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "cmap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "UninstallColormap"; opcode = 82;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "cmap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "ListInstalledColormaps"; opcode = 83;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field_list_length {name = "cmaps_len";
                 type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                 expr = (Elaboratetree.Field_ref "cmaps_len")};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                 serialize = false};
               Elaboratetree.Field_list_simple {name = "cmaps";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "COLORMAP" });
                   ft_allowed = None };
                 length = "cmaps_len"}
               ])};
     Elaboratetree.Request {name = "AllocColor"; opcode = 84;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "cmap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "red";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "green";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "blue";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field {name = "red";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "green";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "blue";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                 serialize = false};
               Elaboratetree.Field {name = "pixel";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed = None }}
               ])};
     Elaboratetree.Request {name = "AllocNamedColor"; opcode = 85;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "cmap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }};
         Elaboratetree.Field_list_length {name = "name_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "name_len")};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Elaboratetree.Field_list_simple {name = "name";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = "name_len"}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field {name = "pixel";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "exact_red";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "exact_green";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "exact_blue";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "visual_red";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "visual_green";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "visual_blue";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }}
               ])};
     Elaboratetree.Request {name = "AllocColorCells"; opcode = 86;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "contiguous";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
         Elaboratetree.Field {name = "cmap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "colors";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "planes";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field_list_length {name = "pixels_len";
                 type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                 expr = (Elaboratetree.Field_ref "pixels_len")};
               Elaboratetree.Field_list_length {name = "masks_len";
                 type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                 expr = (Elaboratetree.Field_ref "masks_len")};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                 serialize = false};
               Elaboratetree.Field_list_simple {name = "pixels";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed = None };
                 length = "pixels_len"};
               Elaboratetree.Field_list_simple {name = "masks";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed = None };
                 length = "masks_len"}
               ])};
     Elaboratetree.Request {name = "AllocColorPlanes"; opcode = 87;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "contiguous";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
         Elaboratetree.Field {name = "cmap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "colors";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "reds";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "greens";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "blues";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field_list_length {name = "pixels_len";
                 type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                 expr = (Elaboratetree.Field_ref "pixels_len")};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                 serialize = false};
               Elaboratetree.Field {name = "red_mask";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "green_mask";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "blue_mask";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed = None }};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
                 serialize = false};
               Elaboratetree.Field_list_simple {name = "pixels";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed = None };
                 length = "pixels_len"}
               ])};
     Elaboratetree.Request {name = "FreeColors"; opcode = 88;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "cmap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "plane_mask";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_list {name = "pixels";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None };
           length = None}
         ];
       reply = None};
     Elaboratetree.Mask {name = "ColorFlag";
       items = [("Red", 0); ("Green", 1); ("Blue", 2)];
       additional_values = []};
     Elaboratetree.Struct {name = "COLORITEM";
       fields =
       [Elaboratetree.Field {name = "pixel";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
         Elaboratetree.Field {name = "red";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "green";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "blue";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "flags";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte);
             ft_allowed =
             (Some (Elaboratetree.Allowed_mask
                      { Elaboratetree.id_module = "xproto";
                        id_name = "ColorFlag" }))
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false}
         ]};
     Elaboratetree.Request {name = "StoreColors"; opcode = 89;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "cmap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }};
         Elaboratetree.Field_list {name = "items";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORITEM" });
             ft_allowed = None };
           length = None}
         ];
       reply = None};
     Elaboratetree.Request {name = "StoreNamedColor"; opcode = 90;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xproto";
                       id_name = "ColorFlag" }))
            }};
         Elaboratetree.Field {name = "cmap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "pixel";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_list_length {name = "name_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "name_len")};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Elaboratetree.Field_list_simple {name = "name";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = "name_len"}
         ];
       reply = None};
     Elaboratetree.Struct {name = "RGB";
       fields =
       [Elaboratetree.Field {name = "red";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
         Elaboratetree.Field {name = "green";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "blue";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false}
         ]};
     Elaboratetree.Request {name = "QueryColors"; opcode = 91;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "cmap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }};
         Elaboratetree.Field_list {name = "pixels";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None };
           length = None}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field_list_length {name = "colors_len";
                 type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                 expr = (Elaboratetree.Field_ref "colors_len")};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                 serialize = false};
               Elaboratetree.Field_list_simple {name = "colors";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto"; id_name = "RGB" });
                   ft_allowed = None };
                 length = "colors_len"}
               ])};
     Elaboratetree.Request {name = "LookupColor"; opcode = 92;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "cmap";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "COLORMAP" });
             ft_allowed = None }};
         Elaboratetree.Field_list_length {name = "name_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "name_len")};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Elaboratetree.Field_list_simple {name = "name";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = "name_len"}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field {name = "exact_red";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "exact_green";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "exact_blue";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "visual_red";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "visual_green";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "visual_blue";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }}
               ])};
     Elaboratetree.Request {name = "CreateCursor"; opcode = 93;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "cid";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "source";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "mask";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "PIXMAP" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Pixmap" }))
             }};
         Elaboratetree.Field {name = "fore_red";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "fore_green";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "fore_blue";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "back_red";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "back_green";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "back_blue";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "x";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "y";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "CreateGlyphCursor"; opcode = 94;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "cid";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "source_font";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "FONT" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "mask_font";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "FONT" });
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Font"
                        }))
             }};
         Elaboratetree.Field {name = "source_char";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "mask_char";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "fore_red";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "fore_green";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "fore_blue";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "back_red";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "back_green";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "back_blue";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "FreeCursor"; opcode = 95;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "cursor";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Request {name = "RecolorCursor"; opcode = 96;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "cursor";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "fore_red";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "fore_green";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "fore_blue";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "back_red";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "back_green";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "back_blue";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply = None};
     Elaboratetree.Enum {name = "QueryShapeOf";
       items =
       [("LargestCursor", 0L); ("FastestTile", 1L); ("FastestStipple", 2L)]};
     Elaboratetree.Request {name = "QueryBestSize"; opcode = 97;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "class";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "QueryShapeOf" }))
            }};
         Elaboratetree.Field {name = "drawable";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "width";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "height";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card16);
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field {name = "width";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "height";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }}
               ])};
     Elaboratetree.Request {name = "QueryExtension"; opcode = 98;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field_list_length {name = "name_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "name_len")};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Elaboratetree.Field_list_simple {name = "name";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
             };
           length = "name_len"}
         ];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field {name = "present";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Bool);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "major_opcode";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "first_event";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "first_error";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }}
               ])};
     Elaboratetree.Request {name = "ListExtensions"; opcode = 99;
       combine_adjacent = true; fields = [];
       reply =
       (Some [Elaboratetree.Field_list_length {name = "names_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
                expr = (Elaboratetree.Field_ref "names_len")};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                 serialize = false};
               Elaboratetree.Field_list_simple {name = "names";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto"; id_name = "STR" });
                   ft_allowed = None };
                 length = "names_len"}
               ])};
     Elaboratetree.Request {name = "ChangeKeyboardMapping"; opcode = 100;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "keycode_count";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
         Elaboratetree.Field {name = "first_keycode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "KEYCODE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "keysyms_per_keycode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
           serialize = false};
         Elaboratetree.Field_list {name = "keysyms";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "KEYSYM" });
             ft_allowed = None };
           length =
           (Some (Elaboratetree.Binop (Parsetree.Mul,
                    (Elaboratetree.Field_ref "keycode_count"),
                    (Elaboratetree.Field_ref "keysyms_per_keycode"))))}
         ];
       reply = None};
     Elaboratetree.Request {name = "GetKeyboardMapping"; opcode = 101;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "first_keycode";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "KEYCODE" });
             ft_allowed = None }};
         Elaboratetree.Field {name = "count";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None }}
         ];
       reply =
       (Some [Elaboratetree.Field {name = "keysyms_per_keycode";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed = None }};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                 serialize = false};
               Elaboratetree.Field_list {name = "keysyms";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "KEYSYM" });
                   ft_allowed = None };
                 length = (Some (Elaboratetree.Field_ref "length"))}
               ])};
     Elaboratetree.Mask {name = "KB";
       items =
       [("KeyClickPercent", 0); ("BellPercent", 1); ("BellPitch", 2);
         ("BellDuration", 3); ("Led", 4); ("LedMode", 5); ("Key", 6);
         ("AutoRepeatMode", 7)];
       additional_values = []};
     Elaboratetree.Enum {name = "LedMode"; items = [("Off", 0L); ("On", 1L)]};
     Elaboratetree.Enum {name = "AutoRepeatMode";
       items = [("Off", 0L); ("On", 1L); ("Default", 2L)]};
     Elaboratetree.Request {name = "ChangeKeyboardControl"; opcode = 102;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field_optional_mask {name = "value_mask";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card32)};
         Elaboratetree.Field_optional {name = "key_click_percent";
           mask = "value_mask"; bit = 0;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "bell_percent";
           mask = "value_mask"; bit = 1;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "bell_pitch";
           mask = "value_mask"; bit = 2;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "bell_duration";
           mask = "value_mask"; bit = 3;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "led"; mask = "value_mask";
           bit = 4;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "led_mode";
           mask = "value_mask"; bit = 5;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "LedMode" }))
             }};
         Elaboratetree.Field_optional {name = "key"; mask = "value_mask";
           bit = 6;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "KEYCODE32" });
             ft_allowed = None }};
         Elaboratetree.Field_optional {name = "auto_repeat_mode";
           mask = "value_mask"; bit = 7;
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "AutoRepeatMode" }))
             }}
         ];
       reply = None};
     Elaboratetree.Request {name = "GetKeyboardControl"; opcode = 103;
       combine_adjacent = true; fields = [];
       reply =
       (Some [Elaboratetree.Field {name = "global_auto_repeat";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "AutoRepeatMode" }))
                  }};
               Elaboratetree.Field {name = "led_mask";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card32);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "key_click_percent";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "bell_percent";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "bell_pitch";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "bell_duration";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
                 serialize = false};
               Elaboratetree.Field_list {name = "auto_repeats";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None };
                 length = (Some (Elaboratetree.Expr_value 32L))}
               ])};
     Elaboratetree.Request {name = "Bell"; opcode = 104;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "percent";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int8); ft_allowed = None
            }}
         ];
       reply = None};
     Elaboratetree.Request {name = "ChangePointerControl"; opcode = 105;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "acceleration_numerator";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "acceleration_denominator";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "threshold";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "do_acceleration";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
             }};
         Elaboratetree.Field {name = "do_threshold";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
             }}
         ];
       reply = None};
     Elaboratetree.Request {name = "GetPointerControl"; opcode = 106;
       combine_adjacent = true; fields = [];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field {name = "acceleration_numerator";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "acceleration_denominator";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "threshold";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 18);
                 serialize = false}
               ])};
     Elaboratetree.Enum {name = "Blanking";
       items = [("NotPreferred", 0L); ("Preferred", 1L); ("Default", 2L)]};
     Elaboratetree.Enum {name = "Exposures";
       items = [("NotAllowed", 0L); ("Allowed", 1L); ("Default", 2L)]};
     Elaboratetree.Request {name = "SetScreenSaver"; opcode = 107;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "timeout";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "interval";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field {name = "prefer_blanking";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Blanking" }))
             }};
         Elaboratetree.Field {name = "allow_exposures";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Exposures" }))
             }}
         ];
       reply = None};
     Elaboratetree.Request {name = "GetScreenSaver"; opcode = 108;
       combine_adjacent = true; fields = [];
       reply =
       (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
                serialize = false};
               Elaboratetree.Field {name = "timeout";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "interval";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card16);
                   ft_allowed = None }};
               Elaboratetree.Field {name = "prefer_blanking";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Byte);
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_enum
                            { Elaboratetree.id_module = "xproto";
                              id_name = "Blanking" }))
                   }};
               Elaboratetree.Field {name = "allow_exposures";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Byte);
                   ft_allowed =
                   (Some (Elaboratetree.Allowed_enum
                            { Elaboratetree.id_module = "xproto";
                              id_name = "Exposures" }))
                   }};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 18);
                 serialize = false}
               ])};
     Elaboratetree.Enum {name = "HostMode";
       items = [("Insert", 0L); ("Delete", 1L)]};
     Elaboratetree.Enum {name = "Family";
       items =
       [("Internet", 0L); ("DECnet", 1L); ("Chaos", 2L);
         ("ServerInterpreted", 5L); ("Internet6", 6L)]};
     Elaboratetree.Request {name = "ChangeHosts"; opcode = 109;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "HostMode" }))
            }};
         Elaboratetree.Field {name = "family";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed =
             (Some (Elaboratetree.Allowed_enum
                      { Elaboratetree.id_module = "xproto";
                        id_name = "Family" }))
             }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false};
         Elaboratetree.Field_list_length {name = "address_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "address_len")};
         Elaboratetree.Field_list_simple {name = "address";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
             };
           length = "address_len"}
         ];
       reply = None};
     Elaboratetree.Struct {name = "HOST";
       fields =
       [Elaboratetree.Field {name = "family";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Family"
                       }))
            }};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
           serialize = false};
         Elaboratetree.Field_list_length {name = "address_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "address_len")};
         Elaboratetree.Field_list_simple {name = "address";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
             };
           length = "address_len"};
         Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
           serialize = false}
         ]};
     Elaboratetree.Enum {name = "AccessControl";
       items = [("Disable", 0L); ("Enable", 1L)]};
     Elaboratetree.Request {name = "ListHosts"; opcode = 110;
       combine_adjacent = true; fields = [];
       reply =
       (Some [Elaboratetree.Field {name = "mode";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "AccessControl" }))
                  }};
               Elaboratetree.Field_list_length {name = "hosts_len";
                 type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                 expr = (Elaboratetree.Field_ref "hosts_len")};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                 serialize = false};
               Elaboratetree.Field_list_simple {name = "hosts";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto"; id_name = "HOST"
                        });
                   ft_allowed = None };
                 length = "hosts_len"}
               ])};
     Elaboratetree.Request {name = "SetAccessControl"; opcode = 111;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "AccessControl" }))
            }}
         ];
       reply = None};
     Elaboratetree.Enum {name = "CloseDown";
       items =
       [("DestroyAll", 0L); ("RetainPermanent", 1L); ("RetainTemporary", 2L)]};
     Elaboratetree.Request {name = "SetCloseDownMode"; opcode = 112;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "CloseDown" }))
            }}
         ];
       reply = None};
     Elaboratetree.Enum {name = "Kill"; items = [("AllTemporary", 0L)]};
     Elaboratetree.Request {name = "KillClient"; opcode = 113;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "resource";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card32);
             ft_allowed =
             (Some (Elaboratetree.Allowed_alt_enum
                      { Elaboratetree.id_module = "xproto"; id_name = "Kill"
                        }))
             }}
         ];
       reply = None};
     Elaboratetree.Request {name = "RotateProperties"; opcode = 114;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
         Elaboratetree.Field {name = "window";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
             ft_allowed = None }};
         Elaboratetree.Field_list_length {name = "atoms_len";
           type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
           expr = (Elaboratetree.Field_ref "atoms_len")};
         Elaboratetree.Field {name = "delta";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Int16);
             ft_allowed = None }};
         Elaboratetree.Field_list_simple {name = "atoms";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
             ft_allowed = None };
           length = "atoms_len"}
         ];
       reply = None};
     Elaboratetree.Enum {name = "ScreenSaver";
       items = [("Reset", 0L); ("Active", 1L)]};
     Elaboratetree.Request {name = "ForceScreenSaver"; opcode = 115;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field {name = "mode";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "ScreenSaver" }))
            }}
         ];
       reply = None};
     Elaboratetree.Enum {name = "MappingStatus";
       items = [("Success", 0L); ("Busy", 1L); ("Failure", 2L)]};
     Elaboratetree.Request {name = "SetPointerMapping"; opcode = 116;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_list_length {name = "map_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
          expr = (Elaboratetree.Field_ref "map_len")};
         Elaboratetree.Field_list_simple {name = "map";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_primitive Parsetree.Card8);
             ft_allowed = None };
           length = "map_len"}
         ];
       reply =
       (Some [Elaboratetree.Field {name = "status";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "MappingStatus" }))
                  }}
               ])};
     Elaboratetree.Request {name = "GetPointerMapping"; opcode = 117;
       combine_adjacent = true; fields = [];
       reply =
       (Some [Elaboratetree.Field_list_length {name = "map_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
                expr = (Elaboratetree.Field_ref "map_len")};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                 serialize = false};
               Elaboratetree.Field_list_simple {name = "map";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_primitive Parsetree.Card8);
                   ft_allowed = None };
                 length = "map_len"}
               ])};
     Elaboratetree.Enum {name = "MapIndex";
       items =
       [("Shift", 0L); ("Lock", 1L); ("Control", 2L); ("1", 3L); ("2", 4L);
         ("3", 5L); ("4", 6L); ("5", 7L)]};
     Elaboratetree.Request {name = "SetModifierMapping"; opcode = 118;
       combine_adjacent = true;
       fields =
       [Elaboratetree.Field_list_length {name = "keycodes_per_modifier";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
          expr =
          (Elaboratetree.Binop (Parsetree.Div,
             (Elaboratetree.Field_ref "keycodes_per_modifier"),
             (Elaboratetree.Expr_value 8L)))};
         Elaboratetree.Field_list_simple {name = "keycodes";
           type_ =
           { Elaboratetree.ft_type =
             (Elaboratetree.Type_ref
                { Elaboratetree.id_module = "xproto"; id_name = "KEYCODE" });
             ft_allowed = None };
           length = "keycodes_per_modifier"}
         ];
       reply =
       (Some [Elaboratetree.Field {name = "status";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Byte);
                  ft_allowed =
                  (Some (Elaboratetree.Allowed_enum
                           { Elaboratetree.id_module = "xproto";
                             id_name = "MappingStatus" }))
                  }}
               ])};
     Elaboratetree.Request {name = "GetModifierMapping"; opcode = 119;
       combine_adjacent = true; fields = [];
       reply =
       (Some [Elaboratetree.Field_list_length {
                name = "keycodes_per_modifier";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card8);
                expr =
                (Elaboratetree.Binop (Parsetree.Div,
                   (Elaboratetree.Field_ref "keycodes_per_modifier"),
                   (Elaboratetree.Expr_value 8L)))};
               Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                 serialize = false};
               Elaboratetree.Field_list_simple {name = "keycodes";
                 type_ =
                 { Elaboratetree.ft_type =
                   (Elaboratetree.Type_ref
                      { Elaboratetree.id_module = "xproto";
                        id_name = "KEYCODE" });
                   ft_allowed = None };
                 length = "keycodes_per_modifier"}
               ])};
     Elaboratetree.Request {name = "NoOperation"; opcode = 127;
       combine_adjacent = true; fields = []; reply = None}
     ])
Elaboratetree.Extension {name = "SELinux"; file_name = "xselinux";
  query_name = "SELinux"; multiword = false; version = (1, 0);
  imports = ["xproto"];
  declarations =
  [Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
     combine_adjacent = true;
     fields =
     [Elaboratetree.Field {name = "client_major";
        type_ =
        { Elaboratetree.ft_type =
          (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None }};
       Elaboratetree.Field {name = "client_minor";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
           }}
       ];
     reply =
     (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
              serialize = false};
             Elaboratetree.Field {name = "server_major";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card16);
                 ft_allowed = None }};
             Elaboratetree.Field {name = "server_minor";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card16);
                 ft_allowed = None }}
             ])};
    Elaboratetree.Request {name = "SetDeviceCreateContext"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field_list_length {name = "context_len";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
         expr = (Elaboratetree.Field_ref "context_len")};
        Elaboratetree.Field_list_simple {name = "context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "context_len"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetDeviceCreateContext"; opcode = 2;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "context_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "context_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "context";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "context_len"}
              ])};
    Elaboratetree.Request {name = "SetDeviceContext"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field_list_length {name = "context_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "context_len")};
        Elaboratetree.Field_list_simple {name = "context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "context_len"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetDeviceContext"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "device";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "context_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "context_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "context";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "context_len"}
              ])};
    Elaboratetree.Request {name = "SetWindowCreateContext"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field_list_length {name = "context_len";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
         expr = (Elaboratetree.Field_ref "context_len")};
        Elaboratetree.Field_list_simple {name = "context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "context_len"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetWindowCreateContext"; opcode = 6;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "context_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "context_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "context";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "context_len"}
              ])};
    Elaboratetree.Request {name = "GetWindowContext"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "context_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "context_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "context";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "context_len"}
              ])};
    Elaboratetree.Struct {name = "ListItem";
      fields =
      [Elaboratetree.Field {name = "name";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "object_context_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "object_context_len")};
        Elaboratetree.Field_list_length {name = "data_context_len";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "data_context_len")};
        Elaboratetree.Field_list_simple {name = "object_context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "object_context_len"};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "data_context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "data_context_len"};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
          serialize = false}
        ]};
    Elaboratetree.Request {name = "SetPropertyCreateContext"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field_list_length {name = "context_len";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
         expr = (Elaboratetree.Field_ref "context_len")};
        Elaboratetree.Field_list_simple {name = "context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "context_len"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetPropertyCreateContext"; opcode = 9;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "context_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "context_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "context";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "context_len"}
              ])};
    Elaboratetree.Request {name = "SetPropertyUseContext"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field_list_length {name = "context_len";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
         expr = (Elaboratetree.Field_ref "context_len")};
        Elaboratetree.Field_list_simple {name = "context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "context_len"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetPropertyUseContext"; opcode = 11;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "context_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "context_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "context";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "context_len"}
              ])};
    Elaboratetree.Request {name = "GetPropertyContext"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "context_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "context_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "context";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "context_len"}
              ])};
    Elaboratetree.Request {name = "GetPropertyDataContext"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "property";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "context_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "context_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "context";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "context_len"}
              ])};
    Elaboratetree.Request {name = "ListProperties"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "properties_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "properties_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "properties";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xselinux";
                       id_name = "ListItem" });
                  ft_allowed = None };
                length = "properties_len"}
              ])};
    Elaboratetree.Request {name = "SetSelectionCreateContext"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field_list_length {name = "context_len";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
         expr = (Elaboratetree.Field_ref "context_len")};
        Elaboratetree.Field_list_simple {name = "context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "context_len"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetSelectionCreateContext"; opcode = 16;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "context_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "context_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "context";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "context_len"}
              ])};
    Elaboratetree.Request {name = "SetSelectionUseContext"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field_list_length {name = "context_len";
         type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
         expr = (Elaboratetree.Field_ref "context_len")};
        Elaboratetree.Field_list_simple {name = "context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "context_len"}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetSelectionUseContext"; opcode = 18;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "context_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "context_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "context";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "context_len"}
              ])};
    Elaboratetree.Request {name = "GetSelectionContext"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "selection";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "context_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "context_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "context";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "context_len"}
              ])};
    Elaboratetree.Request {name = "GetSelectionDataContext"; opcode = 20;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "selection";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "context_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "context_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "context";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "context_len"}
              ])};
    Elaboratetree.Request {name = "ListSelections"; opcode = 21;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "selections_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "selections_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "selections";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xselinux";
                       id_name = "ListItem" });
                  ft_allowed = None };
                length = "selections_len"}
              ])};
    Elaboratetree.Request {name = "GetClientContext"; opcode = 22;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "resource";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "context_len";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "context_len")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "context";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Char);
                  ft_allowed = None };
                length = "context_len"}
              ])}
    ]}
Elaboratetree.Extension {name = "Test"; file_name = "xtest";
  query_name = "XTEST"; multiword = false; version = (2, 2);
  imports = ["xproto"];
  declarations =
  [Elaboratetree.Request {name = "GetVersion"; opcode = 0;
     combine_adjacent = true;
     fields =
     [Elaboratetree.Field {name = "major_version";
        type_ =
        { Elaboratetree.ft_type =
          (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None }};
       Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
         serialize = false};
       Elaboratetree.Field {name = "minor_version";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card16); ft_allowed = None
           }}
       ];
     reply =
     (Some [Elaboratetree.Field {name = "major_version";
              type_ =
              { Elaboratetree.ft_type =
                (Elaboratetree.Type_primitive Parsetree.Card8);
                ft_allowed = None }};
             Elaboratetree.Field {name = "minor_version";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Card16);
                 ft_allowed = None }}
             ])};
    Elaboratetree.Enum {name = "Cursor";
      items = [("None", 0L); ("Current", 1L)]};
    Elaboratetree.Request {name = "CompareCursor"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "cursor";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "CURSOR" });
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "same";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Bool);
                 ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "FakeInput"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "type";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None }};
        Elaboratetree.Field {name = "detail";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Byte); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "root";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 8);
          serialize = false};
        Elaboratetree.Field {name = "rootX";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "rootY";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 7);
          serialize = false};
        Elaboratetree.Field {name = "deviceid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GrabControl"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "impervious";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None}
    ]}
Elaboratetree.Extension {name = "Xv"; file_name = "xv";
  query_name = "XVideo"; multiword = false; version = (2, 2);
  imports = ["xproto"; "shm"];
  declarations =
  [Elaboratetree.Type_alias {name = "PORT";
     type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "ENCODING";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Mask {name = "Type";
      items =
      [("InputMask", 0); ("OutputMask", 1); ("VideoMask", 2);
        ("StillMask", 3); ("ImageMask", 4)];
      additional_values = []};
    Elaboratetree.Enum {name = "ImageFormatInfoType";
      items = [("RGB", 0L); ("YUV", 1L)]};
    Elaboratetree.Enum {name = "ImageFormatInfoFormat";
      items = [("Packed", 0L); ("Planar", 1L)]};
    Elaboratetree.Mask {name = "AttributeFlag";
      items = [("Gettable", 0); ("Settable", 1)]; additional_values = []};
    Elaboratetree.Enum {name = "VideoNotifyReason";
      items =
      [("Started", 0L); ("Stopped", 1L); ("Busy", 2L); ("Preempted", 3L);
        ("HardError", 4L)]};
    Elaboratetree.Enum {name = "ScanlineOrder";
      items = [("TopToBottom", 0L); ("BottomToTop", 1L)]};
    Elaboratetree.Enum {name = "GrabPortStatus";
      items =
      [("Success", 0L); ("BadExtension", 1L); ("AlreadyGrabbed", 2L);
        ("InvalidTime", 3L); ("BadReply", 4L); ("BadAlloc", 5L)]};
    Elaboratetree.Struct {name = "Rational";
      fields =
      [Elaboratetree.Field {name = "numerator";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "denominator";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ]};
    Elaboratetree.Struct {name = "Format";
      fields =
      [Elaboratetree.Field {name = "visual";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "VISUALID" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "depth";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ]};
    Elaboratetree.Struct {name = "AdaptorInfo";
      fields =
      [Elaboratetree.Field {name = "base_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "name_size";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "name_size")};
        Elaboratetree.Field {name = "num_ports";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "num_formats";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "num_formats")};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_mask
                     { Elaboratetree.id_module = "xv"; id_name = "Type" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "name_size"};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
          serialize = false};
        Elaboratetree.Field_list_simple {name = "formats";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xv"; id_name = "Format" });
            ft_allowed = None };
          length = "num_formats"}
        ]};
    Elaboratetree.Struct {name = "EncodingInfo";
      fields =
      [Elaboratetree.Field {name = "encoding";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "ENCODING" });
           ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "name_size";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
          expr = (Elaboratetree.Field_ref "name_size")};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "rate";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xv"; id_name = "Rational" });
            ft_allowed = None }};
        Elaboratetree.Field_list_simple {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "name_size"};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
          serialize = false}
        ]};
    Elaboratetree.Struct {name = "Image";
      fields =
      [Elaboratetree.Field {name = "id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_list_length {name = "data_size";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "data_size")};
        Elaboratetree.Field_list_length {name = "num_planes";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "num_planes")};
        Elaboratetree.Field_list_simple {name = "pitches";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_planes"};
        Elaboratetree.Field_list_simple {name = "offsets";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None };
          length = "num_planes"};
        Elaboratetree.Field_list_simple {name = "data";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = "data_size"}
        ]};
    Elaboratetree.Struct {name = "AttributeInfo";
      fields =
      [Elaboratetree.Field {name = "flags";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32);
           ft_allowed =
           (Some (Elaboratetree.Allowed_mask
                    { Elaboratetree.id_module = "xv";
                      id_name = "AttributeFlag" }))
           }};
        Elaboratetree.Field {name = "min";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field {name = "max";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }};
        Elaboratetree.Field_list_length {name = "size";
          type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
          expr = (Elaboratetree.Field_ref "size")};
        Elaboratetree.Field_list_simple {name = "name";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Char); ft_allowed = None
            };
          length = "size"};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_align 4);
          serialize = false}
        ]};
    Elaboratetree.Struct {name = "ImageFormatInfo";
      fields =
      [Elaboratetree.Field {name = "id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Card32); ft_allowed = None
           }};
        Elaboratetree.Field {name = "type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xv";
                       id_name = "ImageFormatInfoType" }))
            }};
        Elaboratetree.Field {name = "byte_order";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xproto";
                       id_name = "ImageOrder" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field_list {name = "guid";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = (Some (Elaboratetree.Expr_value 16L))};
        Elaboratetree.Field {name = "bpp";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field {name = "num_planes";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 2);
          serialize = false};
        Elaboratetree.Field {name = "depth";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "red_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "green_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "blue_mask";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xv";
                       id_name = "ImageFormatInfoFormat" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false};
        Elaboratetree.Field {name = "y_sample_bits";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "u_sample_bits";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "v_sample_bits";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vhorz_y_period";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vhorz_u_period";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vhorz_v_period";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vvert_y_period";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vvert_u_period";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vvert_v_period";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field_list {name = "vcomp_order";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = (Some (Elaboratetree.Expr_value 32L))};
        Elaboratetree.Field {name = "vscanline_order";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8);
            ft_allowed =
            (Some (Elaboratetree.Allowed_enum
                     { Elaboratetree.id_module = "xv";
                       id_name = "ScanlineOrder" }))
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 11);
          serialize = false}
        ]};
    Elaboratetree.Error {name = "BadPort"; number = 0; fields = []};
    Elaboratetree.Error {name = "BadEncoding"; number = 1; fields = []};
    Elaboratetree.Error {name = "BadControl"; number = 2; fields = []};
    Elaboratetree.Event {name = "VideoNotify"; number = 0;
      is_generic = false; is_serializable = false;
      no_sequence_number = false;
      fields =
      [Elaboratetree.Field {name = "reason";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_primitive Parsetree.Byte);
           ft_allowed =
           (Some (Elaboratetree.Allowed_enum
                    { Elaboratetree.id_module = "xv";
                      id_name = "VideoNotifyReason" }))
           }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "port";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xv"; id_name = "PORT" });
            ft_allowed = None }}
        ]};
    Elaboratetree.Event {name = "PortNotify"; number = 1; is_generic = false;
      is_serializable = false; no_sequence_number = false;
      fields =
      [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
         serialize = false};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "port";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xv"; id_name = "PORT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "attribute";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "value";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ]};
    Elaboratetree.Request {name = "QueryExtension"; opcode = 0;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "QueryAdaptors"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "window";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "WINDOW" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_adaptors";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_adaptors")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "info";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xv";
                       id_name = "AdaptorInfo" });
                  ft_allowed = None };
                length = "num_adaptors"}
              ])};
    Elaboratetree.Request {name = "QueryEncodings"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_encodings";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card16);
                expr = (Elaboratetree.Field_ref "num_encodings")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 22);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "info";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xv";
                       id_name = "EncodingInfo" });
                  ft_allowed = None };
                length = "num_encodings"}
              ])};
    Elaboratetree.Request {name = "GrabPort"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }}
        ];
      reply =
      (Some [Elaboratetree.Field {name = "result";
               type_ =
               { Elaboratetree.ft_type =
                 (Elaboratetree.Type_primitive Parsetree.Byte);
                 ft_allowed =
                 (Some (Elaboratetree.Allowed_enum
                          { Elaboratetree.id_module = "xv";
                            id_name = "GrabPortStatus" }))
                 }}
              ])};
    Elaboratetree.Request {name = "UngrabPort"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "time";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "TIMESTAMP" });
            ft_allowed =
            (Some (Elaboratetree.Allowed_alt_enum
                     { Elaboratetree.id_module = "xproto"; id_name = "Time" }))
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "PutVideo"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "gc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "vid_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "vid_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "vid_w";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vid_h";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "drw_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "drw_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "drw_w";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "drw_h";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "PutStill"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "gc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "vid_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "vid_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "vid_w";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vid_h";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "drw_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "drw_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "drw_w";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "drw_h";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetVideo"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "gc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "vid_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "vid_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "vid_w";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vid_h";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "drw_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "drw_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "drw_w";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "drw_h";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetStill"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "gc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "vid_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "vid_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "vid_w";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vid_h";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "drw_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "drw_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "drw_w";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "drw_h";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "StopVideo"; opcode = 9;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "SelectVideoNotify"; opcode = 10;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "drawable";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "onoff";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "SelectPortNotify"; opcode = 11;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "onoff";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None};
    Elaboratetree.Request {name = "QueryBestSize"; opcode = 12;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "vid_w";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "vid_h";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "drw_w";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "drw_h";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "motion";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Bool); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "actual_width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "actual_height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "SetPortAttribute"; opcode = 13;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "attribute";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "value";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int32); ft_allowed = None
            }}
        ];
      reply = None};
    Elaboratetree.Request {name = "GetPortAttribute"; opcode = 14;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "attribute";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "ATOM" });
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "value";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Int32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "QueryPortAttributes"; opcode = 15;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_attributes";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_attributes")};
              Elaboratetree.Field {name = "text_size";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 16);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "attributes";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xv";
                       id_name = "AttributeInfo" });
                  ft_allowed = None };
                length = "num_attributes"}
              ])};
    Elaboratetree.Request {name = "ListImageFormats"; opcode = 16;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_formats";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_formats")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "format";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xv";
                       id_name = "ImageFormatInfo" });
                  ft_allowed = None };
                length = "num_formats"}
              ])};
    Elaboratetree.Request {name = "QueryImageAttributes"; opcode = 17;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num_planes";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num_planes")};
              Elaboratetree.Field {name = "data_size";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "width";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "height";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "pitches";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = "num_planes"};
              Elaboratetree.Field_list_simple {name = "offsets";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = "num_planes"}
              ])};
    Elaboratetree.Request {name = "PutImage"; opcode = 18;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "gc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "src_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "src_w";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_h";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "drw_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "drw_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "drw_w";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "drw_h";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field_list {name = "data";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            };
          length = None}
        ];
      reply = None};
    Elaboratetree.Request {name = "ShmPutImage"; opcode = 19;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "drawable";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "DRAWABLE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "gc";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xproto"; id_name = "GCONTEXT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "shmseg";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "shm"; id_name = "SEG" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "offset";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "src_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "src_w";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "src_h";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "drw_x";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "drw_y";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Int16); ft_allowed = None
            }};
        Elaboratetree.Field {name = "drw_w";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "drw_h";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "send_event";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card8); ft_allowed = None
            }};
        Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 3);
          serialize = false}
        ];
      reply = None}
    ]}
Elaboratetree.Extension {name = "XvMC"; file_name = "xvmc";
  query_name = "XVideo-MotionCompensation"; multiword = false;
  version = (1, 1); imports = ["xv"];
  declarations =
  [Elaboratetree.Type_alias {name = "CONTEXT";
     type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "SURFACE";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Type_alias {name = "SUBPICTURE";
      type_ = (Elaboratetree.Type_primitive Parsetree.Xid)};
    Elaboratetree.Struct {name = "SurfaceInfo";
      fields =
      [Elaboratetree.Field {name = "id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xvmc"; id_name = "SURFACE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "chroma_format";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "pad0";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "max_width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "max_height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "subpicture_max_width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "subpicture_max_height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "mc_type";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ]};
    Elaboratetree.Request {name = "QueryVersion"; opcode = 0;
      combine_adjacent = true; fields = [];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "major";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "minor";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }}
              ])};
    Elaboratetree.Request {name = "ListSurfaceTypes"; opcode = 1;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "surfaces";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xvmc";
                       id_name = "SurfaceInfo" });
                  ft_allowed = None };
                length = "num"}
              ])};
    Elaboratetree.Request {name = "CreateContext"; opcode = 2;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xvmc"; id_name = "CONTEXT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "port_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xv"; id_name = "PORT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "surface_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xvmc"; id_name = "SURFACE" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "flags";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "width_actual";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "height_actual";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "flags_return";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None }};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list {name = "priv_data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = (Some (Elaboratetree.Field_ref "length"))}
              ])};
    Elaboratetree.Request {name = "DestroyContext"; opcode = 3;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "context_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xvmc"; id_name = "CONTEXT" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateSurface"; opcode = 4;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "surface_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xvmc"; id_name = "SURFACE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "context_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xvmc"; id_name = "CONTEXT" });
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 24);
                serialize = false};
              Elaboratetree.Field_list {name = "priv_data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = (Some (Elaboratetree.Field_ref "length"))}
              ])};
    Elaboratetree.Request {name = "DestroySurface"; opcode = 5;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "surface_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xvmc"; id_name = "SURFACE" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "CreateSubpicture"; opcode = 6;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "subpicture_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xvmc"; id_name = "SUBPICTURE" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "context";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xvmc"; id_name = "CONTEXT" });
            ft_allowed = None }};
        Elaboratetree.Field {name = "xvimage_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card32);
            ft_allowed = None }};
        Elaboratetree.Field {name = "width";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }};
        Elaboratetree.Field {name = "height";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_primitive Parsetree.Card16);
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field {name = "width_actual";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "height_actual";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "num_palette_entries";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field {name = "entry_bytes";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card16);
                  ft_allowed = None }};
              Elaboratetree.Field_list {name = "component_order";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card8);
                  ft_allowed = None };
                length = (Some (Elaboratetree.Expr_value 4L))};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 12);
                serialize = false};
              Elaboratetree.Field_list {name = "priv_data";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_primitive Parsetree.Card32);
                  ft_allowed = None };
                length = (Some (Elaboratetree.Field_ref "length"))}
              ])};
    Elaboratetree.Request {name = "DestroySubpicture"; opcode = 7;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "subpicture_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xvmc"; id_name = "SUBPICTURE" });
           ft_allowed = None }}
        ];
      reply = None};
    Elaboratetree.Request {name = "ListSubpictureTypes"; opcode = 8;
      combine_adjacent = true;
      fields =
      [Elaboratetree.Field {name = "port_id";
         type_ =
         { Elaboratetree.ft_type =
           (Elaboratetree.Type_ref
              { Elaboratetree.id_module = "xv"; id_name = "PORT" });
           ft_allowed = None }};
        Elaboratetree.Field {name = "surface_id";
          type_ =
          { Elaboratetree.ft_type =
            (Elaboratetree.Type_ref
               { Elaboratetree.id_module = "xvmc"; id_name = "SURFACE" });
            ft_allowed = None }}
        ];
      reply =
      (Some [Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 1);
               serialize = false};
              Elaboratetree.Field_list_length {name = "num";
                type_ = (Elaboratetree.Type_primitive Parsetree.Card32);
                expr = (Elaboratetree.Field_ref "num")};
              Elaboratetree.Field_pad {pad = (Parsetree.Pad_bytes 20);
                serialize = false};
              Elaboratetree.Field_list_simple {name = "types";
                type_ =
                { Elaboratetree.ft_type =
                  (Elaboratetree.Type_ref
                     { Elaboratetree.id_module = "xv";
                       id_name = "ImageFormatInfo" });
                  ft_allowed = None };
                length = "num"}
              ])}
    ]}
